{"meta":{"title":"Ivan's Blog","subtitle":"Thinking as a Geek","description":"Thinking as a Geek","author":"Ivan","url":"http://blog.yfgeek.com"},"pages":[{"title":"前端收藏夹","date":"2016-07-30T16:27:35.000Z","updated":"2016-08-17T11:53:28.000Z","comments":true,"path":"f2e.html","permalink":"http://blog.yfgeek.com/f2e.html","excerpt":"","text":"这是一个真正的前端收藏夹，由于前端技术更新较快，好资源太多，在这里做个收藏夹，只为方便自己。 网站 Github热度排名 imweb前端社区 鑫空间 AlloyTeam Github PDF.JS 加载pdf娱乐 前端 JSer 装逼手册工具 工具武装的前端开发工程师 Vim 初探 [译] 使用 Zopfli 优化 PNG 图片 在Mac平台配置你的开发环境 前端工具箱chrome插件模板素材 easyicon 稀土区 优设 500px 壁纸wallhaven jquery文档 Hexo文章 通过一张简单的图，让你彻底地、永久地搞懂JS的\\=\\=运算 如何在前端开发中增加编码效率，这里有十款 Chrome 扩展可以帮你 前端面试大全 前端跨域及其解决方案 30分钟git命令入门到放弃 (Canvas) 前端如何呼风唤雨 如何构建一支专业的前端开发团队（一） Nodejs学习日志（一）——cheerio爬虫 如何打造一个令人愉悦的前端开发环境（一） 如何让你的网页打开速度降低到1s内"},{"title":"","date":"2016-09-12T09:04:04.000Z","updated":"2016-09-12T09:04:04.000Z","comments":false,"path":"tags/index.html","permalink":"http://blog.yfgeek.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"树莓派实时温湿度监测进阶","slug":"templcd","date":"2016-08-26T07:19:14.000Z","updated":"2016-08-26T07:37:01.000Z","comments":true,"path":"2016/08/26/templcd/","link":"","permalink":"http://blog.yfgeek.com/2016/08/26/templcd/","excerpt":"这是一个树莓派实时监测的项目，需要参考上文，可在web上显示实时的温度及湿度变化情况。","text":"这是一个树莓派实时监测的项目，需要参考上文，可在web上显示实时的温度及湿度变化情况。 依赖 Adafruit_DHT Adafruit_CharLCD Nginx/Apache (请自行提前安装) 安装依赖123456789sudo apt-get updatesudo apt-get install build-essential python-dev python-smbus python-pipgit clone https://github.com/adafruit/Adafruit_Python_DHT.gitcd Adafruit_Python_DHTsudo python setup.py installsudo pip install RPi.GPIOgit clone https://github.com/adafruit/Adafruit_Python_CharLCDcd Adafruit_Python_CharLCDsudo python setup.py install 安装12cd /var/www/htmlgit clone https://github.com/yfgeek/rpi-TempRuntime.git 运行12cd /var/www/html/rpi-TempRuntimepython LCD.py 截图","categories":[],"tags":[],"keywords":[]},{"title":"把KALI放到U盘里","slug":"ba-kalifang-dao-upan-li","date":"2016-08-25T11:26:45.000Z","updated":"2016-08-25T11:29:38.000Z","comments":true,"path":"2016/08/25/ba-kalifang-dao-upan-li/","link":"","permalink":"http://blog.yfgeek.com/2016/08/25/ba-kalifang-dao-upan-li/","excerpt":"步骤1：进入 bios设置U盘启动，保存并启动电脑 步骤2：在启动选择画面中，选第一个“kali linux(686-pae)”。","text":"步骤1：进入 bios设置U盘启动，保存并启动电脑 步骤2：在启动选择画面中，选第一个“kali linux(686-pae)”。步骤3：进入kali桌面后 打开命令行，输入gparted，在弹出的窗口程序的右上角选择对应你U盘容量的磁盘。把第二个分区unmount后，将此区格式化成 ext4文件系统，同时把分区名(Label)改成 persistence ，同时记下分区列表里面第二个分区的分区名 例如我的是 /dev/sdb2。 关掉gparted ，在命令行里输入以下命令： 1234mkdir /mnt/usbmount /dev/sdb2 /mnt/usbecho \"/ union\" &gt;&gt; /mnt/usb/persistence.confumount /mnt/usb","categories":[],"tags":[{"name":" - Kali - 转载","slug":"Kali-转载","permalink":"http://blog.yfgeek.com/tags/Kali-转载/"}],"keywords":[]},{"title":"基于树莓派的实时温度湿度监测平台","slug":"rpi-tmp-hdt-platform","date":"2016-08-25T05:39:08.000Z","updated":"2016-08-25T11:28:59.000Z","comments":true,"path":"2016/08/25/rpi-tmp-hdt-platform/","link":"","permalink":"http://blog.yfgeek.com/2016/08/25/rpi-tmp-hdt-platform/","excerpt":"前言很早就入了树莓派，一直没有折腾GPIO功能，虽然我是学自动化的，但是我对引脚之类的一窍不通，做这个也是为了预习一下本专业的知识，而更多的，是乐趣。 在淘宝上网购了原料之后，回家发现网上并没有树莓派3B的教程，大部分都是树莓派2B的教程，而树莓派3B的GPIO图都发生了变化，因此写本文的目的还在于帮助更多的人，填补互联网的空白。","text":"前言很早就入了树莓派，一直没有折腾GPIO功能，虽然我是学自动化的，但是我对引脚之类的一窍不通，做这个也是为了预习一下本专业的知识，而更多的，是乐趣。 在淘宝上网购了原料之后，回家发现网上并没有树莓派3B的教程，大部分都是树莓派2B的教程，而树莓派3B的GPIO图都发生了变化，因此写本文的目的还在于帮助更多的人，填补互联网的空白。 知识储备 数字电子技术基础 微机原理与接口技术 python语言 原料 树莓派3B DHT11 LCD1602 2K电阻（也可以是电位器） 子-母 和 母-母 杜邦线 电气绝缘胶带 剪刀 一颗耐心和一颗细心 语言 Python 2.7 组件 python-dev python-rpi.gpio如果不具备以上，请执行：123sudo apt-get updatesudo apt-get install python-devsudo apt-get install python-rpi.gpio 接线我们一共要完成两个任务： 1.连接LCD1602 2.连接DHT11 树莓派3B的GPIO图如下： 2K 电阻如何连接到电路简单粗暴的方法就是把电阻两头连接到两个子-母杜邦线上，然后用绝缘胶布缠上，非常方便美观。 LCD1602 接线方案LCD 与 树莓派相连 方案图，2K电阻是我自行设计，如果有电位器最好放置电位器： 树莓派的USB端口朝下，电源线位置朝上方向摆放。右端一共有40个引脚，每个引脚的PIN位置如上。 VSS，接地，RPi PIN 6VDD，接5V电源，PRi PIN 2VO，液晶对比度调节，接1K 电阻，另一端相连接地，PIN 9RS，寄存器选择，接GPIO 14，RPi PIN 8RW，读写选择，接地，表示写模式，PRi PIN 6E，使能信号，接GPIO 15，RPi PIN 10D0，数据位0，4位工作模式下不用，不接D1，数据位1，4位工作模式下不用，不接D2，数据位2，4位工作模式下不用，不接D3，数据位3，4位工作模式下不用，不接D4，数据位4，接GPIO 17，RPi PIN 11D5，数据位5，接GPIO 18，RPi PIN 12D6，数据位6，接GPIO 27，RPi PIN 13D7，数据位7，接GPIO 22，RPi PIN 15A，液晶屏背光+，接5V，RPi PIN 4K，液晶屏背光-，接地，RPi PIN 39 连接好后，务必要仔细检查是否连接正确，以防开机烧坏GPIO甚至树莓派。 建议在关机情况下接线，如果在开机情况下接线，VDD请最后连接。 LCD1602 开机测试接通电源线，默认情况下，如果连接正确： 肯定没有爆炸 会出现如下图的效果，证明你已经接线成功了 DHT11 接线方案接线简单，主要是把数据传输到GPIO26上 DHT11有3个脚，VCC，DATA，GNDVCC 接 3.3V PIN 01DATA 接 GPIO26 PIN 37GND 接地 PIN 09 #代码采用python语言编写，由于html对tab和空格的支持不好，复制容易产生编译问题，代码已经传到github https://github.com/yfgeek/rpi-TmpHmdRuntimeusr/bin/python# based on code from hugozhu/CharLCD.py https://gist.github.com/hugozhu/6166527# rewrite by ivanfrom time import sleepfrom datetime import datetimefrom time import sleepimport commands,timeimport RPi.GPIO as GPIOdef get_tmp(): channel = 37 data = [] j = 0 GPIO.setmode(GPIO.BOARD) time.sleep(1) GPIO.setup(channel, GPIO.OUT) GPIO.output(channel, GPIO.LOW) time.sleep(0.5) GPIO.output(channel, GPIO.HIGH) GPIO.setup(channel, GPIO.IN) while GPIO.input(channel) == GPIO.LOW: continue while GPIO.input(channel) == GPIO.HIGH: continue while j &lt; 40: k = 0 while GPIO.input(channel) == GPIO.LOW: continue while GPIO.input(channel) == GPIO.HIGH: k += 1 if k &gt; 100: break if k &lt; 8: data.append(0) else: data.append(1) j += 1 print \"sensor is working.\" print data humidity_bit = data[0:8] humidity_point_bit = data[8:16] temperature_bit = data[16:24] temperature_point_bit = data[24:32] check_bit = data[32:40] humidity = 0 humidity_point = 0 temperature = 0 temperature_point = 0 check = 0 for i in range(8): humidity += humidity_bit[i] * 2 ** (7-i) humidity_point += humidity_point_bit[i] * 2 ** (7-i) temperature += temperature_bit[i] * 2 ** (7-i) temperature_point += temperature_point_bit[i] * 2 ** (7-i) check += check_bit[i] * 2 ** (7-i) tmp = humidity + humidity_point + temperature + temperature_point if check == tmp: return 'temp:' + str(temperature) + ' C \\nhumidity:' + str(humidity) + '%' else: get_tmp() GPIO.cleanup() class Adafruit_CharLCD: # commands LCD_CLEARDISPLAY = 0x01 LCD_RETURNHOME = 0x02 LCD_ENTRYMODESET = 0x04 LCD_DISPLAYCONTROL = 0x08 LCD_CURSORSHIFT = 0x10 LCD_FUNCTIONSET = 0x20 LCD_SETCGRAMADDR = 0x40 LCD_SETDDRAMADDR = 0x80 # flags for display entry mode LCD_ENTRYRIGHT = 0x00 LCD_ENTRYLEFT = 0x02 LCD_ENTRYSHIFTINCREMENT = 0x01 LCD_ENTRYSHIFTDECREMENT = 0x00 # flags for display on/off control LCD_DISPLAYON = 0x04 LCD_DISPLAYOFF = 0x00 LCD_CURSORON = 0x02 LCD_CURSOROFF = 0x00 LCD_BLINKON = 0x01 LCD_BLINKOFF = 0x00 # flags for display/cursor shift LCD_DISPLAYMOVE = 0x08 LCD_CURSORMOVE = 0x00 # flags for display/cursor shift LCD_DISPLAYMOVE = 0x08 LCD_CURSORMOVE = 0x00 LCD_MOVERIGHT = 0x04 LCD_MOVELEFT = 0x00 # flags for function set LCD_8BITMODE = 0x10 LCD_4BITMODE = 0x00 LCD_2LINE = 0x08 LCD_1LINE = 0x00 LCD_5x10DOTS = 0x04 LCD_5x8DOTS = 0x00 def __init__(self, pin_rs=8, pin_e=10, pins_db=[11,12,13,15], GPIO = None): # Emulate the old behavior of using RPi.GPIO if we haven't been given # an explicit GPIO interface to use if not GPIO: import RPi.GPIO as GPIO GPIO.setwarnings(False) self.GPIO = GPIO self.pin_rs = pin_rs self.pin_e = pin_e self.pins_db = pins_db self.GPIO.setmode(GPIO.BOARD) self.GPIO.setup(self.pin_e, GPIO.OUT) self.GPIO.setup(self.pin_rs, GPIO.OUT) for pin in self.pins_db: self.GPIO.setup(pin, GPIO.OUT) self.write4bits(0x33) # initialization self.write4bits(0x32) # initialization self.write4bits(0x28) # 2 line 5x7 matrix self.write4bits(0x0C) # turn cursor off 0x0E to enable cursor self.write4bits(0x06) # shift cursor right self.displaycontrol = self.LCD_DISPLAYON | self.LCD_CURSOROFF | self.LCD_BLINKOFF self.displayfunction = self.LCD_4BITMODE | self.LCD_1LINE | self.LCD_5x8DOTS self.displayfunction |= self.LCD_2LINE \"\"\" Initialize to default text direction (for romance languages) \"\"\" self.displaymode = self.LCD_ENTRYLEFT | self.LCD_ENTRYSHIFTDECREMENT self.write4bits(self.LCD_ENTRYMODESET | self.displaymode) # set the entry mode self.clear() def begin(self, cols, lines): if (lines &gt; 1): self.numlines = lines self.displayfunction |= self.LCD_2LINE self.currline = 0 def home(self): self.write4bits(self.LCD_RETURNHOME) # set cursor position to zero self.delayMicroseconds(3000) # this command takes a long time! def clear(self): self.write4bits(self.LCD_CLEARDISPLAY) # command to clear display self.delayMicroseconds(3000) # 3000 microsecond sleep, clearing the display takes a long time def setCursor(self, col, row): self.row_offsets = [ 0x00, 0x40, 0x14, 0x54 ] if ( row &gt; self.numlines ): row = self.numlines - 1 # we count rows starting w/0 self.write4bits(self.LCD_SETDDRAMADDR | (col + self.row_offsets[row])) def noDisplay(self): \"\"\" Turn the display off (quickly) \"\"\" self.displaycontrol &amp;= ~self.LCD_DISPLAYON self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol) def display(self): \"\"\" Turn the display on (quickly) \"\"\" self.displaycontrol |= self.LCD_DISPLAYON self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol) def noCursor(self): \"\"\" Turns the underline cursor on/off \"\"\" self.displaycontrol &amp;= ~self.LCD_CURSORON self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol) def cursor(self): \"\"\" Cursor On \"\"\" self.displaycontrol |= self.LCD_CURSORON self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol) def noBlink(self): \"\"\" Turn on and off the blinking cursor \"\"\" self.displaycontrol &amp;= ~self.LCD_BLINKON self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol) def noBlink(self): \"\"\" Turn on and off the blinking cursor \"\"\" self.displaycontrol &amp;= ~self.LCD_BLINKON self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol) def DisplayLeft(self): \"\"\" These commands scroll the display without changing the RAM \"\"\" self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVELEFT) def scrollDisplayRight(self): \"\"\" These commands scroll the display without changing the RAM \"\"\" self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVERIGHT); def leftToRight(self): \"\"\" This is for text that flows Left to Right \"\"\" self.displaymode |= self.LCD_ENTRYLEFT self.write4bits(self.LCD_ENTRYMODESET | self.displaymode); def rightToLeft(self): \"\"\" This is for text that flows Right to Left \"\"\" self.displaymode &amp;= ~self.LCD_ENTRYLEFT self.write4bits(self.LCD_ENTRYMODESET | self.displaymode) def autoscroll(self): \"\"\" This will 'right justify' text from the cursor \"\"\" self.displaymode |= self.LCD_ENTRYSHIFTINCREMENT self.write4bits(self.LCD_ENTRYMODESET | self.displaymode) def noAutoscroll(self): \"\"\" This will 'left justify' text from the cursor \"\"\" self.displaymode &amp;= ~self.LCD_ENTRYSHIFTINCREMENT self.write4bits(self.LCD_ENTRYMODESET | self.displaymode) def write4bits(self, bits, char_mode=False): \"\"\" Send command to LCD \"\"\" self.delayMicroseconds(1000) # 1000 microsecond sleep bits=bin(bits)[2:].zfill(8) self.GPIO.output(self.pin_rs, char_mode) for pin in self.pins_db: self.GPIO.output(pin, False) for i in range(4): if bits[i] == \"1\": self.GPIO.output(self.pins_db[::-1][i], True) self.pulseEnable() for pin in self.pins_db: self.GPIO.output(pin, False) for i in range(4,8): if bits[i] == \"1\": self.GPIO.output(self.pins_db[::-1][i-4], True) self.pulseEnable() def delayMicroseconds(self, microseconds): seconds = microseconds / float(1000000) # divide microseconds by 1 million for seconds sleep(seconds) def pulseEnable(self): self.GPIO.output(self.pin_e, False) self.delayMicroseconds(1) # 1 microsecond pause - enable pulse must be &gt; 450ns self.GPIO.output(self.pin_e, True) self.delayMicroseconds(1) # 1 microsecond pause - enable pulse must be &gt; 450ns self.GPIO.output(self.pin_e, False) self.delayMicroseconds(1) # commands need &gt; 37us to settle def message(self, text): \"\"\" Send string to LCD. Newline wraps to second line\"\"\" for char in text: if char == '\\n': self.write4bits(0xC0) # next line else: self.write4bits(ord(char),True)if __name__ == '__main__': while True: tmp = get_tmp() if tmp: lcd = Adafruit_CharLCD() lcd.noBlink() lcd.clear() lcd.message(tmp) sleep(5) 运行效果 参考资料https://gist.github.com/hugozhu/6166527https://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code/tree/2d4678fdccec1b93d8d69ba7768f6698545b2c5fhttps://github.com/op2-project/op2-daemon/blob/master/op2d/hal/backend/pihelpers/lcd.pyhttp://blog.csdn.net/xukai871105/article/details/12684617https://www.oschina.net/question/1425530\\_140979http://bbs.elecfans.com/jishu\\_578437\\_1\\_1.htmlhttp://blog.csdn.net/netccy/article/details/48098455https://www.6zou.net/tech/raspberry-pi-lcd1602-system-monitor.htmlhttp://hugozhu.myalert.info/2013/03/23/19-raspberry-pi-drive-1602-lcd.htmlhttp://hugozhu.myalert.info/2013/03/22/19-raspberry-pi-gpio-port-naming.htmlhttp://blog.csdn.net/rocklee/article/details/50082777http://www.guokr.com/post/718305/http://www.rs-online.com/designspark/electronics/blog/content-1148http://bbs.elecfans.com/jishu\\_582479\\_1\\_1.htmlhttps://www.freemindworld.com/blog/2013/130310\\_raspberry\\_pi\\_with\\_lcd.shtmlhttp://blog.csdn.net/u013431550/article/details/40870947http://www.shumeipai.net/thread-21026-1-1.html?_dsign=0e7b69bahttp://blog.csdn.net/longerzone/article/details/36171381","categories":[],"tags":[{"name":" - 树莓派 - 原创","slug":"树莓派-原创","permalink":"http://blog.yfgeek.com/tags/树莓派-原创/"}],"keywords":[]},{"title":"我怀念的依旧是916","slug":"916","date":"2016-08-20T15:22:01.000Z","updated":"2016-08-20T17:09:45.000Z","comments":true,"path":"2016/08/20/916/","link":"","permalink":"http://blog.yfgeek.com/2016/08/20/916/","excerpt":"本文是一个纪念性文章。前天看了一个微电影，忽然想起了母校，十分想念，最想念的，仍然是916。 所谓916，就是图书馆9楼916号，这是我大二大三的美好时光。 916桌子很多，却都是空位，但是有基友陪伴。","text":"本文是一个纪念性文章。前天看了一个微电影，忽然想起了母校，十分想念，最想念的，仍然是916。 所谓916，就是图书馆9楼916号，这是我大二大三的美好时光。 916桌子很多，却都是空位，但是有基友陪伴。 916有dong dong dong，充满回忆。 916从来不用占座，却可以假装学习。 916通宵加零食，空调WI-FI感觉人生圆满了。 916有沙发有地铺，住在学校里的快捷酒店。 916极大地方便了生活，Linux的帮忙少不了。 或许我想念的并不是不太优越的办公环境，而是那种感觉。 炎热的夏天，能有一个办公室开着空调看电影通宵，再有个基友聊聊天，简直完美。 自由自在，想做什么做什么。 当然，我也不会忘记， 偷偷的把被子塞到书包里，绕过防火墙的经历； 第二天起床去厕所刷牙碰到老师，被吓住的心情； 晚上十一点半有人巡查，关闭所有光源，假装没人的感觉； 十点后进入害怕遇到搜查，爬九楼的故事； 隔壁传来的dongdongdong声音和30GB的故事。","categories":[],"tags":[{"name":" - 原创","slug":"原创","permalink":"http://blog.yfgeek.com/tags/原创/"}],"keywords":[]},{"title":"海外App生存指南","slug":"hai-wai-appsheng-cun-zhi-nan","date":"2016-08-12T15:13:34.000Z","updated":"2016-08-12T15:30:50.000Z","comments":true,"path":"2016/08/12/hai-wai-appsheng-cun-zhi-nan/","link":"","permalink":"http://blog.yfgeek.com/2016/08/12/hai-wai-appsheng-cun-zhi-nan/","excerpt":"","text":"DNS/PAC大法优酷土豆爱奇艺在 iOS 的 Wi-Fi 设置当中，点进某个 Wi-Fi 的属性页面，拖到最下面设置「HTTP 代理」-「自动」为：1http://pac.uku.im/pac.pac DNS:1158.69.209.100 更新：https://github.com/uku/Unblock-Youku/issues/618 替换hosts大法网易云音乐1234567891011104.236.189.178 http://music.163.com 198.47.104.134 http://m1.music.126.net 198.47.104.134 http://m2.music.126.net 198.47.104.134 http://m3.music.126.net 198.47.104.134 http://m4.music.126.net198.47.104.134 http://m5.music.126.net 198.47.104.134 http://m6.music.126.net 198.47.104.134 http://m7.music.126.net 198.47.104.134 http://m8.music.126.net 198.47.104.134 http://m9.music.126.net 198.47.104.134 http://m10.music.126.net","categories":[],"tags":[{"name":" - 原创","slug":"原创","permalink":"http://blog.yfgeek.com/tags/原创/"}],"keywords":[]},{"title":"用树莓派把蓝牙音响变成Airplay音响","slug":"airplay","date":"2016-08-07T13:23:56.000Z","updated":"2016-08-07T15:28:30.000Z","comments":true,"path":"2016/08/07/airplay/","link":"","permalink":"http://blog.yfgeek.com/2016/08/07/airplay/","excerpt":"前言最近买了小米蓝牙音响，使用一段时间后发现小米蓝牙音箱有一个极其不方便的地方就是家里苹果设备比较多，想切换设备播放的时候就比较麻烦，还要断开操作。于是萌生了一个想法，正好手上有个树莓派，能不能这样： iOS设备-&gt;Airplay-&gt;树莓派-&gt;蓝牙-&gt;小米蓝牙音箱","text":"前言最近买了小米蓝牙音响，使用一段时间后发现小米蓝牙音箱有一个极其不方便的地方就是家里苹果设备比较多，想切换设备播放的时候就比较麻烦，还要断开操作。于是萌生了一个想法，正好手上有个树莓派，能不能这样： iOS设备-&gt;Airplay-&gt;树莓派-&gt;蓝牙-&gt;小米蓝牙音箱 因此这个问题可以分为两个部分： 1.树莓派蓝牙音频配置部分 2.树莓派Airplay播放部分 在解决这个问题的时候，我走了不少弯路，错路，目前网上没有完整的这个问题的解决方案，此文目的正是填补网络空白。 原料 树莓派3 小米蓝牙音箱 iOS设备 开始树莓派安装Shairport SyncShairport Sync实际上是Shairport的修改版，负责让树莓派发射出稳定的Airplay，之前我一直在使用Shairport，偶然间发现这个神器，让Shairport更加稳定好用，而且加入到系统进程，开机即打开Airplay。安装前请确认是否安装以下依赖包： apt-get install build-essential git apt-get install autoconf automake libtool libdaemon-dev libasound2-dev libpopt-dev libconfig-dev apt-get install avahi-daemon libavahi-client-dev apt-get install libssl-dev apt-get install libpolarssl-dev apt-get install libsoxr-dev 随后下载Shairport Sync：1git clone https://github.com/mikebrady/shairport-sync.git 然后cd到相应目录，执行：1autoreconf -i -f 随后执行：1./configure --with-alsa --with-avahi --with-ssl=openssl --with-metadata --with-soxr --with-systemd 如果没问题的话，可以make了，此时该去洗手间去洗手间，该睡觉睡觉：1make 创建开机启动：123getent group shairport-sync &amp;&gt;/dev/null || sudo groupadd -r shairport-sync &gt;/dev/nullgetent passwd shairport-sync &amp;&gt; /dev/null || sudo useradd -r -M -g shairport-sync -s /usr/bin/nologin -G audio shairport-sync &gt;/dev/null 然后运行：1sudo make install 最后输入，完成安装：1sudo update-rc.d shairport-sync defaults 90 10 树莓派安装蓝牙打开终端，用普通用户权限执行：123sudo apt-get updatesudo apt-get updgrade -ysudo apt-get dist-upgrade -y 随后安装蓝牙及管理软件1sudo apt-get install pi-bluetooth bluez bluez-firmware blueman 将pi用户添加到蓝牙组1sudo usermod -G bluetooth -a pi 还有很重要的一条，安装蓝牙音频配置1sudo apt-get install pulseaudio pulseaudio-module-bluetooth 随后重启一次树莓派，开机，在图形化界面中配对蓝牙，操作比较简单，记得在配对成功后对设备进行连接，省略。也可通过bluetoothctl或hictool命令进行配对。随后记下蓝牙设备的地址，XX:XX:XX:XX:XX:XX格式。 在此步，务必通过测试音频是否能够正常与蓝牙设备通信，记得软件中要勾选蓝牙设备，否则将从3.5mm端口输出音频。推荐使用vlc播放器。 配置蓝牙音频及Shariport Sync安装依赖包：1234sudo apt-get install libdbus-1-devsudo apt-get install libglib2.0-devapt-cache search libasoundsudo apt-get install libasound2-dev 配置及重新安装最新版bluez，此刻可以去洗手间和睡觉觉：123456wget http://www.kernel.org/pub/linux/bluetooth/bluez-4.101.tar.xztar -xvf bluez-4.101.tar.xzcd bluez-4.101./configure --prefix=/usr --mandir=/usr/share/man --sysconfdir=/etc --localstatedir=/var --libexecdir=/libmakesudo make install 复制配置文件到目录：1234sudo cp /home/pi/bluez-4.101/test/simple-agent /usr/bin/bluez-simple-agentsudo cp /home/pi/bluez-4.101/test/test-device /usr/bin/bluez-test-devicesudo cp /home/pi/bluez-4.101/test/test-audio /usr/bin/bluez-test-audiosudo cp /home/pi/bluez-4.101/audio/audio.conf /etc/bluetooth/ 接着运行：123sudo apt-get install python-dbussudo apt-get install python-gobjectsudo cp /usr/lib/alsa-lib/libasound_module_pcm_bluetooth.so /usr/lib/arm-linux-gnueabihf/alsa-lib/ 编辑audio.conf文件使shariport的音频从蓝牙设备输出：1sudo nano /etc/bluetooth/audio.conf 1234# 在[General]区域添加:Enable=Sink,Socket# 取消[A2DP]注释，并加入:Maxconnections=4 打开蓝牙自启动:1sudo systemctl enable bluetooth 重启设备后，继续配置，打开asund.conf文件：1sudo nano /etc/asound.conf 1234567891011121314151617pcm.bt_canz &#123;type plugslave &#123;pcm &#123;type bluetoothdevice XX:XX:XX:XX:XX:XXprofile \"auto\"&#125;&#125;hint &#123;show ondescription \"Mi Speaker\"&#125;&#125;ctl.bt_canz &#123;type bluetooth&#125; 测试bluez能否使用：sudo bluez-simple-agent，如果正常，按ctrl+c停止。12sudo bluez-simple-agent hci0 XX:XX:XX:XX:XX:XXsudo bluez-test-audio connect XX:XX:XX:XX:XX:XX 测试是否连通：speaker-test -c 2 -D bt_canz 再次重启设备。开启后编辑/etc/shairport-sync.conf：123sudo nano /etc/shairport-sync.conf#去掉下面的注释，并加入bt_canzoutput_device = bt_canz 保存！重启！开机即可用。 参考文章https://github.com/mikebrady/shairport-sync/issues/200https://github.com/mikebrady/shairport-synchttp://shumeipai.nxez.com/2014/12/10/raspberry-pi-using-airplay-wireless-audio-playback-achieve-even-putting-wifi.htmlhttp://wangye.org/blog/archives/921/http://blog.csdn.net/huayucong/article/details/51376461http://blog.csdn.net/zhaoqi_0612/article/details/47731821http://blog.csdn.net/techtitan/article/details/6165116http://www.eeboard.com/bbs/forum.php?mod=viewthread&amp;tid=45040&amp;page=1","categories":[],"tags":[{"name":" - 原创 - 树莓派","slug":"原创-树莓派","permalink":"http://blog.yfgeek.com/tags/原创-树莓派/"}],"keywords":[]},{"title":"常用Bash命令总结","slug":"bash","date":"2016-08-05T16:36:19.000Z","updated":"2016-08-06T03:15:29.000Z","comments":true,"path":"2016/08/06/bash/","link":"","permalink":"http://blog.yfgeek.com/2016/08/06/bash/","excerpt":"自从入了Mac后，感觉敲命令更加方便了，对于我这种半吊子青年，一直号称不会写脚本的前端不是好美工，总结了一些命令，仅供参考，省去了最简单的命令，不过部分也比较简单：","text":"自从入了Mac后，感觉敲命令更加方便了，对于我这种半吊子青年，一直号称不会写脚本的前端不是好美工，总结了一些命令，仅供参考，省去了最简单的命令，不过部分也比较简单： 日常 ctrl + a #命令跳转到句首 ctrl + r #命令搜索模式 TAB #命令自动补全 pwd #显示当前路径 tar -cvf mytest.tar mytest/ #对mytest目录打包 tar -xvf mytest.tar #解压tar文件 tar -xvf mytest.tar -C /opt/setups/ #解压到特殊目录 find / -name *.conf #查找/下的所有conf文件 du -sh ./* #查看当前文件夹下的空间占用情况 more #分页查看 which #查看目录 locate #快速搜索 安全 who #当前登录情况 last #最近登录情况 cat /etc/passwd |awk -F \\: &#39;{print $1}&#39; #系统所有用户 chkconfig #启动项检查 netstat -lnp #端口情况 uptime #系统开机多久了 sudo iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT #允许访问 80 端口 一句话命令脚本中切换用户1su - test -c \"pwd\" 连接到你服务器端口的ip1netstat -tun|grep 7890|sort|awk '&#123;print $5&#125;'|cut -d : -f 1|uniq 常用功能#定时任务使用-l参数列出crontab文件:1crontab -l 编辑crontab文件1crontab -e 实例1：每1分钟执行一次myCommand1* * * * * myCommand 实例2：每小时的第3和第15分钟执行13,15 * * * * myCommand 实例3：在上午8点到11点的第3和第15分钟执行13,15 8-11 * * * myCommand 实例4：每隔两天的上午8点到11点的第3和第15分钟执行13,15 8-11 */2 * * myCommand 实例5：每周一上午8点到11点的第3和第15分钟执行13,15 8-11 * * 1 myCommand 实例6：每晚的21:30重启smb130 21 * * * /etc/init.d/smb restart 实例7：每月1、10、22日的4 : 45重启smb145 4 1,10,22 * * /etc/init.d/smb restart 实例8：每周六、周日的1 : 10重启smb110 1 * * 6,0 /etc/init.d/smb restart 实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb10,30 18-23 * * * /etc/init.d/smb restart 实例10：每星期六的晚上11 : 00 pm重启smb10 23 * * 6 /etc/init.d/smb restart 实例11：每一小时重启smb1* */1 * * * /etc/init.d/smb restart 实例12：晚上11点到早上7点之间，每隔一小时重启smb1* 23-7/1 * * * /etc/init.d/smb restart #scp实例1：从远处复制文件到本地目录1scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/ 说明：从10.6.159.147机器上的/opt/soft/的目录中下载demo.tar 文件到本地/opt/soft/目录中 实例2：从远处复制到本地1scp -r root@10.6.159.147:/opt/soft/test /opt/soft/ 说明：从10.6.159.147机器上的/opt/soft/中下载test目录到本地的/opt/soft/目录来。 实例3：上传本地文件到远程机器指定目录1scp /opt/soft/demo.tar root@10.6.159.147:/opt/soft/scptest 说明：复制本地opt/soft/目录下的文件demo.tar 到远程机器10.6.159.147的opt/soft/scptest目录 实例4：上传本地目录到远程机器指定目录1scp -r /opt/soft/test root@10.6.159.147:/opt/soft/scptest 说明：上传本地目录 /opt/soft/test到远程机器10.6.159.147上/opt/soft/scptest的目录中","categories":[],"tags":[{"name":" - 原创 - Tool","slug":"原创-Tool","permalink":"http://blog.yfgeek.com/tags/原创-Tool/"}],"keywords":[]},{"title":"Kali系列——信息收集阶段（二）","slug":"kalixi-lie-xin-xi-shou-ji-jie-duan-yi","date":"2016-08-01T15:20:17.000Z","updated":"2016-08-05T13:13:14.000Z","comments":true,"path":"2016/08/01/kalixi-lie-xin-xi-shou-ji-jie-duan-yi/","link":"","permalink":"http://blog.yfgeek.com/2016/08/01/kalixi-lie-xin-xi-shou-ji-jie-duan-yi/","excerpt":"","text":"fierece暴力破解dns解析12345678910root@kali:~# fierce -dns dbstye.netTrying zone transfer first...Unsuccessful in zone transfer (it was worth a shot)Okay, trying the good old fashioned way... brute forceChecking for wildcard DNS...Nope. Good.Now performing 2280 test(s)... 应用字典 1root@kali:~# fierce -dns dbstye.net -wordlist myWordlist.txt 社工库部分需翻墙 http://www.xiumima.com/ http://cha.hxsec.com/ http://findmima.com http://163.donothackme.club/ http://www.rallyindonesia.com/","categories":[],"tags":[{"name":" - 原创 - Hack","slug":"原创-Hack","permalink":"http://blog.yfgeek.com/tags/原创-Hack/"}],"keywords":[]},{"title":"Kali系列——信息收集阶段（一）","slug":"hack1","date":"2016-07-30T09:48:20.000Z","updated":"2016-08-05T13:13:28.000Z","comments":true,"path":"2016/07/30/hack1/","link":"","permalink":"http://blog.yfgeek.com/2016/07/30/hack1/","excerpt":"记得前几周去参加过一个阿里巴巴举办的安全峰会，其中一个大牛讲到以前的渗透测试三字经，当场真是笑出声： 进谷歌 找注入 没注入 就旁注 没旁注 用0day 没0day 猜目录 没目录 就嗅探 爆账户 找后台 传小马 放大马 拿权限 挂页面 放暗连 清数据 拿不下 去自杀 死不了 继续来 查资料 去社工！ 其实，我觉得渗透测试无论怎么变，不外乎这几点： 信息收集阶段-&gt;漏洞检测阶段-&gt;漏洞利用阶段-&gt;持久化后门阶段 最近借了本好书《高度安全环境下的高级渗透测试》，这本书内容浅显易懂，但却很实用，虽然很多内容都知道，但是不成系统，这本书总结工作做得非常好，总结一下读书笔记。","text":"记得前几周去参加过一个阿里巴巴举办的安全峰会，其中一个大牛讲到以前的渗透测试三字经，当场真是笑出声： 进谷歌 找注入 没注入 就旁注 没旁注 用0day 没0day 猜目录 没目录 就嗅探 爆账户 找后台 传小马 放大马 拿权限 挂页面 放暗连 清数据 拿不下 去自杀 死不了 继续来 查资料 去社工！ 其实，我觉得渗透测试无论怎么变，不外乎这几点： 信息收集阶段-&gt;漏洞检测阶段-&gt;漏洞利用阶段-&gt;持久化后门阶段 最近借了本好书《高度安全环境下的高级渗透测试》，这本书内容浅显易懂，但却很实用，虽然很多内容都知道，但是不成系统，这本书总结工作做得非常好，总结一下读书笔记。 信息收集阶段DNS信息其实DNS信息收集阶段用两个Linux系统自带工具即可完成。 nslookup此命令，可以快速查处ip地址1234567 ✘ ivan@Ivan~ nslookup zhihu.comServer: 114.114.114.114Address: 114.114.114.114#53Non-authoritative answer:Name: zhihu.comAddress: 54.223.189.245 当然也可以指定dns查询服务器：123456789ivan@Ivan ~ nslookup -type=ns zhihu.com 8.8.8.8Server: 8.8.8.8Address: 8.8.8.8#53Non-authoritative answer:zhihu.com nameserver = ns3.dnsv4.com.zhihu.com nameserver = ns4.dnsv4.com.Authoritative answers can be found from: digdig真是个好工具，甚至可以找出DNS域传送漏洞。下面举一个例子，也是乌云网曝光过的，由于篇幅问题，精简了很多内容：1234567891011121314151617181920212223242526272829303132333435ivan@Ivan  ~  dig @dns.csust.edu.cn csust.edu.cn axfr; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; @dns.csust.edu.cn csust.edu.cn axfr; (1 server found);; global options: +cmdcsust.edu.cn. 86400 IN SOA dns.csust.edu.cn. root.localhost.csust.edu.cn. 20160725 28800 7200 604800 86400csust.edu.cn. 86400 IN NS dns.csust.edu.cn.csust.edu.cn. 86400 IN NS dns2.csust.edu.cn.csust.edu.cn. 86400 IN A 113.240.233.146csust.edu.cn. 86400 IN A 210.43.192.8csust.edu.cn. 86400 IN A 210.43.192.18csust.edu.cn. 86400 IN MX 5 mxbiz1.qq.com.csust.edu.cn. 86400 IN MX 10 mxbiz2.qq.com.csust.edu.cn. 86400 IN AAAA 2001:da8:d002::d22b:c0083g.csust.edu.cn. 86400 IN A 113.240.233.6app.csust.edu.cn. 86400 IN A 113.240.233.11app7.csust.edu.cn. 86400 IN A 222.240.152.227app8.csust.edu.cn. 86400 IN A 113.240.233.8archives.csust.edu.cn. 86400 IN A 222.240.152.232bid.csust.edu.cn. 86400 IN CNAME jtcloud.csust.edu.cn.bw.csust.edu.cn. 86400 IN A 10.255.194.20cas.csust.edu.cn. 86400 IN A 210.43.198.1cslgqkzx.csust.edu.cn. 86400 IN A 210.43.188.80cslgxbsk.csust.edu.cn. 86400 IN CNAME cslgqkzx.csust.edu.cn.cslgxbzk.csust.edu.cn. 86400 IN CNAME cslgqkzx.csust.edu.cn.cwcx.csust.edu.cn. 86400 IN A 10.22.14.252cxlt.csust.edu.cn. 86400 IN A 222.240.152.203dkxnsyzx.csust.edu.cn. 86400 IN A 222.240.152.200dlkjxb.csust.edu.cn. 86400 IN CNAME cslgqkzx.csust.edu.cn.dns.csust.edu.cn. 86400 IN A 210.43.192.8csust.edu.cn. 86400 IN SOA dns.csust.edu.cn. root.localhost.csust.edu.cn. 20160725 28800 7200 604800 86400;; Query time: 62 msec;; SERVER: 210.43.192.8#53(210.43.192.8);; WHEN: Sat Jul 30 20:18:47 2016;; XFR size: 112 records (messages 1, bytes 2369) 可以看到，各种信息，从A、cname到MX全部暴露无遗。如果不存在该漏洞则会被服务器拒绝查询请求。 12345ivan@Ivan ~ dig @dns4.tju.edu.cn tju.edu.cn axfr; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; @dns4.tju.edu.cn tju.edu.cn axfr; (1 server found);; global options: +cmd; Transfer failed. whoiswhois查询，不多解释了 12345678910111213141516171819202122ivan@Ivan ~ whois yfgeek.comWhois Server Version 2.0Domain names in the .com and .net domains can now be registeredwith many different competing registrars. Go to http://www.internic.netfor detailed information. Domain Name: YFGEEK.COM Registrar: GODADDY.COM, LLC Sponsoring Registrar IANA ID: 146 Whois Server: whois.godaddy.com Referral URL: http://www.godaddy.com Name Server: F1G1NS1.DNSPOD.NET Name Server: F1G1NS2.DNSPOD.NET Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited Status: clientRenewProhibited https://icann.org/epp#clientRenewProhibited Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited Updated Date: 21-apr-2016 Creation Date: 23-nov-2012 Expiration Date: 23-nov-2017","categories":[],"tags":[{"name":" - 原创 - Hack","slug":"原创-Hack","permalink":"http://blog.yfgeek.com/tags/原创-Hack/"}],"keywords":[]},{"title":"Emacs 命令大全","slug":"emacs-da-quan","date":"2016-07-28T18:10:07.000Z","updated":"2016-08-05T13:14:03.000Z","comments":true,"path":"2016/07/29/emacs-da-quan/","link":"","permalink":"http://blog.yfgeek.com/2016/07/29/emacs-da-quan/","excerpt":"emacs命令是由GNU组织的创始人Richard Stallman开发的一个功能强大的全屏文本编辑器，它支持多种编程语言，具有很多优良的特性。有众多的系统管理员和软件开发者使用emacs。","text":"emacs命令是由GNU组织的创始人Richard Stallman开发的一个功能强大的全屏文本编辑器，它支持多种编程语言，具有很多优良的特性。有众多的系统管理员和软件开发者使用emacs。 # 语法emacs(选项)(参数) #选项+&lt;行号&gt;：启动emacs编辑器，并将光标移动到制定行号的行； -q：启动emacs编辑器，而不加载初始化文件； -u&lt;用户&gt;：启动emacs编辑器时，加载指定用户的初始化文件； -t&lt;文件&gt;：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）； -f&lt;函数&gt;：执行指定lisp（广泛应用于人工智能领域的编程语言）函数； -l&lt;lisp代码文件&gt;：加载指定的lisp代码文件； -[batch](http://man.linuxde.net/batch \"batch命令\")：以批处理模式运行emacs编辑器。 #参数文件：指定要编辑的文本文件。 #emacs命令操作大全基本命令 C-x C-c : 退出Emacs C-x C-f : 打开一个文件，如果文件不存在，则创建一个文件 C-g : 取消未完成的命令 编辑 C-z (redefined): Undo；原来C-z是挂起Emacs（然后用[fg](http://man.linuxde.net/fg \"fg命令\")命令调出）；C-x u 是默认的命令； 移动一下光标，再C-z就可以redo M-d : 删除光标后的词语 移动光标 C-v : 向前翻页 M-v : 向后翻页 M-r : 将光标移动到屏幕中间那行 C-a : 移到行首 M-a : 移到句首，从行首到句首之间可能有空格 C-e : 移到行尾 M-e : 移到句尾 M-{ : 向上移动一段 M-} : 向下移动一段 C-right : 向前移动一个单词 C-left : 向后移动一个单词 C-up : 向前移动一段 C-down : 向后移动一段 M-&lt; : 移到整个文本开头 M-&gt; : 移到整个文本末尾 C-u 数字 命令 : 执行多次(数字表示次数)该命令；\"M-数字 命令\" 也可以 M-x goto-line : 移动到某一行 C-l : 重绘屏幕，效果就是当前编辑行移动窗口中央 Buffer 相关 C-x k : 关闭当前buffer C-x b : 切换到前一个编辑的buffer C-x C-b : 列出当前所有buffer C-x C-s : 保存当前buffer C-x s : 保存所有未保存的buffer，会提示你是否需要保存 C-x C-[w](http://man.linuxde.net/w \"w命令\") : 文件另存为 拷贝与粘贴 M-space (redefined): 设置mark; C-@ 是默认命令 C-w (redefined) : 剪切一块区域；如果没有设置mark，则是剪切一行 M-w (redefined) : 拷贝一块区域；如果没有设置mark, 则是拷贝一行 C-k : 从当前位置剪切到行尾 C-y : 粘贴 M-y : 用C-y拉回最近被除去的文本后，换成 M-y可以拉回以前被除去的文本。键入多次的M-y可以拉回更早以前被除去的文本。 C-x r k : 执行矩形区域的剪切 C-x r y : 执行矩形区域的粘贴 窗口操作 C-x 0 : 关闭当前窗口 C-x 1 : 将当前窗口最大化 C-x 2 : 垂直分割窗口 C-x 3 : 水平分割窗口 M-o (redefined) : 在窗口之间切换; C-x o 是默认命令 C-x 5 1/2/3/0 : 对frame类似的操作 C-x &lt; : 窗口内容右卷 C-x &gt; : 窗口内容左卷（这两个命令在垂直分割窗口后比较有用） (C-u) C-x ^ : 加高当前窗口，如果有C-u，则每次加高4行 (C-u) C-x } : 加宽当前窗口 (C-u) C-x { : 压窄当前窗口 ESC C-v : 在其它窗口进行卷屏操作 搜索和替换 C-s : 向前搜索（增量式搜索）；连续C-s，跳到下一个搜索到的目标 C-s RET : 普通搜索 C-r : 向前搜索 C-s RET C-w : 按单词查询 M-% : 查询替换，也就是替换前会询问一下 M-x replace-string : 普通替换 Tags M-! etags .c .h : 创建TAGS文件 M-. : 跳到tag所在位置 M-x list-tags : 列出tags 书签 C-x r m : 设置书签bookmark C-x r b : 跳到bookmark处 帮助 C-h ? : 查看帮助信息 C-h f : 查看一个函数 C-h v : 查看一个变量 C-h k : 查看一个键绑定 (C－h c 也是查看键绑定，但是信息较简略) C-h C-f : 查看一个函数的[info](http://man.linuxde.net/info \"info命令\")，非常有用 C-h i : 看Info 其它 C-M-\\ : 对选中区域，按照某种格式(比如C程序)进行格式化 C-x h : 全部选中 M-! : 执行外部shell命令 M-x shell : 模拟shell的buffer M-x term : 模拟terminal, C-c k 关闭terminal C-x C-q : 修改buffer的只读属性","categories":[],"tags":[{"name":" - 转载 - Tool","slug":"转载-Tool","permalink":"http://blog.yfgeek.com/tags/转载-Tool/"}],"keywords":[]},{"title":"Tor安全上网指南","slug":"tor","date":"2016-07-28T08:01:47.000Z","updated":"2016-08-05T13:13:45.000Z","comments":true,"path":"2016/07/28/tor/","link":"","permalink":"http://blog.yfgeek.com/2016/07/28/tor/","excerpt":"本文主要介绍了如何将一个虚拟机系统全局使用TOR技术，笔者所用操作系统为OS X EI Capitan 10.11.5，虚拟机系统为VMware Fusion专业版 8.1.1 (3771013)。","text":"本文主要介绍了如何将一个虚拟机系统全局使用TOR技术，笔者所用操作系统为OS X EI Capitan 10.11.5，虚拟机系统为VMware Fusion专业版 8.1.1 (3771013)。声明！ ==本文原创，技术无罪，笔者即将身处海外，本文撰写目的仅为防止美国棱镜计划侵犯本人隐私安全，无其它任何用途。== ==使用TOR技术请在遵守当地法律的前提下使用！本软件在中国大陆地区已被封锁，按照相关法律法规，禁止使用本软件。由于相关政策法律原因，不允许任何形式私自转载，本文只进行对TOR相关技术探讨，不涉及任何违法违规行为，请勿用于非法用途（如渗透服务器、非法扫描网段、不受监控的网络言论、不受监控的非法互联网通讯等），如出现上述等违法行为，请自负法律责任！== 准备条件 1.一个隧道(ssh,shadowsocks,socket5,http,vpn都可以)可以连接到真正的互联网，如果身处海外请无视此条。 2.最新版Vidalia 下载地址（需完整互联网） 3.Vmware Fusion/Vmware workstation/Oracle VirtualBox 4.一个完整版的虚拟机操作系统 笔者环境 操作系统：OS X EI Capitan 10.11.5 虚拟机软件：VMware Fusion专业版 8.1.1 (3771013) 虚拟机操作系统：Windows xp sp2 或 Kali linux 隧道软件：lantern 或 shadowsockets Vidalia部分如果你的网络未进行封锁，请忽略前2步，请跑步进入第3步。1.建立您的隧道网络 笔者以shadowsocks为例，开启shadowsocks配置好信息后，无需做任何操作。shadowsocks的默认对外端口为1080。 2.在Vidalia中设置代理连接 打开Vidalia-设置-网络：我使用代理服务器连接网络 地址：127.0.0.1 端口：1080（用户定义） 类型：SOCKS 5 3.继续设置，转发出外网端口 Vidalia-设置-高级-编辑当前torrc：确认socksport为9050，也可以定义为其他端口。同时添加SocksListenAddress 0.0.0.0:9050到底部保存 笔者配置文件如下，仅供参考，不可复制： 1234567891011# This file was generated by Tor; if you edit it, comments will not be preserved# The old torrc file was renamed to torrc.orig.1 or similar, and Tor will ignore itControlPort 9051DataDirectory /Users/ivan/.torDirReqStatistics 0HashedControlPassword 16:此处隐藏Socks5Proxy 127.0.0.1:1080Log notice stdoutSocksListenAddress 0.0.0.0:9050SocksPort 9050 4.Vidalia启动TOR 稍等片刻，需要建立Tor回路，五分钟后，便会提示你连接成功。随后可以通过使用Chrome的网络代理插件测试，通过ip测试可判断是否成功。如果ip地址每几分钟自动更新一次，且都是不同国家的，则说明TOR回路建立成功。 Vmware部分1.设置Vmware，添加虚拟网卡 进入Vmware的偏好设置-网络，先点小锁，把功能解锁。 然后点+，新建一个网络，警告：请勿勾选NAT。 勾选 将MAC主机连入该网络 同时设置 通过DHCP在该网络提供网络地址： 子网ip：172.16.225.0 子网掩码：255.255.255.0 2.在虚拟机系统的配置中，将网络适配器的上网方式改为vmnet2 虚拟机-设置-网络适配器-vmnet2，请再次确保无其他上网方式以保证绝对安全。 虚拟机部分(Win)1.进入操作系统 建议重新安装操作系统，以保证系统纯净性。 2.寻找宿主机ip 经过笔者的简单测试，宿主机ip为172.16.225.1如果实在找不到，可用啊D工具箱或nmap等工具进行查找。 3.确认系统当前状态下不能上网，甚至局域网也不可通，检查网络连接中的网络适配器，禁用一切，仅保留本地连接 4.安装Proxifier Proxifier是一个全局代理软件，将socket端口流量转发到系统全局，十分好用稳定，值得推荐。 5.配置Proxifer 打开Proxifier-Profile-Proxy Servers，点击Add… 随后保存并设置而为默认 6.测试网络 打开浏览器，对当前ip进行查询，ip会随着时间随机切换，不同国家。 总结为了保证用户隐私的绝对安全，建议做到以下几点： 在虚拟机系统下不要留下任何痕迹： 虚拟机操作系统系统语言设置为英语，地区为美国。 虚拟机下的浏览器建议使用friefox或chrome，安装https everywhere、noscript等插件，在浏览器相关设置中设置禁止追踪等查看隐私行为。 关机前清除系统隐私记录，养成良好习惯。 能设置不保留记录的软件均设置如此。 不要安装使用任何国产软件，尤其是任何国产音乐播放器、任何国产视频播放器，严禁使用360等任何管家、QQ、搜狗输入法、各种国产云盘，否则一定会前功尽弃。 不要使用任何私人账户登录任何网站、任何软件，如有必要，建议现场注册新号码，不要自作聪明使用尘封已久的小号。 将虚拟机操作系统放在Truecrypt等加密软件的虚拟磁盘里，如果是Windows，建议开启Bitlocker，如果是MacOS，建议开启FileVault，同时将系统密码设置为与自己隐私无关的高强度密码。 设置宿主机的BIOS密码，防止设备被盗隐私丢失，同时建议写好一键远程删除虚拟磁盘的sh脚本，以防重要文件泄露。 进入TOR网络后，您将面临更大的网络威胁，因为TOR的网域中深藏全球各地的极客、大黑客、恐怖分子等危险人物，请更加注意保护虚拟机子系统安全以及文件安全。 特别鸣谢 感谢几年前@safe121提供的无私技术帮助","categories":[],"tags":[{"name":" - 原创 - Hack","slug":"原创-Hack","permalink":"http://blog.yfgeek.com/tags/原创-Hack/"}],"keywords":[]},{"title":"Vim 命令大全","slug":"vimda-quan","date":"2016-07-28T02:16:13.000Z","updated":"2016-08-05T13:14:15.000Z","comments":true,"path":"2016/07/28/vimda-quan/","link":"","permalink":"http://blog.yfgeek.com/2016/07/28/vimda-quan/","excerpt":"","text":"##进入vi的命令 vi filename :打开或新建文件，并将光标置于第一行首 vi +n filename ：打开文件，并将光标置于第n行首 vi + filename ：打开文件，并将光标置于最后一行首 vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处 vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename vi filename….filename ：打开多个文件，依次进行编辑 移动光标类命令h ：光标左移一个字符 l ：光标右移一个字符 space：光标右移一个字符 Backspace：光标左移一个字符 k或Ctrl+p：光标上移一行 j或Ctrl+n ：光标下移一行 Enter ：光标下移一行 w或W ：光标右移一个字至字首 b或B ：光标左移一个字至字首 e或E ：光标右移一个字至字尾 ) ：光标移至句尾 ( ：光标移至句首 }：光标移至段落开头 {：光标移至段落结尾 nG：光标移至第n行首 n+：光标下移n行 n-：光标上移n行 n$：光标移至第n行尾 H ：光标移至屏幕顶行 M ：光标移至屏幕中间行 L ：光标移至屏幕最后行 0：（注意是数字零）光标移至当前行首 $：光标移至当前行尾 屏幕翻滚类命令Ctrl+u：向文件首翻半屏 Ctrl+d：向文件尾翻半屏 Ctrl+f：向文件尾翻一屏 Ctrl＋b；向文件首翻一屏 nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。 插入文本类命令i ：在光标前 I ：在当前行首 a：光标后 A：在当前行尾 o：在当前行之下新开一行 O：在当前行之上新开一行 r：替换当前字符 R：替换当前字符及其后的字符，直至按ESC键 s：从当前光标位置处开始，以输入的文本替代指定数目的字符 S：删除指定数目的行，并以所输入文本代替之 ncw或nCW：修改指定数目的字 nCC：修改指定数目的行 删除命令ndw或ndW：删除光标处开始及其后的n-1个字 do：删至行首 d$：删至行尾 ndd：删除当前行及其后n-1行 x或X：删除一个字符，x删除光标后的，而X删除光标前的 Ctrl+u：删除输入方式下所输入的文本 搜索及替换命令/pattern：从光标开始处向文件尾搜索pattern ?pattern：从光标开始处向文件首搜索pattern n：在同一方向重复上一次搜索命令 N：在反方向上重复上一次搜索命令 ：s/p1/p2/g：将当前行中所有p1均用p2替代 ：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代 ：g/p1/s//p2/g：将文件中所有p1均用p2替换 选项设置all：列出所有选项设置情况 term：设置终端类型 ignorance：在搜索中忽略大小写 list：显示制表位(Ctrl+I)和行尾标志（$) number：显示行号 report：显示由面向行的命令修改过的数目 terse：显示简短的警告信息 warn：在转到别的文件时若没保存当前文件则显示NO write信息 nomagic：允许在搜索模式中，使用前面不带“\\”的特殊字符 nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始 mesg：允许vi显示其他用户用write写到自己终端上的信息 最后行方式命令：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下 ：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下 ：n1,n2 d ：将n1行到n2行之间的内容删除 ：w ：保存当前文件 ：e filename：打开文件filename进行编辑 ：x：保存当前文件并退出 ：q：退出vi ：q!：不保存文件并退出vi ：!command：执行shell命令command ：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入 ：r!command：将命令command的输出结果放到当前行 寄存器操作“?nyy：将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字 “?nyw：将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字 “?nyl：将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字 “?p：取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字 ndd：将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。","categories":[],"tags":[{"name":" - 转载 - Tool","slug":"转载-Tool","permalink":"http://blog.yfgeek.com/tags/转载-Tool/"}],"keywords":[]},{"title":"iTerm2 美化全过程","slug":"iterm2-mei-hua-quan-guo-cheng","date":"2016-07-28T01:49:20.000Z","updated":"2016-08-05T13:14:29.000Z","comments":true,"path":"2016/07/28/iterm2-mei-hua-quan-guo-cheng/","link":"","permalink":"http://blog.yfgeek.com/2016/07/28/iterm2-mei-hua-quan-guo-cheng/","excerpt":"本文介绍了iTerm2的美化过程，包括安装oh my zsh，powerline，以及对vim的美化。","text":"本文介绍了iTerm2的美化过程，包括安装oh my zsh，powerline，以及对vim的美化。 1.首先下载 iTerm 22.打开iTerm 23.输入下面指令安装oh-my-zshcurl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 4.接下来安装Powerline在官网有教程，我们只需要执行官网第一条安装指令就行如果你的终端能够正常执行pip指令，那么直接执行下面的指令可以完成安装 pip install powerline-status 如果没有，则先执行安装pip指令 sudo easy_install pip 5.下载、安装库字体库1）将工程下载下来后cd到install.sh文件所在目录2）执行指令安装字体库 执行./install.sh指令安装所有Powerline字体 安装完成后提示所有字体均已下载到/Users/superdanny/Library/Fonts路径下All Powerline fonts installed to /Users/superdanny/Library/Fonts 6. 设置iTerm 2的Regular Font 和 Non-ASCII Font安装完字体库之后，把iTerm 2的设置里的Profile中的Text 选项卡中里的Regular Font和Non-ASCII Font的字体都设置成 Powerline的字体，我这里设置的字体是12pt Meslo LG S DZ Regular for Powerline 7. 配色方案1）安装配色方案进入刚刚下载的工程的solarized/iterm2-colors-solarized 下双击 Solarized Dark.itermcolors 和 Solarized Light.itermcolors 两个文件就可以把配置文件导入到 iTerm2 里 2）配置配色方案通过load presets选择刚刚安装的配色主题即可 8. 使用agnoster主题1）下载agnoster主题到下载的工程里面运行install文件,主题将安装到~/.oh-my-zsh/themes目录下 2）设置该主题进入~/.zshrc打开.zshrc文件，然后将ZSH_THEME后面的字段改为agnoster。ZSH_THEME=&quot;agnoster&quot;（agnoster即为要设置的主题） 9. 增加指令高亮效果——zsh-syntax-highlighting指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮 1）cd到.zshrc所在目录 2）执行指令将工程克隆到当前目录 git clone git://github.com/zsh-users/zsh-syntax-highlighting.git 3）打开.zshrc文件，在最后添加下面内容 source XXX/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 保存文件。 注意：xxx代表.zshrc所在目录 4）cd ~/.oh-my-zsh/custom/plugins 5）再次打开.zshrc文件，在最后面添加下面内容plugins=(zsh-syntax-highlighting)保存文件。 启动iTerm 2 默认使用dash改用zsh解决方法：chsh -s /bin/zsh Vim$ cd solarized $ cd vim-colors-solarized/colors $ mkdir -p ~/.vim/colors $ cp solarized.vim ~/.vim/colors/$ vi ~/.vimrc syntax enable set background=dark colorscheme solarized lsMac OS X 是基于 FreeBSD 的，所以一些工具 ls, top 等都是 BSD 那一套，ls 不是 GNU ls，所以即使 Terminal/iTerm2 配置了颜色，但是在 Mac 上敲入 ls 命令也不会显示高亮，可以通过安装 coreutils 来解决（brew install coreutils），不过如果对 ls 颜色不挑剔的话有个简单办法就是在 .bash_profile 里输出 CLICOLOR=1： $ vi ~/.bash_profile export CLICOLOR=1","categories":[],"tags":[{"name":" - 转载 - Tool","slug":"转载-Tool","permalink":"http://blog.yfgeek.com/tags/转载-Tool/"}],"keywords":[]}]}