<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ivan&#39;s Blog</title>
  <subtitle>Web前端 &amp; 极客 &amp; 渗透</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yfgeek.com/"/>
  <updated>2017-11-30T14:41:00.775Z</updated>
  <id>http://www.yfgeek.com/</id>
  
  <author>
    <name>Ivan</name>
    <email>yifanb@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速撸出一个Brianfuck语言解释器</title>
    <link href="http://www.yfgeek.com/2017/11/30/%E5%BF%AB%E9%80%9F%E6%92%B8%E5%87%BA%E4%B8%80%E4%B8%AABrianfuck%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>http://www.yfgeek.com/2017/11/30/快速撸出一个Brianfuck语言解释器/</id>
    <published>2017-11-30T14:27:24.000Z</published>
    <updated>2017-11-30T14:41:00.775Z</updated>
    
    <content type="html"><![CDATA[<p>一直都知道一个很有趣的语言，Brainfuck，只是一直尚未研究，今天晚上看了一下，竟然不是那么难，而且还撸出来了一个解释器。这是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。</p>
<p>就象它的名字所暗示的，brainfuck程序很难读懂。尽管如此，brainfuck图灵机一样可以完成任何计算任务。虽然brainfuck的计算方式如此与众不同，但它确实能够正确运行。</p>
<p>这种语言基于一个简单的机器模型，除了指令，这个机器还包括：一个以字节为单位、被初始化为零的数组、一个指向该数组的指针（初始时指向数组的第一个字节）、以及用于输入输出的两个字节流。</p>
<p>下面是这八种状态的描述，其中每个状态由一个字符标识：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&gt;</code></td>
<td>指针加一</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>指针减一</td>
</tr>
<tr>
<td><code>+</code></td>
<td>指针指向的字节的值加一</td>
</tr>
<tr>
<td><code>-</code></td>
<td>指针指向的字节的值减一</td>
</tr>
<tr>
<td><code>.</code></td>
<td>输出指针指向的单元内容（ASCII码）</td>
</tr>
<tr>
<td><code>,</code></td>
<td>输入内容到指针指向的单元（ASCII码）</td>
</tr>
<tr>
<td><code>[</code></td>
<td>如果指针指向的单元值为零，向后跳转到对应的<code>]</code>指令的次一指令处</td>
</tr>
<tr>
<td><code>]</code></td>
<td>如果指针指向的单元值不为零，向前跳转到对应的<code>[</code>指令的次一指令处</td>
</tr>
</tbody>
</table>
<p>举个例子，hello world</p>
<script src="https://gist.github.com/kidk/44b8cd699c5879f1084f.js"></script>

<p>自己看下原理并不难，于是自己撸了一个解释器，话不多说直接上代码，用es6写的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Brainfuck Interpreter</div><div class="line"> * author: yfgeek</div><div class="line"> * https://github.com/yfgeek</div><div class="line"> */</div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interpreter</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(code,input) &#123;</div><div class="line">        <span class="keyword">this</span>.code = code.trim().replace(<span class="regexp">/ /g</span>, <span class="string">""</span>).replace(<span class="regexp">/(\r\n|\n|\r)/gm</span>,<span class="string">""</span>).split(<span class="string">""</span>);</div><div class="line">        <span class="keyword">this</span>.input = input || [];</div><div class="line">        <span class="keyword">this</span>.pointer = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.codePointer = <span class="number">0</span> ;</div><div class="line">        <span class="keyword">this</span>.dataset = [];</div><div class="line">        <span class="keyword">this</span>.bracketStack = [];</div><div class="line">        <span class="keyword">this</span>.output = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation(str)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span>(str)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:  &#123;</div><div class="line">                <span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer] = <span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer] || <span class="number">0</span>;</div><div class="line">                ++<span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span>  <span class="string">'-'</span>:  &#123;</div><div class="line">                <span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer] = <span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer] || <span class="number">0</span>;</div><div class="line">                --<span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span>  <span class="string">'&lt;'</span>:&#123;</div><div class="line">                <span class="keyword">this</span>.pointer = --<span class="keyword">this</span>.pointer&lt;<span class="number">0</span> ? <span class="number">0</span>: <span class="keyword">this</span>.pointer;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>: &#123;</div><div class="line">                <span class="keyword">this</span>.pointer++;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">'.'</span>:&#123;</div><div class="line">                <span class="keyword">this</span>.output.push(<span class="built_in">String</span>.fromCharCode(<span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer]));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">','</span>:&#123;</div><div class="line">                <span class="keyword">let</span> c = <span class="keyword">this</span>.input.shift();</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> c === <span class="string">"string"</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer] = c.charCodeAt(<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">'['</span>: &#123;</div><div class="line">                <span class="keyword">this</span>.leftBracket();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">']'</span>: &#123;</div><div class="line">                <span class="keyword">this</span>.rightBracket();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    leftBracket()&#123;</div><div class="line">        <span class="keyword">let</span> openBrackets = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dataset[<span class="keyword">this</span>.pointer]) &#123;</div><div class="line">            <span class="keyword">this</span>.bracketStack.push(<span class="keyword">this</span>.codePointer);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">while</span> (openBrackets &amp;&amp; <span class="keyword">this</span>.code[++<span class="keyword">this</span>.codePointer]) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.code[<span class="keyword">this</span>.codePointer] === <span class="string">']'</span>) &#123;</div><div class="line">                    openBrackets--;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.code[<span class="keyword">this</span>.codePointer] === <span class="string">'['</span>) &#123;</div><div class="line">                    openBrackets++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    rightBracket()&#123;</div><div class="line">        <span class="keyword">this</span>.codePointer =  <span class="keyword">this</span>.bracketStack.pop() - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    run()&#123;</div><div class="line">        <span class="keyword">let</span> list = [<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'.'</span>,<span class="string">','</span>,<span class="string">'['</span>,<span class="string">']'</span>];</div><div class="line">        <span class="keyword">do</span>&#123;</div><div class="line">           <span class="keyword">let</span> c = <span class="keyword">this</span>.code[<span class="keyword">this</span>.codePointer];</div><div class="line">           <span class="keyword">if</span>(list.indexOf(c) &gt;= <span class="number">0</span>)  <span class="keyword">this</span>.operation(c);</div><div class="line">        &#125;<span class="keyword">while</span>(++<span class="keyword">this</span>.codePointer &lt; <span class="keyword">this</span>.code.length);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.output;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    toString()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.run().join(<span class="string">''</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> code = <span class="string">'++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.'</span>;</div><div class="line"><span class="keyword">let</span> i = <span class="keyword">new</span> Interpreter(code,[]);</div><div class="line"><span class="built_in">console</span>.log(i.toString());</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直都知道一个很有趣的语言，Brainfuck，只是一直尚未研究，今天晚上看了一下，竟然不是那么难，而且还撸出来了一个解释器。这是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。&lt;/p&gt;
&lt;p&gt;就象它的名字所暗示的，brainfuck程序很难读懂。
    
    </summary>
    
      <category term="Brainfuck React-Native" scheme="http://www.yfgeek.com/categories/Brainfuck-React-Native/"/>
    
    
      <category term="Brainfuck" scheme="http://www.yfgeek.com/tags/Brainfuck/"/>
    
  </entry>
  
  <entry>
    <title>React Native 封装彩色自定义图标库</title>
    <link href="http://www.yfgeek.com/2017/11/21/react-native-icon-2/"/>
    <id>http://www.yfgeek.com/2017/11/21/react-native-icon-2/</id>
    <published>2017-11-21T05:35:05.000Z</published>
    <updated>2017-11-24T12:34:36.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>本文接上篇<a href="http://blog.yfgeek.com/2017/11/19/react-native-icon/" target="_blank" rel="external">React Native 添加自定义图标库</a>，上篇介绍的很基础，但是有没有发现一个问题，通过这种<code>react-native-vector-icons</code>方式封装下来的图标，都只有黑白图标，颜色需要自己<strong>手动设置</strong>，但是对于我这种彩色绚丽的图标，手动设置？不存在的…</p>
<p><img src="/content/images/react-icon/1.png" alt=""></p>
<p>那么本文就在上文的基础上讲讲，我是如何办到的自动彩色图标。</p>
<p>答题思路是创建一个色彩配置文件，等到加载的时候，按照标签去加载。</p>
<p>我Google了一圈，都找不到怎么让他自动加载色彩，可能是我搜索的姿势不对吧。</p>
<p><img src="/content/images/react-icon/2-0.png" alt=""></p>
<h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><p>首先，我们在<code>IcoMoon</code>先上传并下载一份黑色底色的图标文件，再上传并下载一份彩色底色图标文件。</p>
<p>我们提取出黑色底色图标文件中的<code>icomoon.ttf</code>替换掉Xcode中的文件。</p>
<p>与此同时，找到下载的彩色压缩包中找到<code>selection.json</code>这个神奇的文件，如果你上传的是彩色图标，实际上，里面内置了所有图标的色彩。</p>
<p>短暂的例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"IcoMoonType"</span>: <span class="string">"selection"</span>,</div><div class="line">  <span class="string">"icons"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"icon"</span>: &#123;</div><div class="line">        <span class="string">"paths"</span>: [</div><div class="line">          <span class="string">"M1024 512c0 282.77-229.23 512-512 512s-512-229.23-512-512c0-282.77 229.23-512 512-512s512 229.23 512 512z"</span>,</div><div class="line">          <span class="string">"M495.864 864c-8.635-0.904-17.283-1.694-25.902-2.735-46.907-5.658-90.865-20.248-131.905-43.628-0.617-0.351-1.173-0.807-2.359-1.631 70.607-52.759 140.878-105.267 211.541-158.068 7.173 6.99 14.228 13.852 21.267 20.732 11.824 11.554 23.75 23.006 35.372 34.761 2.857 2.888 4.938 2.843 8.321 1.13 35.662-18.047 64.813-43.452 87.298-76.484 1.076-1.581 2.141-3.168 3.409-5.046 1.007 1.154 1.922 2.078 2.695 3.109 24.557 32.675 49.065 65.386 73.707 97.999 2.131 2.82 1.861 4.498-0.394 7.058-57.072 64.811-127.961 104.761-213.416 118.423-10.764 1.721-21.699 2.371-32.551 3.556-1.443 0.158-2.861 0.543-4.29 0.823h-32.795zM526.886 160c5.987 0.602 11.972 1.234 17.963 1.801 50.406 4.768 97.579 19.719 141.532 44.82 0.618 0.352 1.171 0.814 2.239 1.567-71.758 51.465-143.179 102.689-215 154.198-2.819-2.673-5.592-5.243-8.299-7.879-15.124-14.723-30.288-29.405-45.288-44.253-2.404-2.379-4.231-2.644-7.231-1.144-36.318 18.15-65.87 43.969-88.618 77.568-0.824 1.217-1.649 2.433-3.243 4.784-26.391-35.161-52.444-69.873-78.959-105.2 7.959-8.447 15.318-16.848 23.29-24.622 51.948-50.658 113.581-82.88 185.050-95.845 13.759-2.496 27.819-3.324 41.737-4.951 1.575-0.184 3.129-0.559 4.692-0.845h30.136zM206.697 337.1c53.619 70.288 106.656 139.809 159.841 209.528-10.847 11.122-21.55 22.105-32.261 33.079-8.040 8.239-16.003 16.557-24.194 24.644-2.32 2.291-2.398 4.063-0.994 6.878 18.102 36.324 43.942 65.848 77.544 88.614 1.099 0.745 2.21 1.473 3.287 2.248 0.204 0.146 0.275 0.477 0.859 1.567-34.561 25.915-69.228 51.909-104.355 78.248-62.384-53.699-102.894-119.92-119.15-200.203-17.409-85.972-3.298-167.187 39.424-244.603zM660.291 476.931c9.953-10.34 19.655-20.426 29.366-30.502 8.192-8.501 16.277-17.112 24.668-25.413 2.611-2.584 2.571-4.525 1.042-7.607-18.248-36.766-44.326-66.643-78.406-89.551-1.189-0.8-2.338-1.656-4.339-3.078 35.118-26.354 69.777-52.362 104.912-78.728 59.438 50.901 98.889 113.583 117.002 189.265 22.608 94.462 2.47 187.911-36.701 253.699-52.442-69.266-104.8-138.42-157.545-208.086z"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"attrs"</span>: [</div><div class="line">          &#123;</div><div class="line">            <span class="string">"fill"</span>: <span class="string">"rgb(48, 44, 44)"</span></div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            <span class="string">"fill"</span>: <span class="string">"rgb(255, 255, 255)"</span></div><div class="line">          &#125;</div><div class="line">        ],</div><div class="line">        <span class="string">"isMulticolor"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"isMulticolor2"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"grid"</span>: <span class="number">0</span>,</div><div class="line">        <span class="string">"tags"</span>: [</div><div class="line">          <span class="string">"x"</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      <span class="string">"attrs"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="string">"fill"</span>: <span class="string">"rgb(48, 44, 44)"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="string">"fill"</span>: <span class="string">"rgb(255, 255, 255)"</span></div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      <span class="string">"properties"</span>: &#123;</div><div class="line">        <span class="string">"order"</span>: <span class="number">3</span>,</div><div class="line">        <span class="string">"id"</span>: <span class="number">66</span>,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"x"</span>,</div><div class="line">        <span class="string">"prevSize"</span>: <span class="number">32</span>,</div><div class="line">        <span class="string">"code"</span>: <span class="number">59648</span>,</div><div class="line">        <span class="string">"codes"</span>: [</div><div class="line">          <span class="number">59648</span>,</div><div class="line">          <span class="number">59649</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      <span class="string">"setIdx"</span>: <span class="number">0</span>,</div><div class="line">      <span class="string">"setId"</span>: <span class="number">2</span>,</div><div class="line">      <span class="string">"iconIdx"</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;...&#125;,</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们分析一下这个文件，不难看出，icons下包含一个数组，每个数组代表每一个图标，每一个数组下都包含属性<code>tags[0]</code>,<code>attrs[0].fill</code>分别代表对应的标签及色彩。</p>
<p>这个时候，我们需要构建一个自己的色彩配置文件，把刚刚的有用的信息提取出来，具体的按照自己需求，定义标签名字和颜色。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">'./selection.json'</span>);</div><div class="line"><span class="keyword">let</span> arr = [];</div><div class="line">data.icons.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</div><div class="line">	arr.push(</div><div class="line">	&#123;</div><div class="line">		<span class="string">'cuy'</span> : item.icon.tags[<span class="number">0</span>],</div><div class="line">		<span class="string">'color'</span> :item.icon.attrs[<span class="number">0</span>].fill,</div><div class="line">	&#125;)</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
<p>把输出的信息复制到新的文件，并将其命名<code>config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ColorConfig = [</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'x'</span>, <span class="attr">color</span>: <span class="string">'rgb(48, 44, 44)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'ada'</span>, <span class="attr">color</span>: <span class="string">'rgb(60, 200, 200)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'amp'</span>, <span class="attr">color</span>: <span class="string">'rgb(45, 174, 228)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'ant'</span>, <span class="attr">color</span>: <span class="string">'rgb(44, 211, 225)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'ardr'</span>, <span class="attr">color</span>: <span class="string">'rgb(60, 135, 199)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'ark'</span>, <span class="attr">color</span>: <span class="string">'rgb(247, 0, 0)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'bat'</span>, <span class="attr">color</span>: <span class="string">'rgb(255, 80, 0)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'bcc'</span>, <span class="attr">color</span>: <span class="string">'rgb(247, 147, 28)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'bch'</span>, <span class="attr">color</span>: <span class="string">'rgb(247, 147, 26)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'bcn'</span>, <span class="attr">color</span>: <span class="string">'rgb(240, 64, 134)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'bnb'</span>, <span class="attr">color</span>: <span class="string">'rgb(243, 186, 47)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'btc'</span>, <span class="attr">color</span>: <span class="string">'rgb(247, 147, 26)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'btcd'</span>, <span class="attr">color</span>: <span class="string">'rgb(255, 102, 0)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'bts'</span>, <span class="attr">color</span>: <span class="string">'rgb(53, 186, 235)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'dash'</span>, <span class="attr">color</span>: <span class="string">'rgb(28, 117, 188)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'dcr'</span>, <span class="attr">color</span>: <span class="string">'rgb(46, 214, 161)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'dgb'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 106, 210)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'dgd'</span>, <span class="attr">color</span>: <span class="string">'rgb(244, 208, 41)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'doge'</span>, <span class="attr">color</span>: <span class="string">'rgb(195, 166, 52)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'emc'</span>, <span class="attr">color</span>: <span class="string">'rgb(180, 159, 252)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'eos'</span>, <span class="attr">color</span>: <span class="string">'rgb(180, 159, 252)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'etc'</span>, <span class="attr">color</span>: <span class="string">'rgb(102, 144, 115)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'eth'</span>, <span class="attr">color</span>: <span class="string">'rgb(98, 126, 234)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'fct'</span>, <span class="attr">color</span>: <span class="string">'rgb(65, 123, 164)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'game'</span>, <span class="attr">color</span>: <span class="string">'rgb(152, 192, 31)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'gbyte'</span>, <span class="attr">color</span>: <span class="string">'rgb(48, 44, 44)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'gno'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 166, 196)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'gnt'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 29, 87)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'hsr'</span>, <span class="attr">color</span>: <span class="string">'rgb(86, 66, 142)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'icn'</span>, <span class="attr">color</span>: <span class="string">'rgb(76, 111, 140)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'kmd'</span>, <span class="attr">color</span>: <span class="string">'rgb(50, 100, 100)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'knc'</span>, <span class="attr">color</span>: <span class="string">'rgb(24, 140, 146)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'lkk'</span>, <span class="attr">color</span>: <span class="string">'rgb(157, 1, 235)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'lsk'</span>, <span class="attr">color</span>: <span class="string">'rgb(2, 136, 209)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'ltc'</span>, <span class="attr">color</span>: <span class="string">'rgb(203, 198, 198)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'maid'</span>, <span class="attr">color</span>: <span class="string">'rgb(85, 146, 215)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'miota'</span>, <span class="attr">color</span>: <span class="string">'rgb(36, 36, 36)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'mln'</span>, <span class="attr">color</span>: <span class="string">'rgb(11, 21, 41)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'mona'</span>, <span class="attr">color</span>: <span class="string">'rgb(240, 219, 176)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'neo'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 0, 0)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'nlg'</span>, <span class="attr">color</span>: <span class="string">'rgb(42, 176, 253)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'nmc'</span>, <span class="attr">color</span>: <span class="string">'rgb(24, 108, 157)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'nxt'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 143, 187)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'omg'</span>, <span class="attr">color</span>: <span class="string">'rgb(26, 83, 240)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'pay'</span>, <span class="attr">color</span>: <span class="string">'rgb(48, 44, 44)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'pivx'</span>, <span class="attr">color</span>: <span class="string">'rgb(94, 71, 120)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'pot'</span>, <span class="attr">color</span>: <span class="string">'rgb(16, 91, 47)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'ppc'</span>, <span class="attr">color</span>: <span class="string">'rgb(60, 176, 84)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'ppt'</span>, <span class="attr">color</span>: <span class="string">'rgb(21, 39, 67)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'qtum'</span>, <span class="attr">color</span>: <span class="string">'rgb(46, 154, 208)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'rep'</span>, <span class="attr">color</span>: <span class="string">'rgb(96, 42, 82)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'salt'</span>, <span class="attr">color</span>: <span class="string">'rgb(27, 238, 244)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'sc'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 203, 160)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'sngls'</span>, <span class="attr">color</span>: <span class="string">'rgb(179, 13, 35)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'steem'</span>, <span class="attr">color</span>: <span class="string">'rgb(75, 162, 242)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'strat'</span>, <span class="attr">color</span>: <span class="string">'rgb(19, 135, 201)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'trx'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 0, 0)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'usdt'</span>, <span class="attr">color</span>: <span class="string">'rgb(38, 161, 123)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'vtc'</span>, <span class="attr">color</span>: <span class="string">'rgb(53, 99, 62)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'waves'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 150, 220)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'xcp'</span>, <span class="attr">color</span>: <span class="string">'rgb(237, 22, 80)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'xem'</span>, <span class="attr">color</span>: <span class="string">'rgb(103, 178, 232)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'xlm'</span>, <span class="attr">color</span>: <span class="string">'rgb(20, 182, 231)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'xmr'</span>, <span class="attr">color</span>: <span class="string">'rgb(255, 102, 0)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'xrp'</span>, <span class="attr">color</span>: <span class="string">'rgb(0, 170, 228)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'xtz'</span>, <span class="attr">color</span>: <span class="string">'rgb(166, 224, 0)'</span> &#125;,</div><div class="line">    &#123; <span class="attr">cuy</span>: <span class="string">'zec'</span>, <span class="attr">color</span>: <span class="string">'rgb(236, 178, 68)'</span> &#125;</div><div class="line">    ];</div></pre></td></tr></table></figure>
<p>这样，色彩配置文件封装好了。</p>
<h1 id="加载色彩"><a href="#加载色彩" class="headerlink" title="加载色彩"></a>加载色彩</h1><p>按照上文所做，我们封装出自己的图标库，当调用到图标组建的时候，我们这么加载它：</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123;ColorConfig&#125; from '../icon/config';</div><div class="line">render()&#123;</div><div class="line">let color = '#f5922f';</div><div class="line">ColorConfig.forEach((item,index)=&gt;&#123;if(item.cuy === cuy)  color = item.color&#125;);</div><div class="line">  return &lt;Icon name=&#123;cuy&#125; size=&#123;48&#125; color=&#123;color&#125;/&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="补全镂空"><a href="#补全镂空" class="headerlink" title="补全镂空"></a>补全镂空</h1><p>理论上现在就结束了，但是我发现了这样做的一个问题，如图所示</p>
<p><img src="/content/images/react-icon/2-1.png" alt=""></p>
<p>其实解决这个问题相当简单，只需要多加一层View，并将其底色设置为白色，切角设置为50%的圆（web端思路）</p>
<p>但是，在实际运用的时候，发现<code>borderRadius</code>无法设置为<code>50%</code>，其实也不难，代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import &#123;ColorConfig&#125; from '../icon/config';</div><div class="line">render()&#123;</div><div class="line">let color = '#f5922f';</div><div class="line">let w = this.props.width || 48;</div><div class="line">ColorConfig.forEach((item,index)=&gt;&#123;if(item.cuy === cuy)  color = item.color&#125;);</div><div class="line">  return (</div><div class="line">                &lt;View style=&#123;&#123;</div><div class="line">                    alignItems:'center',</div><div class="line">                    justifyContent:'center',</div><div class="line">                    borderRadius: w/2,</div><div class="line">                    overflow: 'hidden',</div><div class="line">                    backgroundColor : '#ffffff',</div><div class="line">                &#125;&#125;&gt;</div><div class="line">                   &lt;Icon name=&#123;cuy&#125; size=&#123;w&#125; color=&#123;color&#125;/&gt;;</div><div class="line">                &lt;/View&gt;</div><div class="line">        )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看看效果，完美！</p>
<p><img src="/content/images/react-icon/2-2.png" alt=""></p>
<p><img src="/content/images/react-icon/2-3.png" alt=""></p>
<h1 id="效率问题"><a href="#效率问题" class="headerlink" title="效率问题"></a>效率问题</h1><p>这样手动封装的库，实际上会引发一些效率问题，比如在加载众多组建的时候，每一个组件都会重新读取一边色彩配置文件，并将其放入内存，实际上意义不大，浪费时间。</p>
<p>实际上，我们可以把色彩配置文件和<code>selection.json</code>一并放在<code>store</code>中，或者放在最顶层的组件的<code>state</code>中，或者存成hashmap形式，内存只需要加载一次配置文件就够了。</p>
<p>Anyway，这种方法有待优化，但是对于图标数量比较小的APP来说，优化的意义不大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;本文接上篇&lt;a href=&quot;http://blog.yfgeek.com/2017/11/19/react-native-i
    
    </summary>
    
      <category term="React-Native" scheme="http://www.yfgeek.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.yfgeek.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 添加自定义图标库</title>
    <link href="http://www.yfgeek.com/2017/11/20/react-native-icon/"/>
    <id>http://www.yfgeek.com/2017/11/20/react-native-icon/</id>
    <published>2017-11-20T08:47:37.000Z</published>
    <updated>2017-11-21T05:36:47.488Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发一个React Native小程序，遇到了很多问题，好在都解决了，近期将逐步增加一些解决问题式文章，方便各位网友学习，如有不对，请多指教！</p>
<p>本文讲述用<code>react-native-vector-icons</code>库，封装一个自己的图标库，也就是说添加自定义图标库，下面讲讲如何添加。</p>
<p>通俗易懂，而且本文只讲一种方式，方便各位网友学习，我讲的方式就是最简单的<code>createIconSetFromIcoMoon</code>方法。</p>
<p>第一步，准备好你的素材，最好是<code>svg</code>格式</p>
<p>第二步，进入网址：<a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a></p>
<p>点击Import Icons按钮，将图标<strong>批量</strong>导入，如图下所示：</p>
<p><img src="/content/images/react-icon/1.png" alt=""></p>
<p>第三步，点击Generate Font按钮。</p>
<p>第四步，点击Download按钮。</p>
<p>这时候，你会下载到如图所示结构的zip文件，将其解压，拷贝到项目根目录。</p>
<p><img src="/content/images/react-icon/2.png" alt=""></p>
<p>第五步，在Xcode中添加压缩包里的<code>icomoon.ttf</code>文件。</p>
<p>用Xcode打开工程文件，将<code>icomoon.ttf</code>文件复制一份，并拖动到Resources目录中，如图所示</p>
<p><img src="/content/images/react-icon/3.png" alt=""></p>
<p>第六步，点开<code>Info.plist</code>，在<code>Fonts provided by application</code>属性中添加这个字体的名称<code>icomoon.ttf</code>的键值。</p>
<p><img src="/content/images/react-icon/4.png" alt=""></p>
<p>第七步，在项目配置中的Build Phases中的Copy Bundle Resources 中添加该字体。</p>
<p><img src="/content/images/react-icon/8.png" alt=""></p>
<p>第七步，在项目根目录下，运行终端命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install react-native-vector-icons --save</div><div class="line">react-native link</div></pre></td></tr></table></figure>
<p><img src="/content/images/react-icon/5.png" alt=""></p>
<p>第八步，配置安卓：</p>
<p>编辑 <code>android/app/build.gradle</code> ，添加如下内容，可以说非常简单</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">project.ext.vectoricons = [</div><div class="line">    iconFontNames: [ <span class="string">'icomoon.ttf'</span>] </div><div class="line">]</div><div class="line">apply <span class="keyword">from</span>: <span class="string">"../../node_modules/react-native-vector-icons/fonts.gradle"</span></div></pre></td></tr></table></figure>
<p>第八步，在代码中写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;createIconSetFromIcoMoon &#125; <span class="keyword">from</span> <span class="string">'react-native-vector-icons'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> icoMoonConfig <span class="keyword">from</span> <span class="string">'../icon/selection.json'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Icon = createIconSetFromIcoMoon(icoMoonConfig);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Iconfontello;</div></pre></td></tr></table></figure>
<p>第九步，作为组件调用</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Icon name=<span class="string">"btc"</span> size=&#123;<span class="number">32</span>&#125; /&gt;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在开发一个React Native小程序，遇到了很多问题，好在都解决了，近期将逐步增加一些解决问题式文章，方便各位网友学习，如有不对，请多指教！&lt;/p&gt;
&lt;p&gt;本文讲述用&lt;code&gt;react-native-vector-icons&lt;/code&gt;库，封装一个自己的图标库
    
    </summary>
    
      <category term="React-Native" scheme="http://www.yfgeek.com/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="http://www.yfgeek.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>轻松几步让Redux实现数据持久化</title>
    <link href="http://www.yfgeek.com/2017/11/19/react-persist/"/>
    <id>http://www.yfgeek.com/2017/11/19/react-persist/</id>
    <published>2017-11-19T15:02:32.000Z</published>
    <updated>2017-11-21T05:36:48.216Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的过程中，数据用redux管理，觉得希望将数据持久化保存，也就是说当用户下一次打开app或网站的时候，我们希望浏览器/APP自动加载出上次的数据，怎么办？有没有一个🙆‍♂统一的方式？</p>
<p>有的，这就是简单易用的<code>redux-persist</code>，事情比想象的简单太多了。</p>
<p>话不多说，上代码！官方示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; PersistGate &#125; <span class="keyword">from</span> <span class="string">'redux-persist/es/integration/react'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/configureStore'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; persistor, store &#125; = configureStore()</div><div class="line"></div><div class="line"><span class="keyword">const</span> onBeforeLift = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// take some action before the gate lifts</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">PersistGate</span> </span></div><div class="line">      <span class="attr">loading</span>=<span class="string">&#123;</span>&lt;<span class="attr">Loading</span> /&gt;&#125;</div><div class="line">      onBeforeLift=&#123;onBeforeLift&#125;</div><div class="line">      persistor=&#123;persistor&#125;&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PersistGate</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>首先你的结构应该是拥有<code>reducers</code>的，在我的代码中，我还加入了<code>redux-thunk</code>中间件，如果你不懂，可以忽略这个。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;		</div><div class="line"> <span class="keyword">import</span> &#123;AppRegistry&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;		</div><div class="line"> <span class="keyword">import</span> &#123; createStore ,applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"> <span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>		</div><div class="line"> <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./src/App"</span>;		</div><div class="line"> <span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./src/reducers/reducers'</span>	</div><div class="line"> <span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;		</div><div class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CoinOnline</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;		</div><div class="line">   render() &#123;</div><div class="line">     <span class="keyword">const</span> store = createStore(App,applyMiddleware(thunk));	</div><div class="line">     <span class="keyword">return</span> (</div><div class="line">       <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>		</div><div class="line">       );</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line">AppRegistry.registerComponent(<span class="string">'CoinOnline'</span>, () =&gt; CoinOnline);</div></pre></td></tr></table></figure>
<p>我是怎么应用的？</p>
<p>第一步，引入我们需要的方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;persistStore, persistCombineReducers&#125; <span class="keyword">from</span> <span class="string">'redux-persist'</span>;</div><div class="line"><span class="keyword">import</span> &#123; PersistGate &#125; <span class="keyword">from</span> <span class="string">'redux-persist/es/integration/react'</span>;</div></pre></td></tr></table></figure>
<p>第二步，重新封装reducer，用<code>persistCombineReducers()</code>方法加载配置和reducer</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">'root'</span>,</div><div class="line">    storage,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> reducer = persistCombineReducers(config, reducers);</div></pre></td></tr></table></figure>
<p>第三步，在redux的<code>&lt;Provider&gt;&lt;/Provider&gt;</code>内层嵌套<code>&lt;PersistGate&gt;&lt;/PersistGate&gt;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">PersistGate</span> <span class="attr">persistor</span>=<span class="string">&#123;persistor&#125;</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">PersistGate</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/Provider&gt;</span></div></pre></td></tr></table></figure>
<p>轻松三步，简单吧！话不多说直接上代码</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    AppRegistry,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore ,applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./src/App"</span>;</div><div class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./src/reducers/reducers'</span></div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</div><div class="line"><span class="keyword">import</span> &#123;persistStore, persistCombineReducers&#125; <span class="keyword">from</span> <span class="string">'redux-persist'</span>;</div><div class="line"><span class="keyword">import</span> &#123; PersistGate &#125; <span class="keyword">from</span> <span class="string">'redux-persist/es/integration/react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">'redux-persist/es/storage'</span> <span class="comment">// default: localStorage if web, AsyncStorage if react-native</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">'root'</span>,</div><div class="line">    storage,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> reducer = persistCombineReducers(config, reducers);</div><div class="line">    <span class="keyword">let</span> store = createStore(reducer, applyMiddleware(thunk));</div><div class="line">    <span class="keyword">let</span> persistor = persistStore(store);</div><div class="line">    <span class="keyword">return</span> &#123; persistor, store &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CoinOnline</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; persistor, store &#125; = configureStore();</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">PersistGate</span> <span class="attr">persistor</span>=<span class="string">&#123;persistor&#125;</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">PersistGate</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line"></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent(<span class="string">'CoinOnline'</span>, () =&gt; CoinOnline);</div></pre></td></tr></table></figure>
<p>多说一句，如果<code>createStore</code>有需要加载多个参数，需要用<code>compose</code>将其拼装起来。</p>
<p>比如在测试时我还使用了<code>remote-redux-devtools</code>调试神器，代码如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> store = createStore(reducer, compose(applyMiddleware(thunk),devToolsEnhancer(&#123; <span class="attr">realtime</span>: <span class="literal">true</span>, <span class="attr">port</span>: <span class="number">8000</span> &#125;)));</div></pre></td></tr></table></figure>
<p>下次，每次启动之前<code>redux-persit</code>都会默认先<code>dispatch</code>两个动作</p>
<p>PERSIT和REHYDRATE，会把上一次的redux中的states注入到当前组件中，即完成了持久化。</p>
<p><img src="/content/images/redux-persist/1.png" alt=""></p>
<p><img src="/content/images/redux-persist/2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发的过程中，数据用redux管理，觉得希望将数据持久化保存，也就是说当用户下一次打开app或网站的时候，我们希望浏览器/APP自动加载出上次的数据，怎么办？有没有一个🙆‍♂统一的方式？&lt;/p&gt;
&lt;p&gt;有的，这就是简单易用的&lt;code&gt;redux-persist&lt;/co
    
    </summary>
    
      <category term="Redux  React Redux" scheme="http://www.yfgeek.com/categories/Redux-React-Redux/"/>
    
    
      <category term="React-Native" scheme="http://www.yfgeek.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>“我是如何收集校友的”之利用基于HMM-Viterbi的HanLP进行人名提取</title>
    <link href="http://www.yfgeek.com/2017/11/15/uob3/"/>
    <id>http://www.yfgeek.com/2017/11/15/uob3/</id>
    <published>2017-11-15T10:16:54.000Z</published>
    <updated>2017-11-16T06:11:39.189Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个小APP，一直没有来的及更新这个系列的文章，是为抱歉。按照上文讲到，我们已经将数据重复的内容用pandas库去掉了，接下来将干一件难度很大的事情，那就是对人名进行提取。</p>
<p><img src="/content/images/uob/4.png" alt=""></p>
<p>我们当前进度：3</p>
<ol>
<li>爬虫程序——抓取全百度百科与“伯明翰大学”相关的数据</li>
<li>数据去重——用pandas去掉抓取相同的URL或相同的名称</li>
<li>提取人名——利用HMM-Viterbi进行人名筛选与提取</li>
<li>下载器——下载所有数据库中数据清洗过的URL，并存入数据库</li>
<li>人物Ranking——按照一定的排名方式，对人物进行知名度排名</li>
<li>人物梗概——利用NLP相关库，对提取的人物进行自动化梗概</li>
</ol>
<p>关于人名提取，说白了，就是每一个字段（标题）就是一句话，我们对这句话进行语法词性分析，提出其主语部分，其实质是一个NLP的应用问题。</p>
<p>关于HMM-Viterbi算法，这里有一篇论文介绍。下面本文引用一篇讲的很好很透彻的文章节选(引用自<a href="http://www.cnblogs.com/skyme/p/4651331.html" target="_blank" rel="external">一文搞懂HMM（隐马尔可夫模型）</a>)，里面的文字讲的很清晰很透彻了。本来想自己总结一下，但是感觉有些班门弄斧，索性直接引用。</p>
<h1 id="HMM（隐马尔可夫模型）"><a href="#HMM（隐马尔可夫模型）" class="headerlink" title="HMM（隐马尔可夫模型）"></a>HMM（<strong>隐马尔可夫模型</strong>）</h1><p><strong>隐马尔可夫模型</strong>（Hidden Markov Model，HMM）是统计模型，它用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数。然后利用这些参数来作进一步的分析，例如模式识别。</p>
<p>是在被建模的系统被认为是一个马尔可夫过程与未观测到的（隐藏的）的状态的统计马尔可夫模型。</p>
<p>下面用一个简单的例子来阐述：</p>
<p>假设我手里有三个不同的骰子。第一个骰子是我们平常见的骰子（称这个骰子为D6），6个面，每个面（1，2，3，4，5，6）出现的概率是1/6。第二个骰子是个四面体（称这个骰子为D4），每个面（1，2，3，4）出现的概率是1/4。第三个骰子有八个面（称这个骰子为D8），每个面（1，2，3，4，5，6，7，8）出现的概率是1/8。</p>
<p><img src="/content/images/uob/hmm-0.png" alt=""></p>
<p>假设我们开始掷骰子，我们先从三个骰子里挑一个，挑到每一个骰子的概率都是1/3。然后我们掷骰子，得到一个数字，1，2，3，4，5，6，7，8中的一个。不停的重复上述过程，我们会得到一串数字，每个数字都是1，2，3，4，5，6，7，8中的一个。例如我们可能得到这么一串数字（掷骰子10次）：1 6 3 5 2 7 3 5 2 4</p>
<p>这串数字叫做可见状态链。但是在隐马尔可夫模型中，我们不仅仅有这么一串可见状态链，还有一串隐含状态链。在这个例子里，这串隐含状态链就是你用的骰子的序列。比如，隐含状态链有可能是：D6 D8 D8 D6 D4 D8 D6 D6 D4 D8</p>
<p>一般来说，HMM中说到的马尔可夫链其实是指隐含状态链，因为隐含状态（骰子）之间存在转换概率（transition probability）。在我们这个例子里，D6的下一个状态是D4，D6，D8的概率都是1/3。D4，D8的下一个状态是D4，D6，D8的转换概率也都一样是1/3。这样设定是为了最开始容易说清楚，但是我们其实是可以随意设定转换概率的。比如，我们可以这样定义，D6后面不能接D4，D6后面是D6的概率是0.9，是D8的概率是0.1。这样就是一个新的HMM。</p>
<p>同样的，尽管可见状态之间没有转换概率，但是隐含状态和可见状态之间有一个概率叫做输出概率（emission probability）。就我们的例子来说，六面骰（D6）产生1的输出概率是1/6。产生2，3，4，5，6的概率也都是1/6。我们同样可以对输出概率进行其他定义。比如，我有一个被赌场动过手脚的六面骰子，掷出来是1的概率更大，是1/2，掷出来是2，3，4，5，6的概率是1/10。</p>
<p><img src="/content/images/uob/hmm-1.png" alt=""></p>
<p><img src="/content/images/uob/hmm-2.png" alt=""></p>
<p>其实对于HMM来说，如果提前知道所有隐含状态之间的转换概率和所有隐含状态到所有可见状态之间的输出概率，做模拟是相当容易的。但是应用HMM模型时候呢，往往是缺失了一部分信息的，有时候你知道骰子有几种，每种骰子是什么，但是不知道掷出来的骰子序列；有时候你只是看到了很多次掷骰子的结果，剩下的什么都不知道。如果应用算法去估计这些缺失的信息，就成了一个很重要的问题。这些算法我会在下面详细讲。</p>
<p>××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××<br>​      如果你只想看一个简单易懂的例子，就不需要往下看了。<br>​ ××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××<br>​    说两句废话，答主认为呢，要了解一个算法，要做到以下两点：会其意，知其形。答主回答的，其实主要是第一点。但是这一点呢，恰恰是最重要，而且很多书上不会讲的。正如你在追一个姑娘，姑娘对你说“你什么都没做错！”你要是只看姑娘的表达形式呢，认为自己什么都没做错，显然就理解错了。你要理会姑娘的意思，“你赶紧给我道歉！”这样当你看到对应的表达形式呢，赶紧认错，跪地求饶就对了。数学也是一样，你要是不理解意思，光看公式，往往一头雾水。不过呢，数学的表达顶多也就是晦涩了点，姑娘的表达呢，有的时候就完全和本意相反。所以答主一直认为理解姑娘比理解数学难多了。</p>
<p>回到正题，和HMM模型相关的算法主要分为三类，分别解决三种问题：<br><strong>      1）知道骰子有几种（隐含状态数量），每种骰子是什么（转换概率），根据掷骰子掷出的结果（可见状态链），我想知道每次掷出来的都是哪种骰子（隐含状态链）。</strong><br>​      这个问题呢，在语音识别领域呢，叫做解码问题。这个问题其实有两种解法，会给出两个不同的答案。每个答案都对，只不过这些答案的意义不一样。第一种解法求最大似然状态路径，说通俗点呢，就是我求一串骰子序列，这串骰子序列产生观测结果的概率最大。第二种解法呢，就不是求一组骰子序列了，而是求每次掷出的骰子分别是某种骰子的概率。比如说我看到结果后，我可以求得第一次掷骰子是D4的概率是0.5，D6的概率是0.3，D8的概率是0.2.第一种解法我会在下面说到，但是第二种解法我就不写在这里了，如果大家有兴趣，我们另开一个问题继续写吧。</p>
<p><strong>2）还是知道骰子有几种**</strong>（隐含状态数量）<strong><strong>，每种骰子是什么</strong></strong>（转换概率）<strong><strong>，根据掷骰子掷出的结果</strong></strong>（可见状态链）<strong>**，我想知道掷出这个结果的概率。</strong><br>​      看似这个问题意义不大，因为你掷出来的结果很多时候都对应了一个比较大的概率。问这个问题的目的呢，其实是检测观察到的结果和已知的模型是否吻合。如果很多次结果都对应了比较小的概率，那么就说明我们已知的模型很有可能是错的，有人偷偷把我们的骰子給换了。</p>
<p><strong>3）知道骰子有几种**</strong>（隐含状态数量）<strong><strong>，不知道每种骰子是什么</strong></strong>（转换概率）<strong><strong>，观测到很多次掷骰子的结果</strong></strong>（可见状态链）<strong><strong>，我想反推出每种骰子是什么</strong></strong>（转换概率）<strong>**。</strong><br>​      这个问题很重要，因为这是最常见的情况。很多时候我们只有可见结果，不知道HMM模型里的参数，我们需要从可见结果估计出这些参数，这是建模的一个必要步骤。</p>
<p>问题阐述完了，下面就开始说解法。（0号问题在上面没有提，只是作为解决上述问题的一个辅助）<br>​      0.一个简单问题<br>其实这个问题实用价值不高。由于对下面较难的问题有帮助，所以先在这里提一下。<br>知道骰子有几种，每种骰子是什么，每次掷的都是什么骰子，根据掷骰子掷出的结果，求产生这个结果的概率。</p>
<p><img src="/content/images/uob/hmm-3.png" alt=""></p>
<p>解法无非就是概率相乘：<br><img src="http://zhihu.com/equation?tex=P%3DP%28D6%29%2AP%28D6%5Crightarrow+1%29%2AP%28D6%5Crightarrow+D8%29%2AP%28D8%5Crightarrow+6%29%2AP%28D8%5Crightarrow+D8%29%2AP%28D8%5Crightarrow+3%29" alt="img"><br><img src="http://zhihu.com/equation?tex=%3D%5Cfrac%7B1%7D%7B3%7D+%2A%5Cfrac%7B1%7D%7B6%7D+%2A%5Cfrac%7B1%7D%7B3%7D+%2A%5Cfrac%7B1%7D%7B8%7D+%2A%5Cfrac%7B1%7D%7B3%7D+%2A%5Cfrac%7B1%7D%7B8%7D+" alt="img"><br><strong>1.看见不可见的，破解骰子序列</strong><br>​      这里我说的是第一种解法，解最大似然路径问题。<br>​      举例来说，我知道我有三个骰子，六面骰，四面骰，八面骰。我也知道我掷了十次的结果（1 6 3 5 2 7 3 5 2 4），我不知道每次用了那种骰子，我想知道最有可能的骰子序列。</p>
<p>其实最简单而暴力的方法就是穷举所有可能的骰子序列，然后依照第零个问题的解法把每个序列对应的概率算出来。然后我们从里面把对应最大概率的序列挑出来就行了。如果马尔可夫链不长，当然可行。如果长的话，穷举的数量太大，就很难完成了。<br>​      另外一种很有名的算法叫做Viterbi algorithm. 要理解这个算法，我们先看几个简单的列子。<br>​      首先，如果我们只掷一次骰子：</p>
<p><img src="/content/images/uob/hmm-4.png" alt=""></p>
<p>看到结果为1.对应的最大概率骰子序列就是D4，因为D4产生1的概率是1/4，高于1/6和1/8.<br>​      把这个情况拓展，我们掷两次骰子：</p>
<p><img src="/content/images/uob/hmm-5.png" alt=""></p>
<p>结果为1，6.这时问题变得复杂起来，我们要计算三个值，分别是第二个骰子是D6，D4，D8的最大概率。显然，要取到最大概率，第一个骰子必须为D4。这时，第二个骰子取到D6的最大概率是<br><img src="http://zhihu.com/equation?tex=P2%28D6%29%3DP%28D4%29%2AP%28D4%5Crightarrow+1%29%2AP%28D4%5Crightarrow+D6%29%2AP%28D6%5Crightarrow+6%29" alt="img"><br><img src="http://zhihu.com/equation?tex=%3D%5Cfrac%7B1%7D%7B3%7D+%2A%5Cfrac%7B1%7D%7B4%7D+%2A%5Cfrac%7B1%7D%7B3%7D+%2A%5Cfrac%7B1%7D%7B6%7D" alt="img"><br>​      同样的，我们可以计算第二个骰子是D4或D8时的最大概率。我们发现，第二个骰子取到D6的概率最大。而使这个概率最大时，第一个骰子为D4。所以最大概率骰子序列就是D4 D6。<br>继续拓展，我们掷三次骰子：</p>
<p><img src="/content/images/uob/hmm-6.png" alt=""></p>
<p>同样，我们计算第三个骰子分别是D6，D4，D8的最大概率。我们再次发现，要取到最大概率，第二个骰子必须为D6。这时，第三个骰子取到D4的最大概率是<img src="http://zhihu.com/equation?tex=P3%28D4%29%3DP2%28D6%29%2AP%28D6%5Crightarrow+D4%29%2AP%28D4%5Crightarrow+3%29" alt="img"><br><img src="http://zhihu.com/equation?tex=%3D%5Cfrac%7B1%7D%7B216%7D+%2A%5Cfrac%7B1%7D%7B3%7D+%2A%5Cfrac%7B1%7D%7B4%7D" alt="img"><br>​      同上，我们可以计算第三个骰子是D6或D8时的最大概率。我们发现，第三个骰子取到D4的概率最大。而使这个概率最大时，第二个骰子为D6，第一个骰子为D4。所以最大概率骰子序列就是D4 D6 D4。</p>
<p>写到这里，大家应该看出点规律了。既然掷骰子一二三次可以算，掷多少次都可以以此类推。我们发现，我们要求最大概率骰子序列时要做这么几件事情。首先，不管序列多长，要从序列长度为1算起，算序列长度为1时取到每个骰子的最大概率。然后，逐渐增加长度，每增加一次长度，重新算一遍在这个长度下最后一个位置取到每个骰子的最大概率。因为上一个长度下的取到每个骰子的最大概率都算过了，重新计算的话其实不难。当我们算到最后一位时，就知道最后一位是哪个骰子的概率最大了。然后，我们要把对应这个最大概率的序列从后往前推出来。<br><strong>2.谁动了我的骰子？</strong><br>​      比如说你怀疑自己的六面骰被赌场动过手脚了，有可能被换成另一种六面骰，这种六面骰掷出来是1的概率更大，是1/2，掷出来是2，3，4，5，6的概率是1/10。你怎么办么？答案很简单，算一算正常的三个骰子掷出一段序列的概率，再算一算不正常的六面骰和另外两个正常骰子掷出这段序列的概率。如果前者比后者小，你就要小心了。<br>​      比如说掷骰子的结果是： </p>
<p><img src="/content/images/uob/hmm-7.png" alt=""></p>
<p>要算用正常的三个骰子掷出这个结果的概率，其实就是将所有可能情况的概率进行加和计算。同样，简单而暴力的方法就是把穷举所有的骰子序列，还是计算每个骰子序列对应的概率，但是这回，我们不挑最大值了，而是把所有算出来的概率相加，得到的总概率就是我们要求的结果。这个方法依然不能应用于太长的骰子序列（马尔可夫链）。<br>​      我们会应用一个和前一个问题类似的解法，只不过前一个问题关心的是概率最大值，这个问题关心的是概率之和。解决这个问题的算法叫做前向算法（forward algorithm）。<br>首先，如果我们只掷一次骰子：</p>
<p><img src="/content/images/uob/hmm-9.png" alt=""></p>
<p>看到结果为1.产生这个结果的总概率可以按照如下计算，总概率为0.18：</p>
<p><img src="/content/images/uob/hmm-10.png" alt=""></p>
<p>把这个情况拓展，我们掷两次骰子：</p>
<p><img src="/content/images/uob/hmm-11.png" alt=""></p>
<p>看到结果为1，6.产生这个结果的总概率可以按照如下计算，总概率为0.05：</p>
<p><img src="/content/images/uob/hmm-12.png" alt=""></p>
<p>继续拓展，我们掷三次骰子：</p>
<p><img src="/content/images/uob/hmm-13.png" alt=""></p>
<p>看到结果为1，6，3.产生这个结果的总概率可以按照如下计算，总概率为0.03：</p>
<p><img src="/content/images/uob/hmm-14.png" alt=""></p>
<p>同样的，我们一步一步的算，有多长算多长，再长的马尔可夫链总能算出来的。用同样的方法，也可以算出不正常的六面骰和另外两个正常骰子掷出这段序列的概率，然后我们比较一下这两个概率大小，就能知道你的骰子是不是被人换了。</p>
<h1 id="Viterbi-algorithm"><a href="#Viterbi-algorithm" class="headerlink" title="Viterbi algorithm"></a>Viterbi algorithm</h1><p>HMM（隐马尔可夫模型）是用来描述隐含未知参数的统计模型，举一个经典的例子：一个东京的朋友每天根据天气{下雨，天晴}决定当天的活动{公园散步,购物,清理房间}中的一种，我每天只能在twitter上看到她发的推“啊，我前天公园散步、昨天购物、今天清理房间了！”，那么我可以根据她发的推特推断东京这三天的天气。在这个例子里，显状态是活动，隐状态是天气。</p>
<p>任何一个HMM都可以通过下列五元组来描述：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:param obs:观测序列</div><div class="line">:param states:隐状态</div><div class="line">:param start_p:初始概率（隐状态）</div><div class="line">:param trans_p:转移概率（隐状态）</div><div class="line">:param emit_p: 发射概率 （隐状态表现为显状态的概率）</div></pre></td></tr></table></figure>
<p>[<img src="/content/images/uob/hmm-15.jpg" alt=""></p>
<p>伪码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">states = (&apos;Rainy&apos;, &apos;Sunny&apos;)</div><div class="line"> </div><div class="line">observations = (&apos;walk&apos;, &apos;shop&apos;, &apos;clean&apos;)</div><div class="line"> </div><div class="line">start_probability = &#123;&apos;Rainy&apos;: 0.6, &apos;Sunny&apos;: 0.4&#125;</div><div class="line"> </div><div class="line">transition_probability = &#123;</div><div class="line">    &apos;Rainy&apos; : &#123;&apos;Rainy&apos;: 0.7, &apos;Sunny&apos;: 0.3&#125;,</div><div class="line">    &apos;Sunny&apos; : &#123;&apos;Rainy&apos;: 0.4, &apos;Sunny&apos;: 0.6&#125;,</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">emission_probability = &#123;</div><div class="line">    &apos;Rainy&apos; : &#123;&apos;walk&apos;: 0.1, &apos;shop&apos;: 0.4, &apos;clean&apos;: 0.5&#125;,</div><div class="line">    &apos;Sunny&apos; : &#123;&apos;walk&apos;: 0.6, &apos;shop&apos;: 0.3, &apos;clean&apos;: 0.1&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求解最可能的天气"><a href="#求解最可能的天气" class="headerlink" title="求解最可能的天气"></a>求解最可能的天气</h4><p>求解最可能的隐状态序列是HMM的三个典型问题之一，通常用维特比算法解决。维特比算法就是求解HMM上的最短路径（-log(prob)，也即是最大概率）的算法。</p>
<p>稍微用中文讲讲思路，很明显，第一天天晴还是下雨可以算出来：</p>
<ol>
<li>定义V[时间][今天天气] = 概率，注意今天天气指的是，前几天的天气都确定下来了（概率最大）今天天气是X的概率，这里的概率就是一个累乘的概率了。</li>
<li>​    因为第一天我的朋友去散步了，所以第一天下雨的概率V[第一天][下雨] = 初始概率[下雨] <em> 发射概率[下雨][散步] = 0.6 </em> 0.1 = 0.06，同理可得V[第一天][天晴] = 0.24 。从直觉上来看，因为第一天朋友出门了，她一般喜欢在天晴的时候散步，所以第一天天晴的概率比较大，数字与直觉统一了。</li>
<li>从第二天开始，对于每种天气Y，都有前一天天气是X的概率 <em> X转移到Y的概率 </em> Y天气下朋友进行这天这种活动的概率。因为前一天天气X有两种可能，所以Y的概率有两个，选取其中较大一个作为V[第二天][天气Y]的概率，同时将今天的天气加入到结果序列中</li>
<li>比较V[最后一天][下雨]和[最后一天][天晴]的概率，找出较大的哪一个对应的序列，就是最终结果。</li>
</ol>
<p>算法的代码可以在github上看到，地址为：</p>
<p><a href="https://github.com/hankcs/Viterbi" target="_blank" rel="external">https://github.com/hankcs/Viterbi</a></p>
<p>运行完成后根据Viterbi得到结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sunny Rainy Rainy</div></pre></td></tr></table></figure>
<p>Viterbi被广泛应用到分词，词性标注等应用场景。</p>
<p><strong>以上内容均为引用。</strong></p>
<h1 id="HanLP-原理"><a href="#HanLP-原理" class="headerlink" title="HanLP 原理"></a>HanLP 原理</h1><p>上面引用铺垫了那么多，为了解释清楚HanLP是用什么算法对中国名字进行分词的。具体的，HanLP实现了论文<a href="http://nlp.ict.ac.cn/Admin/kindeditor/attached/file/20130508/20130508094537_92322.pdf" target="_blank" rel="external">《基于角色标注的中国人名自动识别研究》</a>。</p>
<p>如果有兴趣，可以快速理解此文，看这些段落：</p>
<p><img src="/content/images/uob/6.png" alt=""></p>
<p>如果你掌握贝叶斯公式，并且看了上述文章，了解马尔科夫假设并不难理解。</p>
<h1 id="HanLP应用"><a href="#HanLP应用" class="headerlink" title="HanLP应用"></a>HanLP应用</h1><p>HanLP是一个优秀的NLP库，可是是用Java写的，这里我们需要用<code>jpype</code>包帮助pyhton调用Jar包。</p>
<p>神奇吧？Python还能调用Jar包</p>
<h2 id="Python调用Jar包"><a href="#Python调用Jar包" class="headerlink" title="Python调用Jar包"></a>Python调用Jar包</h2><p>第一步 下载HanLP</p>
<p>去官方指定网址的release中下载jar包和相应的data.zip</p>
<p>解压zip，放置于python的根目录</p>
<p><a href="https://github.com/hankcs/HanLP" target="_blank" rel="external">https://github.com/hankcs/HanLP</a></p>
<p>第二步 在启动的时候启动Java虚拟机</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">startJVM(getDefaultJVMPath(),</div><div class="line">                 <span class="string">"-Djava.class.path=/Users/ivan/d/uobspider/hanlp-1.3.5.jar:/Users/ivan/d/uobspider/"</span>,</div><div class="line">                 <span class="string">"-Xms1g"</span>, <span class="string">"-Xmx1g"</span>)  <span class="comment"># 启动JVM，Linux需替换分号;为冒号:</span></div></pre></td></tr></table></figure>
<p>第三步 创建Jar包对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JDClass = JClass(<span class="string">"com.hankcs.hanlp.seg.CRF.CRFSegment"</span>)</div></pre></td></tr></table></figure>
<p>第四步 创建分词对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jd = JDClass().enableNameRecognize(<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>第四步 提取相关词性部分</p>
<p>根据HanLP的官方给出的<a href="http://www.hankcs.com/nlp/part-of-speech-tagging.html" target="_blank" rel="external">词性标注</a>，可以断定 /nr 为人名标准，我们只需要在python代码中国呢判断是否包含 /nr 属性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="string">"nr"</span> <span class="keyword">in</span> str(i.nature):</div></pre></td></tr></table></figure>
<p>这就是所谓的抛砖引玉</p>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>具体代码仍然写在了filter代码中，会创建一个新表<code>filter_second</code>，并将过滤后的数据复制存于此中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># python version：2.7</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"></div><div class="line"><span class="keyword">from</span> jpype <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">from</span> pybloomfilter <span class="keyword">import</span> BloomFilter</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">""</span>, <span class="string">"uob"</span>, use_unicode=<span class="keyword">True</span>, charset=<span class="string">"utf8"</span>)</div><div class="line">        self.engine = create_engine(<span class="string">'mysql+pymysql://root:@localhost:3306/uob?charset=utf8'</span>)</div><div class="line"></div><div class="line">        self.cursor = self.db.cursor()</div><div class="line">        self.bfilter = BloomFilter(<span class="number">1000</span>, <span class="number">0.001</span>, <span class="string">'uob.bloom'</span>)</div><div class="line">        startJVM(getDefaultJVMPath(),</div><div class="line">                 <span class="string">"-Djava.class.path=/Users/ivan/d/uobspider/hanlp-1.3.5.jar:/Users/ivan/d/uobspider/"</span>,</div><div class="line">                 <span class="string">"-Xms1g"</span>, <span class="string">"-Xmx1g"</span>)  <span class="comment"># 启动JVM，Linux需替换分号;为冒号:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distinct</span><span class="params">(self)</span>:</span></div><div class="line">        sql = <span class="string">"SELECT * FROM list;"</span></div><div class="line">        allData = pd.read_sql(sql, con=self.engine)  <span class="comment"># 从抓取过来的数据库读入</span></div><div class="line">        allData.drop_duplicates(<span class="string">'name'</span>, <span class="string">'first'</span>, inplace=<span class="keyword">True</span>)  <span class="comment"># 去除重复name</span></div><div class="line">        allData.drop_duplicates(<span class="string">'url'</span>, <span class="string">'first'</span>, inplace=<span class="keyword">True</span>)  <span class="comment"># 去除重复url</span></div><div class="line">        allData.reset_index(drop=<span class="keyword">True</span>, inplace=<span class="keyword">True</span>)  <span class="comment"># index重新计数</span></div><div class="line">        <span class="keyword">print</span> allData.detail()</div><div class="line">        allData.to_sql(<span class="string">'first_filter'</span>, self.engine, if_exists=<span class="string">'replace'</span>, index=<span class="keyword">True</span>, index_label=<span class="string">'fid'</span>)  <span class="comment"># 输出到新的数据库表</span></div><div class="line">        <span class="keyword">return</span> allData</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertData</span><span class="params">(self, id, name, url)</span>:</span></div><div class="line">        insertsql = <span class="string">"INSERT INTO filter_second (list_id,name,url) VALUES("</span> + str(id) + <span class="string">",\""</span> + str(</div><div class="line">            name) + <span class="string">"\",\""</span> + str(url) + <span class="string">"\");"</span></div><div class="line">        <span class="keyword">print</span> insertsql</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.cursor.execute(insertsql)</div><div class="line">            self.db.commit()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            self.db.rollback()</div><div class="line">            <span class="keyword">print</span> <span class="string">"error"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filterHMM</span><span class="params">(self)</span>:</span></div><div class="line">        sql = <span class="string">"SELECT id,name,url FROM list;"</span></div><div class="line">        self.cursor.execute(sql)</div><div class="line">        allData = self.cursor.fetchall()</div><div class="line">        JDClass = JClass(<span class="string">"com.hankcs.hanlp.seg.CRF.CRFSegment"</span>)</div><div class="line">        jd = JDClass().enableNameRecognize(<span class="keyword">True</span>)</div><div class="line">        names = []</div><div class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> allData:</div><div class="line">            s = data[<span class="number">1</span>]</div><div class="line">            words = jd.seg(jpype.JString(s))</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> words:</div><div class="line">                <span class="keyword">if</span> <span class="string">"nr"</span> <span class="keyword">in</span> str(i.nature):</div><div class="line">                    tmp = str(i.word)</div><div class="line">                    <span class="keyword">if</span> len(tmp) &gt; <span class="number">1</span>:</div><div class="line">                        self.insertData(data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])</div><div class="line">                        <span class="keyword">break</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    obj_filter = Filter()</div><div class="line">    obj_filter.distinct()</div><div class="line">    obj_filter.filterHMM()</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>其实效果并非非常理想，还是有很多无用信息和漏下来的信息，但是总体上还是不错的。</p>
<p><img src="/content/images/uob/5.png" alt=""></p>
<p>下章预告：“我是如何收集校友的”之百度百科批量下载器</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个小APP，一直没有来的及更新这个系列的文章，是为抱歉。按照上文讲到，我们已经将数据重复的内容用pandas库去掉了，接下来将干一件难度很大的事情，那就是对人名进行提取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/uob/4.png&quot; al
    
    </summary>
    
      <category term="Python" scheme="http://www.yfgeek.com/categories/Python/"/>
    
    
      <category term="数据" scheme="http://www.yfgeek.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>实战树莓派安装Windows XP</title>
    <link href="http://www.yfgeek.com/2017/10/29/rasp-xp/"/>
    <id>http://www.yfgeek.com/2017/10/29/rasp-xp/</id>
    <published>2017-10-29T07:36:24.000Z</published>
    <updated>2017-10-29T09:53:28.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>记得小时候，家里的电脑一直安装着Windows 98，天天骂windows难用，虽然没有别的最新的操作系统可以用，也看不出来Windows 98的设计风格有多么古朴，只是bug奇多，动不动就崩溃，系统级别的崩溃，蓝屏，甚至直接坏掉再也无法开机。</p>
<p>直到有一天，偶然的机会，姐姐家里新买来的电脑，过去一看，大不一样，蓝色的界面，巨好看的任务栏、窗体样式，却不知道什么系统，感觉像是windows 却觉得清晰稳定了许多。</p>
<p>后来，我逐渐的了解到，这个系统的名字叫Windows XP，那是2002年，漂亮的界面，清脆优雅的提示音，可爱的图标，让我永远无法忘怀。</p>
<p>回家后，求人把家里的电脑装成Windows XP，却被告知电脑内存只有256MB，硬盘只有30GB，cpu只有800MHZ的配置装的话可能会很卡。无奈之下，我也只好选择接受现实。</p>
<p>有时候，人越没有却得不到的东西，往往是美好的。一见钟情的Windows XP甚至到做梦都会梦到，能梦到Windows meida player、Windows XP之类的把玩，虽然梦里的情节似乎有些不对，但是那种兴奋的感觉，至今无法忘怀。</p>
<p>朝思暮想，什么时候能够玩一玩这个系统，那个时候互联网并不发达，并非是没有网络，只是网络搜不到你想搜的东西，也不是任何一个东西都能在网络上下载到，你说：用迅雷呗？不不不，那个时候没有迅雷，只有——网络蚂蚁。</p>
<p>用Windows 98是痛苦的，经常崩溃甚至需要重新安装系统，我有没有想过过渡产品，比如Windows 2000，对的，有的，其中的过程中我装过几次，但是Windows 2000给我的感觉不是很理想。</p>
<p>2003年，直到有一天，忍无可忍的我，去盗版盘零售店，花了10块钱买了一张Windows XP SP2的安装光盘，我的幸福人生从此开始——</p>
<p>时至今日，我仍然十分喜欢Windows XP，尽管已经过去14年之久，人很难忘记短暂的美好的东西。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下面回归正文，本文写写如何用树莓派 3（Raspberry Pi 3）安装Windows XP。</p>
<p>其实这是一个伪命题，arm架构怎么能够安装Windows XP呢？充其量应该算是模拟，没错，答题思路就是在系统上安装虚拟机，用arm虚拟机模拟x86架构安装Windows XP。</p>
<p>其实方法很简单，进入终端，首先：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p>确认无误后，我们开始安装qemu和kvm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install qemu-kvm qemu virt-manager virt-viewer libvirt-bin</div></pre></td></tr></table></figure>
<p>网速快的话，应该很快就装完了，这时候一定要重启电脑，否则会提示 <code>libvirt</code>未启动：</p>
<p><img src="/content/images/rasp-xp/1.jpg" alt=""></p>
<p>重启后，<a href="http://www.mediafire.com/?ynv5hvh7pmt" target="_blank" rel="external">下载精简版XP MicroXP</a> 密码：warez-bb，当然你愿意安装完整版，也不是不可以。只要下载好并且把iso文件复制到系统里即可。</p>
<p>接下来的事情很简单，创建虚拟机：</p>
<p>应用程序-系统工具-虚拟系统管理器</p>
<p>随后：文件-新建虚拟机</p>
<p>弹出来的对话框里，配置系统架构为x86_64，内存为256mb，所占空间按照自己比例分配，建议1.5GB-2GB。</p>
<p>然后开始启动就可以安装了，安装过程大概需要3-4个小时。</p>
<h1 id="图鉴"><a href="#图鉴" class="headerlink" title="图鉴"></a>图鉴</h1><p>以下是一些图鉴，敬请欣赏。</p>
<p><img src="/content/images/rasp-xp/2.jpg" alt=""></p>
<p><img src="/content/images/rasp-xp/3.jpg" alt=""></p>
<p><img src="/content/images/rasp-xp/4.jpg" alt=""></p>
<p><img src="/content/images/rasp-xp/5.jpg" alt=""></p>
<p><img src="/content/images/rasp-xp/6.jpg" alt=""></p>
<p><img src="/content/images/rasp-xp/7.jpg" alt=""></p>
<p><img src="/content/images/rasp-xp/8.png" alt=""></p>
<p><img src="/content/images/rasp-xp/9.png" alt=""></p>
<p><img src="/content/images/rasp-xp/10.png" alt=""></p>
<p><img src="/content/images/rasp-xp/11.png" alt=""></p>
<p>本文谨纪念美好的童年时代。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;记得小时候，家里的电脑一直安装着Windows 98，天天骂windows难用，虽然没有别的最新的操作系统可以用，也看不出来Windows 98的设
    
    </summary>
    
      <category term="Raspberry" scheme="http://www.yfgeek.com/categories/Raspberry/"/>
    
    
      <category term="Raspberry" scheme="http://www.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>“我是如何收集校友的”之数据去重</title>
    <link href="http://www.yfgeek.com/2017/10/27/uob2/"/>
    <id>http://www.yfgeek.com/2017/10/27/uob2/</id>
    <published>2017-10-27T15:35:52.000Z</published>
    <updated>2017-10-28T15:17:04.836Z</updated>
    
    <content type="html"><![CDATA[<p>按照上文讲到，我们已经抓取到了所有与“伯明翰大学”相关的数据，我们接下来要做的就是做数据清洗工作。</p>
<p><img src="/content/images/uob/2.png" alt=""></p>
<p>我们当前进度：2</p>
<ol>
<li>爬虫程序——抓取全百度百科与“伯明翰大学”相关的数据</li>
<li>数据去重——用pandas去掉抓取相同的URL或相同的名称</li>
<li>提取人名——利用HMM-Viterbi进行人名筛选与提取</li>
<li>下载器——下载所有数据库中数据清洗过的URL，并存入数据库</li>
<li>人物Ranking——按照一定的排名方式，对人物进行知名度排名</li>
<li>人物梗概——利用NLP相关库，对提取的人物进行自动化梗概</li>
</ol>
<p>为什么要进行去重？还不是因为爬虫爬下来的结果有大量的重复的信息，在后期的人名筛选甚至下载来说，我们提前先搞定这个重复的问题，节省工作量。有人提出可以在人名过滤后再去重，我想未尝不是一个好点子，但是HMM-Viterbi算法的复杂度高，这样可能降低后期的效率，提前去重未尝不可。</p>
<p>如图下所示，有很多重复切无用的信息。</p>
<p><img src="/content/images/uob/3.png" alt=""></p>
<p>关于去重，很多人第一时间想到了布隆过滤器，但是试问，在仅有不到1000的数据量的数据需要用到吗？本文用pandas自带的去重函数<code>drop_duplictad()</code>去重。如果想了解布隆过滤器，我自己也练手写了一个<a href="https://gist.github.com/yfgeek/2f07921322d4d65fbe05bef0eb897fb9" target="_blank" rel="external">简单的范例</a>。</p>
<p>首先，将SQL数据库中所有数据作为DataFrame输入到pandas，</p>
<p>然后，对相同名字的内容进行去重，</p>
<p>然后，对相同URL的内容进行去重，</p>
<p>随后，重新建立索引，</p>
<p>最后，将内容输出到新的数据表<code>first_filter</code>上，完成今天的工作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># python version：2.7</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> jpype <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.engine = create_engine(<span class="string">'mysql+pymysql://root:@localhost:3306/uob?charset=utf8'</span>)</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distinct</span><span class="params">(self)</span>:</span></div><div class="line">        sql = <span class="string">"SELECT * FROM list;"</span></div><div class="line">        allData = pd.read_sql(sql, con=self.engine)  <span class="comment"># 从抓取过来的数据库读入</span></div><div class="line">        allData.drop_duplicates(<span class="string">'name'</span>, <span class="string">'first'</span>, inplace=<span class="keyword">True</span>)  <span class="comment"># 去除重复name</span></div><div class="line">        allData.drop_duplicates(<span class="string">'url'</span>, <span class="string">'first'</span>, inplace=<span class="keyword">True</span>) <span class="comment"># 去除重复url</span></div><div class="line">        allData.reset_index(drop=<span class="keyword">True</span>, inplace=<span class="keyword">True</span>) <span class="comment"># index重新计数</span></div><div class="line">        <span class="keyword">print</span> allData.tail()</div><div class="line">        allData.to_sql(<span class="string">'first_filter'</span>, self.engine, if_exists=<span class="string">'replace'</span>, index=<span class="keyword">True</span>, index_label=<span class="string">'fid'</span>)  <span class="comment"># 输出到新的数据库表first_filter</span></div><div class="line">        <span class="keyword">return</span> allData</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    obj_filter = Filter()</div><div class="line">    obj_filter.distinct()</div></pre></td></tr></table></figure>
<p>跑完后我们到数据库中看看</p>
<p><img src="/content/images/uob/4.png" alt=""></p>
<p>不错，数据量已经下降到了708个，去重工作完成，其实在这期间遇到了很多坑，很多问题，不一一阐述，均为python环境问题。</p>
<p>下集预告：“我是如何收集校友的”之利用基于HMM-Viterbi的HanLP进行人名提取</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照上文讲到，我们已经抓取到了所有与“伯明翰大学”相关的数据，我们接下来要做的就是做数据清洗工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/uob/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们当前进度：2&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;爬虫程序——
    
    </summary>
    
      <category term="Python" scheme="http://www.yfgeek.com/categories/Python/"/>
    
    
      <category term="数据" scheme="http://www.yfgeek.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>“我是如何收集校友的”之爬虫模块</title>
    <link href="http://www.yfgeek.com/2017/10/26/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E6%94%B6%E9%9B%86%E6%A0%A1%E5%8F%8B%E7%9A%84%E4%B9%8B%E7%88%AC%E8%99%AB/"/>
    <id>http://www.yfgeek.com/2017/10/26/我是如何收集校友的之爬虫/</id>
    <published>2017-10-26T13:01:49.000Z</published>
    <updated>2017-10-27T15:31:53.011Z</updated>
    
    <content type="html"><![CDATA[<p>打开伯明翰大学的百科，发现与某相邻学校相比，中国校友实在太少，可能是校友过于低调。于是萌生一个想法，写一个爬虫找出百度百科里所有与“伯明翰”大学有关的校友，然后自动汇总，生成人物梗概，按照知名度排序。</p>
<p>需求大概就是这样，也就是说，我们需要以下几个模块：</p>
<ol>
<li>爬虫程序——抓取全百度百科与“伯明翰大学”相关的数据</li>
<li>数据去重——用pandas去掉抓取相同的URL或相同的名称</li>
<li>提取人名——利用HMM-Viterbi进行人名筛选与提取</li>
<li>下载器——下载所有数据库中数据清洗过的URL，并存入数据库</li>
<li>人物Ranking——按照一定的排名方式，对人物进行知名度排名</li>
<li>人物梗概——利用NLP相关库，对提取的人物进行自动化梗概</li>
</ol>
<p>话不多说，现在开始进行爬虫部分。</p>
<p>爬虫部分分为两类：信息获取器、URL管理器</p>
<p>信息获取器自动抓取百度搜索结果内容，并将其存入URL管理器</p>
<p>首先建立数据库uob，并且建立一个表明为list的表用于存储百度百科基础数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`list`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p>spider.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#python version：2.7</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</div><div class="line"></div><div class="line"><span class="keyword">from</span> urlmanager <span class="keyword">import</span> UrlManager</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.urls = UrlManager()    <span class="comment">#url管理器</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">baidusearch</span><span class="params">(self,word,page)</span>:</span></div><div class="line">        baseUrl = <span class="string">'http://www.baidu.com/s'</span></div><div class="line"></div><div class="line">        data = &#123;<span class="string">'wd'</span>: word, <span class="string">'pn'</span>: str(page - <span class="number">1</span>) + <span class="string">'0'</span>, <span class="string">'tn'</span>: <span class="string">'baidurt'</span>, <span class="string">'ie'</span>: <span class="string">'utf-8'</span>, <span class="string">'bsst'</span>: <span class="string">'1'</span>&#125;</div><div class="line">        data = urllib.urlencode(data)</div><div class="line">        url = baseUrl + <span class="string">'?'</span> + data</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            request = urllib2.Request(url)</div><div class="line">            response = urllib2.urlopen(request)</div><div class="line">        <span class="keyword">except</span> urllib2.HttpError, e:</div><div class="line">            <span class="keyword">print</span> e.code</div><div class="line">            exit(<span class="number">0</span>)</div><div class="line">        <span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">            <span class="keyword">print</span> e.reason</div><div class="line">            exit(<span class="number">0</span>)</div><div class="line"></div><div class="line">        html = response.read()</div><div class="line">        soup = BS(html, <span class="string">"lxml"</span>)</div><div class="line">        td = soup.find_all(class_=<span class="string">'f'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> td:</div><div class="line">            name = t.h3.a.get_text().replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'	'</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">u'_百度百科'</span>,<span class="string">''</span>)</div><div class="line">            <span class="comment"># print name</span></div><div class="line">            url = t.h3.a[<span class="string">'href'</span>].replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line">            <span class="comment"># print url</span></div><div class="line"></div><div class="line">            font_str = t.find_all(<span class="string">'font'</span>, attrs=&#123;<span class="string">'size'</span>: <span class="string">'-1'</span>&#125;)[<span class="number">0</span>].get_text()</div><div class="line">            start = <span class="number">0</span>  <span class="comment"># 起始</span></div><div class="line">            realtime = t.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'realtime'</span>&#125;)</div><div class="line">            <span class="keyword">if</span> realtime:</div><div class="line">                realtime_str = realtime[<span class="number">0</span>].get_text()</div><div class="line">                start = len(realtime_str)</div><div class="line">                <span class="comment"># print realtime_str</span></div><div class="line">            end = font_str.find(<span class="string">'...'</span>)</div><div class="line">            <span class="comment"># print font_str[start:end+3],'\n'</span></div><div class="line">            self.urls.add_new_url(name, url, font_str[start:end+<span class="number">3</span>].replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'	'</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    obj_spider = Spider()</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</div><div class="line">        obj_spider.baidusearch(<span class="string">'伯明翰大学 site:baike.baidu.com'</span>, x)</div><div class="line">        time.sleep(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>urlmanager.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#python version：2.7</span></div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlManager</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.new_urls = dict()  <span class="comment"># 待爬取url</span></div><div class="line">        self.old_urls = dict()  <span class="comment"># 已爬取url</span></div><div class="line">        self.db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">""</span>, <span class="string">"uob"</span> ,use_unicode=<span class="keyword">True</span>, charset=<span class="string">"utf8"</span>)</div><div class="line">        self.cursor = self.db.cursor()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_url</span><span class="params">(self, name, url, description)</span>:</span>  <span class="comment"># 向管理器中添加一个新的url</span></div><div class="line">        <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.new_urls <span class="keyword">and</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.old_urls:</div><div class="line">            self.new_urls[name] = url</div><div class="line">            sql = <span class="string">u"INSERT INTO list (name,  url, description) VALUES (\""</span> + name  +  <span class="string">u"\", \""</span> + url + <span class="string">u"\", \""</span> + description + <span class="string">u"\");"</span></div><div class="line"></div><div class="line">            <span class="keyword">print</span> sql</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="comment"># 执行sql语句</span></div><div class="line">                self.cursor.execute(sql)</div><div class="line">                <span class="comment"># 提交到数据库执行</span></div><div class="line">                self.db.commit()</div><div class="line">                <span class="comment"># print "success"</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="comment"># Rollback in case there is any error</span></div><div class="line">                self.db.rollback()</div><div class="line">                <span class="keyword">print</span> <span class="string">"error"</span></div></pre></td></tr></table></figure>
<p>将数据存入数据库，最后获取信息如下：</p>
<p><img src="/content/images/uob/1.png" alt=""></p>
<p><img src="/content/images/uob/2.png" alt=""></p>
<p>明日更新：“我是如何收集校友的”之数据去重</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打开伯明翰大学的百科，发现与某相邻学校相比，中国校友实在太少，可能是校友过于低调。于是萌生一个想法，写一个爬虫找出百度百科里所有与“伯明翰”大学有关的校友，然后自动汇总，生成人物梗概，按照知名度排序。&lt;/p&gt;
&lt;p&gt;需求大概就是这样，也就是说，我们需要以下几个模块：&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.yfgeek.com/categories/Python/"/>
    
    
      <category term="数据" scheme="http://www.yfgeek.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>记一次MySQL无法启动及修复经历</title>
    <link href="http://www.yfgeek.com/2017/08/18/%E8%AE%B0%E4%B8%80%E6%AC%A1Mysql%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%8F%8A%E4%BF%AE%E5%A4%8D%E7%BB%8F%E5%8E%86/"/>
    <id>http://www.yfgeek.com/2017/08/18/记一次Mysql无法启动及修复经历/</id>
    <published>2017-08-18T12:27:29.000Z</published>
    <updated>2017-10-26T12:59:55.527Z</updated>
    
    <content type="html"><![CDATA[<p>记得有次本地的MySQL无法启动，网上说，去删掉InnoDB日志就行，我就傻乎乎的去删掉了InnoDB相关的文件，果然，没有任何问题，正常启动了。</p>
<p>可是谁曾想，过了几天，故障复现了，我就按部就班的又去删除，结果，又解决了。</p>
<p>可是，现在棘手的问题又出现了，数据库，彻底的挂掉了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[ERROR] InnoDB: Attempted to open a previously opened tablespace</div><div class="line">2017-08-18 20:07:04 140736493900736 [ERROR] InnoDB: Attempted to open a previously opened tablespace. Previous tablespace blockvotes/vote uses space ID: 7 at filepath: ./blockvotes/vote.ibd. Cannot open tablespace phpmyadmin/pma__pdf_pages which uses space ID: 7 at filepath: ./phpmyadmin/pma__pdf_pages.ibd</div><div class="line">2017-08-18 20:07:04 7fffc4b9d3c0  InnoDB: Operating system error number 2 in a file operation.</div><div class="line">InnoDB: The error means the system cannot find the path specified.</div><div class="line">InnoDB: If you are installing InnoDB, remember that you must create</div><div class="line">InnoDB: directories yourself, InnoDB does not create them.</div><div class="line">InnoDB: Error: could not open single-table tablespace file ./phpmyadmin/pma__pdf_pages.ibd</div></pre></td></tr></table></figure>
<p>按照网上的说法，没救了，因为第一次删除了InnoDB的<code>ibdata1</code>文件，这个文件是共享表空间，是不可以随便乱删的。</p>
<p>可是想着我的数据库里还存着很多东西，不能就这样放弃。</p>
<p>终于，找到了强力解决方法！</p>
<p>修复方法，打开my.cnf文件，把开启mysql的innodb强制修复属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">innodb_force_recovery = 1</div></pre></td></tr></table></figure>
<p>启动服务后，瞬间好了，数据完好无损，没有丢失。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得有次本地的MySQL无法启动，网上说，去删掉InnoDB日志就行，我就傻乎乎的去删掉了InnoDB相关的文件，果然，没有任何问题，正常启动了。&lt;/p&gt;
&lt;p&gt;可是谁曾想，过了几天，故障复现了，我就按部就班的又去删除，结果，又解决了。&lt;/p&gt;
&lt;p&gt;可是，现在棘手的问题又
    
    </summary>
    
      <category term="Web" scheme="http://www.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://www.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>BlockVotes 一个基于区块链的环签名投票系统</title>
    <link href="http://www.yfgeek.com/2017/08/10/blockvotes/"/>
    <id>http://www.yfgeek.com/2017/08/10/blockvotes/</id>
    <published>2017-08-09T17:10:41.000Z</published>
    <updated>2017-10-26T12:59:55.515Z</updated>
    
    <content type="html"><![CDATA[<p>好久好久没有写Blog了，最近在忙我的论文，题目是一个基于区块链的环签名投票系统。</p>
<p>听着名字挺绕的，实际上也是挺绕的，我做这个题目实际上是将三个学术领域的东西放在了一起：</p>
<ul>
<li>电子投票 (e-voting) 属于密码学</li>
<li>区块链(blockchain) 属于密码学的应用</li>
<li>环签名(ring-signature) 属于密码学</li>
</ul>
<p>如果对以上三个概念无任何了解，基本上就告别理解我做的东西了。这个项目目前处于私有项目状态之中，由于存在毕业设计可能会代码查重的问题，在九月初，将会对本项目彻底开源。</p>
<h1 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h1><p><img src="/content/images/blockvotes/logo.png" width="300" style="margin: 0;"></p>
<h2 id="电子投票？"><a href="#电子投票？" class="headerlink" title="电子投票？"></a>电子投票？</h2><p>实际上，这个学术命题属于电子投票方向的，在电子投票学术方向上属于创新型，在区块链上属于应用型，在谈及这些问题之前，得先说说学术上的电子投票的一些概念：</p>
<p><img src="/content/images/blockvotes/security.png" alt=""></p>
<p><strong>隐私性:</strong></p>
<ul>
<li>选票保密性 (BP): 任何攻击者都无法把用户所投的票和投票者的身份联系起来。</li>
<li>无收据性 (RF): 投票者在投票后不能证明他是怎么投票的。系统不允许投票者在投票后证明这些。</li>
<li>不可强制性 (CR): 任何攻击者都无法强制用户生成自己不想投的票据。 攻击者不会强迫选民得到相应的收据以供强迫者检查。</li>
</ul>
<p><strong>可验证性:</strong></p>
<ul>
<li>个体可验证性：每个投票者可以验证自己的投票是不是倍正确计入所有投票。</li>
<li>全局验证性：任何投票者都可以验证其他投票者所投票的合法性。</li>
</ul>
<p><strong>不可重投性:</strong></p>
<p>不可重投性指的是，任何投票者无法对相同的消息进行两次投票。</p>
<p><strong>公平性:</strong></p>
<p>公平性指的是，任何人都无法提前知道选票的结果，以及无法影响选票的结果。</p>
<p>其实还有很多很多概念，具体可以参考引用中的第一个论文。</p>
<p>实际上，隐私性和可验证性在一定程度上是互相矛盾的，保障可验证性的情况下就可能无法保证隐私，我们在电子投票的方面的目标是尽可能的保障以上的目标。</p>
<p>所以，设计一个系统是从隐私性和可验证性的角度上出发的，这也就解释了，为什么用区块链，为什么用环签名。</p>
<h2 id="为什么用区块链"><a href="#为什么用区块链" class="headerlink" title="为什么用区块链"></a>为什么用区块链</h2><p>区块链是什么？区块链可以理解为“分布式公共账本”，按照计算机的角度上，如果你对区块链一窍不通，<strong>你可以理解为一个可 增加、查找 却不能修改、删除的 分布式实时数据库</strong>。而比特币中的交易信息就是存在这个数据库之中的。</p>
<p>如果你还是不理解，请<strong>千万不要到互联网上搜索什么是比特币、比特币挖矿原理、什么是区块链，只会让你更加疑惑</strong>，他们试图把区块链描述的非常高大上，迷惑你，并且告诉外人，这是很高大上的东西，其实不是，如果你真正研究过区块链的协议，你会觉得其实不是那么回事。在此，对于那些故作玄虚的文章，我想引用《LaTeX新人教程，30分钟从完全陌生到基本入门》文章所说的一句话表达我的心情：</p>
<blockquote>
<p>我要严厉警告和强烈声讨那些自以为是advanced LaTeX user的人。请你们不要为了自己那一点可怜可悲的虚荣心，去刻意渲染LaTeX有多么高端多么不容易学习，这和孔乙己炫耀茴香豆的茴字有四种写法有什么区别么？混账！LaTeX到底有多“难”你们自己清楚好么？</p>
</blockquote>
<p>所以，我附了一篇论文[3]，不过是英文版的，但是都是纯白话口语讲述到底什么是区块链，比特币的挖矿原理，实际上是非常浅显易懂的。如果有时间，恰当的时候，我也可以翻译成中文。</p>
<hr>
<p>世界上第一个区块链是比特币创造的，比特币需要区块链才能够叫做区块链，为什么？</p>
<p>因为作为“货币“，最根本的存在的意义是什么？</p>
<p>证明资产？自己是富二代？不不不，不是的。</p>
<p>根本意义实际上是交易，人类社会，有了交易，才有了货币，货币是一般等价物，这个我们在中学都学过。</p>
<p>那么作为一种货币，货币是要流通的，如果顾客买了商家的东西，是不是要顾客给商家付款呀？天经地义的。</p>
<p>这个过程就是交易，那么，如何证明顾客已经把钱付给了商家？</p>
<p>在现实生活中，太简单了，根本不用证明，顾客直接把钱给商家就行了。</p>
<p>但是，如果顾客用银行卡或者支付宝呢？</p>
<p>好！我们的概念来了，这个概念叫 账本。</p>
<p>什么是账本？实际上就是银行的这笔交易的流水，在你用银行卡划卡支付的过程中，实际上是顾客和商家都信任银行，认为银行记下来的这个账是正确无误的，并且银行也把顾客的钱减少了，把商家的钱增加了。那么这个记账的媒介，该笔账单，可以说是账本的一部分。</p>
<p>如果你的银行账户消费的内容足够多，那么这就是一个账本，上面记录着你的所有的交易信息，交易信息和你的账户余额的值一一对应，在这种情况下，你相信银行，你相信账本，银行作为第三方支付方式，你也就自然就信任了。</p>
<p>可是我为什么要提出账本的概念呢？</p>
<p>区块链就是一个分布式的公共记账账本。凡是下载了比特币(或XX币，我这里用比特币举例)的客户端的人，都会自动下载这个账本，这个账本储存着全球所有人的通过比特币交易信息。这个信息只能增加，不可以删除、修改，否则就无法解决同步的问题。</p>
<p>那么我们就可以理解区块链，就是一个分布式的不可删改的数据库，现在理解了吧？</p>
<p>回归正题，为什么要用区块链，因为区块链的广播机制是通过比特币进行交易而储存的，每个交易中都会有一个东西叫做附言(OP_RETURN)，在附言位置可以留自己的转账信息比如：</p>
<blockquote>
<p>哈，这笔交易你收好！是小明转给你的</p>
</blockquote>
<p>这个信息是随意的，可以写任何东西。</p>
<p><a href="https://www.blocktrail.com/tBTC/tx/cb83c02e94d41851d75cfaa31b5318250267cbc043e72740562fdaf8c612b0cf" target="_blank" rel="external">真实的例子</a> 附言内容是 haha</p>
<p>那么聪明的人来了，这段信息是不是可以用来储存东西，虽然有容量限制，但是储存的东西就是永久的不会被更改的。</p>
<p>不错，我创建一个公共的计票的比特币的账户，并且公开地址，每个投票者对这个地址进行转账，并且附上自己的投票信息，比如候选人什么的作为附言，然后进行转账，内容就是相当于“发布到了区块链”上了。</p>
<blockquote>
<p>区块链技术基于去中心化的对等网络，用开源软件把密码学原理、时序数据和共识机制相结合，来保障分布式数据库中各节点的连贯和持续，使信息能即时验证、可追溯、但难以篡改和无法屏蔽，从而创造了一套隐私、高效、安全的共享价值体系。</p>
</blockquote>
<p>高判立下，这样每个投票者的投票信息就是公开的可以验证的，但是又由于比特币地址本身具有匿名性，谁也不知道发布投票信息的人是谁，这又符合了隐私性。</p>
<p>你看，是不是完美了？</p>
<h2 id="为什么用环签名"><a href="#为什么用环签名" class="headerlink" title="为什么用环签名"></a>为什么用环签名</h2><p>不是，并不完美。</p>
<p>为什么？</p>
<p>那在这种情况下，岂不是任何人都可以投票了，不经过投票中心认证的人，都可以瞎投，扰乱视听，而且投票者无法验证整体性。</p>
<p>没错，这个时候伟大的环签名来了。</p>
<p>在理解环签名之前，你需要对密码学的签名机制有所了解，如果不了解，请<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="external">点击这里</a>。</p>
<p>环签名，实际上是一种特殊的群签名。你不用理解什么是群签名，只需要听我继续往下讲什么是环签名。</p>
<p><img src="/content/images/blockvotes/ring1.png" alt=""></p>
<p><img src="/content/images/blockvotes/ring2.png" alt=""></p>
<p>你看，我附了一个山东大学一个优秀的博士<a href="https://wenku.baidu.com/view/5e43126f25c52cc58bd6be40.html" target="_blank" rel="external">论文</a>截图，是不是瞬间就显得高大上？</p>
<p>其实也没有什么的。</p>
<p>环签名是对一个特定的内容进行签名。</p>
<p>在签名之前，所有人围城一个环，每个人生成一个自己的私钥Si，并且告诉其他人自己的公钥(P1,P2,P3…Pn)。</p>
<p>接下来就是开始签名，每个人用自己的私钥Si和所有人的公钥(P1,P2,P3…Pn)对内容m进行签名，可以得到签名s。</p>
<p>注意：</p>
<ul>
<li>每个人的得到的签名都是不一样的</li>
<li>签名的长度取决于公钥的个数</li>
</ul>
<p>这样，我们把m替换为我们的投票内容，这样就可以在组织投票之前，对能够投票的人进行圈定，只有在这个圈子里的人才能投票。</p>
<p>环签名具有天然的可验证性，任何人都可以验证自己，只需要根据得到的签名和所有人的公钥就可以得出自己是不是真正的投票了。</p>
<p>如果把签名信息s也随着信息m一起广播到区块链上，那是不是就能够保障整体验证性与个体验证性？</p>
<p>好了，我们投票的主要矛盾解决了！现在，真的解决了！</p>
<p>你可能一句都没看懂我上面在说什么，也可能看懂了一点，没事，摸摸头，是我表达能力太差了，其实都是非常简单的东西。</p>
<h2 id="具体投票协议"><a href="#具体投票协议" class="headerlink" title="具体投票协议"></a>具体投票协议</h2><p>我不告诉你哈哈哈哈哈哈，会在九月份公开。</p>
<p>都是一些数学表达，发了也得花大量篇幅去解释，费劲。</p>
<p>因为内容可能会查重，即使是中文版本现在我也不想发。</p>
<h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p><img src="/content/images/blockvotes/stack.png" alt=""></p>
<p>后端语言：PHP</p>
<p>后端数据库：MySQL</p>
<p>区块链：比特币BTC/比特币测试网络TESTNET</p>
<p>PHP MVC 框架：Slim</p>
<p>PHP DAO 框架：Illuminate Database</p>
<p>PHP 依赖管理： Composer</p>
<p>PHP 模板引擎：TWIG</p>
<p>前端包管理：NPM</p>
<p>前端CSS预处理器：Sass</p>
<p>前端代码打包工具：Gulp</p>
<p>前端预编译器：browserify</p>
<p>版本控制：Git</p>
<p>说句实话，技术挺复杂的，用到了很多第三方类库、框架、工具，感谢很多第三方类库的帮助，在我写代码的时候，也发现了一个第三方类库的Bug，并随手修复了，也算是对开源社区的回馈吧。</p>
<p><img src="/content/images/blockvotes/fixedbug.png" alt=""></p>
<h1 id="关于开源"><a href="#关于开源" class="headerlink" title="关于开源"></a>关于开源</h1><p>项目会开源的，我知道，区块链最近创业很多，我的这个项目也可以用来创业，但是我根本不在乎这些金钱的东西，<strong>我更享受开源所带来的快感</strong>。</p>
<p>但是如果拿去用来做商业用途，我还是很不爽的，所以我的这个项目禁止用于商业用途，但是非营利用途都是可以的。</p>
<h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><p>可能不是最终版，先尝鲜一下</p>
<p><img src="/content/images/blockvotes/1.png" alt=""></p>
<p><img src="/content/images/blockvotes/2.png" alt=""></p>
<p><img src="/content/images/blockvotes/3.png" alt=""></p>
<p><img src="/content/images/blockvotes/4.png" alt=""></p>
<p><img src="/content/images/blockvotes/5.png" alt=""></p>
<p><img src="/content/images/blockvotes/6.png" alt=""></p>
<p><img src="/content/images/blockvotes/7.png" alt=""></p>
<p><img src="/content/images/blockvotes/8.png" alt=""></p>
<p><img src="/content/images/blockvotes/9.png" alt=""></p>
<p><img src="/content/images/blockvotes/10.png" alt=""></p>
<h1 id="本文参考文献"><a href="#本文参考文献" class="headerlink" title="本文参考文献"></a>本文参考文献</h1><p>[1] Jonker H, Mauw S, Pang J. Privacy and verifiability in voting systems: Methods, developments and trends[J]. Computer Science Review, 2013, 10:1-30.</p>
<p>[2] 张江霄, 李舟军, 刘霞,等. 基于群盲签名的多授权电子投票系统[J]. 中国科技论文, 2015(8):980-983.</p>
<p>[3] Mercer R. Privacy on the Blockchain: Unique Ring Signatures[J]. 2016.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久好久没有写Blog了，最近在忙我的论文，题目是一个基于区块链的环签名投票系统。&lt;/p&gt;
&lt;p&gt;听着名字挺绕的，实际上也是挺绕的，我做这个题目实际上是将三个学术领域的东西放在了一起：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电子投票 (e-voting) 属于密码学&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="http://www.yfgeek.com/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="http://www.yfgeek.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>拍拍哒投资平台</title>
    <link href="http://www.yfgeek.com/2017/06/26/ppd/"/>
    <id>http://www.yfgeek.com/2017/06/26/ppd/</id>
    <published>2017-06-25T17:05:25.000Z</published>
    <updated>2017-10-26T12:59:55.526Z</updated>
    
    <content type="html"><![CDATA[<p>本文是近期状况的一些小记录，无技术探讨。</p>
<p>最近参加了一个小比赛，第二届魔镜杯数据应用大赛，大概就是做一个金融数据产品，用了两天码了一些代码，还是学习到了一些知识。</p>
<p>至少学到了怎么在前端获取标准的oAuth，其实很简单，事情实践起来总是好的。</p>
<p>至于开发语言方面，本来是想用python的，后来因为工期紧，就用Thinkphp改了改，事实上发现，之前做的任何事情都是有用的。</p>
<p>具体做了两个平台：</p>
<p>模拟平台——从已有的数据库读取数据，供用户学习</p>
<p>投资平台——获取真实数据，实时分析，真实交易</p>
<p>在这期间，做了这些工作：</p>
<ul>
<li>完整的用户登录、注册逻辑</li>
<li>集成拍拍贷SDK到框架里，依赖RSA算法</li>
<li>可以通过拍拍贷的OAuth授权到用户上</li>
<li>不同用户可以储存不同的token信息</li>
<li>构建了一个API用于读取特定的信息，可以批量读取投资信息</li>
<li>构建了一个API用于读取单个的信息</li>
<li>真实的模拟投资系统，根据日期的变化，改变可选投资项</li>
<li>真实的投资功能</li>
<li>数据可视化</li>
<li>用缓存机制存储分析数据，高效快速</li>
<li>基于神经网络算法进行逾期率预测</li>
</ul>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="/content/images/ppd/1.png" alt=""></p>
<p><img src="/content/images/ppd/2.png" alt=""></p>
<p><img src="/content/images/ppd/3.png" alt=""></p>
<p><img src="/content/images/ppd/4.png" alt=""></p>
<p><img src="/content/images/ppd/5.png" alt=""></p>
<p><img src="/content/images/ppd/6.png" alt=""></p>
<p><img src="/content/images/ppd/7.png" alt=""></p>
<p><img src="/content/images/ppd/8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是近期状况的一些小记录，无技术探讨。&lt;/p&gt;
&lt;p&gt;最近参加了一个小比赛，第二届魔镜杯数据应用大赛，大概就是做一个金融数据产品，用了两天码了一些代码，还是学习到了一些知识。&lt;/p&gt;
&lt;p&gt;至少学到了怎么在前端获取标准的oAuth，其实很简单，事情实践起来总是好的。&lt;/p
    
    </summary>
    
      <category term="Web" scheme="http://www.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://www.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>揭秘utf8=✓背后的小秘密</title>
    <link href="http://www.yfgeek.com/2017/02/17/utf8true/"/>
    <id>http://www.yfgeek.com/2017/02/17/utf8true/</id>
    <published>2017-02-17T08:51:18.000Z</published>
    <updated>2017-10-26T12:59:55.526Z</updated>
    
    <content type="html"><![CDATA[<p>你可能和我一样疑惑，为什么github等网站，在POST数据的时候，经常带有<code>utf8=✓</code>字符，显然这种方式看起来很难以接受，因为Unicode编码错误的话会导致很多问题，毕竟用户的浏览器是不一样的。</p>
<p>为什么不用<code>utf8=true</code>来代替呢？</p>
<p>答案恰恰相反！</p>
<p><code>utf8=✓</code>就是为了让浏览器在POST数据时强制使用utf-8的编码方式，进而在后端代码中无需考虑字符串编码转换问题，以免带来困扰。</p>
<p>在IE8，或者更早的IE浏览器里，在POST数据时，会尽可能的POST以Latin-1编码方式的字符串，这给后端带来了巨大的兼容性的困扰，但是你一旦在POST数据中包含了✓这样的Unicode字符，就会自动用uft8的编码方式发送字符串。</p>
<p>是不是很有用的小技巧呢？</p>
<p>本文翻译自:<a href="http://softwareengineering.stackexchange.com/questions/168751/is-the-use-of-utf8-preferable-to-utf8-true" target="_blank" rel="external">Is the use of “utf8=✓” preferable to “utf8=true”?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你可能和我一样疑惑，为什么github等网站，在POST数据的时候，经常带有&lt;code&gt;utf8=✓&lt;/code&gt;字符，显然这种方式看起来很难以接受，因为Unicode编码错误的话会导致很多问题，毕竟用户的浏览器是不一样的。&lt;/p&gt;
&lt;p&gt;为什么不用&lt;code&gt;utf8=t
    
    </summary>
    
      <category term="Web" scheme="http://www.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://www.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>浅谈函数式编程柯里化</title>
    <link href="http://www.yfgeek.com/2017/02/11/currying/"/>
    <id>http://www.yfgeek.com/2017/02/11/currying/</id>
    <published>2017-02-11T10:27:57.000Z</published>
    <updated>2017-10-26T12:59:55.523Z</updated>
    
    <content type="html"><![CDATA[<p>百度百科里对柯里化的定义是</p>
<blockquote>
<p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。</p>
</blockquote>
<p>简直看不懂哦，Talk is Cheap，我们拿一个简单的haskell程序说明什么叫</p>
<h2 id="自动柯里化"><a href="#自动柯里化" class="headerlink" title="自动柯里化"></a>自动柯里化</h2><p>两数相加，返回结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun add x y = x + y</div></pre></td></tr></table></figure>
<p>这是一个典型的柯里化的版本，当我输入 <code>(add 1) 2</code> 时与<code>add 1 2</code> 的返回结果一模一样，都是3</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Prelude</span>&gt; (add <span class="number">1</span>) <span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>但是，换个角度上讲，我明明设置了两个“变量”，在haskell里却把它们的结果又封装成了一个函数，这就是haskell的强大特性：自动柯里化，haskell全部帮你自动处理了。</p>
<p>简单来说，柯里化指的是函数里只接收一个余下的参数，再调用原函数，返回出相应的结果。</p>
<p>而同样的，没有柯里化的普通版本却是这样的：</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">fun</span> add(x, y) = x + y</div></pre></td></tr></table></figure>
<p>这个版本里，只能通过<code>add(1,2)</code>进行相加操作。</p>
<p>柯里化实际上是将高阶函数进行降阶处理，没理解？接着看~ </p>
<h2 id="JavaScript的柯里化"><a href="#JavaScript的柯里化" class="headerlink" title="JavaScript的柯里化"></a>JavaScript的柯里化</h2><p>JavaScript存在<strong>闭包</strong>的特性，能够很好的为我们将函数柯里化，但是很可惜JavaScript不支持自动柯里化，这意味着，我们要自己写柯里化的过程，不过还好，这能有效的让我们理解，到底什么是柯里化。</p>
<p>同样的，还是那个add的简单函数，用JavaScript实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(y===<span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="function">(<span class="params">z</span>) =&gt;</span> x + z;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> x+y;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试一下！通过执行<code>add(1)(2)</code>，果然返回了<code>3</code>，是的，这是一个手动构造柯里化函数的过程。对于大多数函数，我们有通用的柯里化方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fixedArgs = [].slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    args = fixedArgs.concat([].slice.call(<span class="built_in">arguments</span>))</div><div class="line">    <span class="keyword">return</span> func.apply(<span class="literal">null</span>, args);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，对于<code>add</code>函数来说，我们用一个函数生成了另一个范围更小的函数，一层接一层的解决问题。这符合函数式编程的思想，就是我们更关注<strong>函数</strong>与<strong>函数</strong>之间的关系，而非状态本身，更在乎局部而非整体。</p>
<p>这个例子体现不出这种思想的精妙之处，那么我们再举一个例子🌰</p>
<p>如果，我们想让一个已知的数组每个值都做加1操作，传统的方法该怎么做？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ar = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">ar.map(<span class="function">(<span class="params">x</span>)=&gt;</span> x+<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>对吧？那么我们下面可以用柯里化的思想把这个问题实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">ar</span> =&gt;</span> ar.map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</div><div class="line">add([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div></pre></td></tr></table></figure>
<p>首先我们在<code>add</code>里定义了一个函数，并且传入参数为<code>ar</code>，<code>ar</code>进行<code>Array.prototype.map()</code>操作，对每一个数进行遍历，并且返回这个数字+1后的值给<code>ar</code>，这看起来挺玄乎的，但确实可行，我们只关心局部，请试图把<code>add</code>当做数学里中的函数去思考理解，或许会好懂的多。可是这只是方便了我们理解，那么到底有什么好处呢？</p>
<p>再举一个例子🌰</p>
<p>如果我们想写一个函数，用来对已知数组的已知量进行相加n的操作，怎么写？传统方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ar= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToArray</span>(<span class="params">ar,n</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> ar.map(<span class="function">(<span class="params">x</span>)=&gt;</span> x+n)</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(addToArray(ar,<span class="number">1</span>));</div></pre></td></tr></table></figure>
<p>但是，我们可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; a+b;</div><div class="line"><span class="keyword">const</span> addToArray = <span class="function">(<span class="params">ar,n</span>) =&gt;</span> ar.map(add(n));</div><div class="line">addToArray([<span class="number">2</span>,<span class="number">3</span>],<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>结果都一样，其实过程是不一样的，你可能真的憋不住了，到底有什么用呢？</p>
<h1 id="柯里化的好处"><a href="#柯里化的好处" class="headerlink" title="柯里化的好处"></a>柯里化的好处</h1><p>就像上面的例子一样，你能看出不同吗？对，第一个的实质是新写了一个函数，对数组进行map操作，而第二个则是在直接在<code>map</code>里进行<code>add</code>操作，这很通用，一旦你写了很多类似于<code>add</code>的函数，就会方便起来，可以让我们方便的在<code>map</code>,<code>reduce</code>,<code>filter</code>里调用。</p>
<ul>
<li>能够进行延迟计算，就像add(1)(2)一样，1比2先传入，2就会被延迟计算，在特定的场景里，有一定的应用意义。</li>
<li>当你发现你要调用一个函数，并且调用参数都是一样的情况下，这个参数就可以被柯里化，以便更好的完成任务。</li>
<li>优雅的写法，允许你写出来的代码更干净、更有表达力。</li>
</ul>
<p>虽然柯里化在日常应用不多，但仍然是一个不可不了解的好概念。</p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="https://cnodejs.org/topic/56261a249b48ca9448b776c4" target="_blank" rel="external"> JavaScript柯里化</a></p>
<p><a href="http://codekirei.com/posts/currying-with-arrow-functions/" target="_blank" rel="external">Currying and ES6 Arrow Functions</a></p>
<p><a href="http://www.cnblogs.com/zztt/p/4142891.html" target="_blank" rel="external">浅析 JavaScript 中的 函数 currying 柯里化</a></p>
<p><a href="https://www.youtube.com/watch?v=iZLP4qOwY8I" target="_blank" rel="external">Currying - Part 6 of Functional Programming in JavaScript(需梯子)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;百度百科里对柯里化的定义是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher St
    
    </summary>
    
      <category term="Web" scheme="http://www.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://www.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>什么才是优秀的程序代码</title>
    <link href="http://www.yfgeek.com/2017/02/08/awesome-code/"/>
    <id>http://www.yfgeek.com/2017/02/08/awesome-code/</id>
    <published>2017-02-08T09:35:13.000Z</published>
    <updated>2017-10-26T12:59:55.523Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我想说的是，我谈及的“优秀程序代码”，不是指“优秀程序”，也不是更易阅读的“代码”，恰恰相反，我可能想写的是更不易阅读的代码，这里的“优秀”指的是高效、快速。</p>
<p>在写之前，我想先用一个原则引入这个文章：</p>
<blockquote>
<p><strong>KISS原则</strong>  <strong>*K</strong>eep <strong>I</strong>t <strong>S</strong>imple, <strong>S</strong>tupid* </p>
</blockquote>
<p>是的，这是我心中优秀的代码程序，就是简单、高效。</p>
<p>相信所有人都知道时间复杂度这个东西，是的，优秀的代码永远都在做一件事：降低时间复杂度，哪怕写的过程是复杂的、理解起来是相对难的(比如，快速排序、堆排序)。那么，我接下来，想较一下真。</p>
<h1 id="卡常数"><a href="#卡常数" class="headerlink" title="卡常数"></a>卡常数</h1><blockquote>
<p>据考证，[卡]（Qa’a）是古埃及第一王朝的最后一位法老。</p>
<p>他发现并研究了一种常数，后世以他的名字叫做卡常数。卡特兰数的起源也是因为卡的后人与特兰克斯结婚，生下来的孩子就叫卡特兰，而他只是发表了祖传的家书而已。</p>
<p>Sereja也是卡的后人，提出括号序列问题，也是从家书里得到的资料。然而Sereja为了不让这个秘密公开，于是隐瞒了这道题的真正做法。可是由于卡的后人不是各个都像卡特兰一样爱慕虚荣，这一算法也无法找到。“欲见贤人而不以其道，犹欲其入而闭之门也”。卡之常数的奥秘，需要以一颗诚心去追寻。</p>
</blockquote>
<p>看不懂对吗？</p>
<p>我也看不懂，因为这是一群高中生写的。按照我的理解，卡常数，就是内循环里的那些看似不重要的语句其实每一句话的运行速度是不一样的，这个客观规律，是真实存在的，举个栗子🌰</p>
<p>程序1</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; i++)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K; j++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= K; k++) &#123; </div><div class="line">      r.a[i][j] += a[i][k] * x.a[k][j];</div><div class="line">      <span class="keyword">if</span> (r.a[i][j] &gt;= <span class="number">1l</span>l &lt;&lt; <span class="number">62</span> || k == K) r.a[i][j] %= mod;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>程序2</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; i++)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K; j++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= K; k++)</div><div class="line">      r.a[i][j] = (r. a[i][j] + a[i][k] * x.a[k][j] % mod) % mod;</div></pre></td></tr></table></figure>
<p>按照常人的理解，<code>程序1</code>和<code>程序2</code>的复杂度都是O(n^3)，没错，那么他们的时间是一样的吗？</p>
<p>并不一样。</p>
<p>在机器性能并没有那么高的情况下，在测试数据量没有那么少的情况下，第二种比第一种快了一倍。</p>
<p><strong>为什么？</strong></p>
<p>因为第二种代码更加精炼吗？并不完全是。</p>
<p>在<code>程序1</code>中，<code>if (r.a[i][j] &gt;= 1ll &lt;&lt; 62 || k == K)</code>实际上是耗费时间的，if操作在执行的时候真实的操作是这样的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(这里面是<span class="literal">true</span>吗？)</div><div class="line">  左边是<span class="literal">true</span>吗？</div><div class="line">  右边是<span class="literal">true</span>吗？</div><div class="line">  ||操作是<span class="literal">true</span>吗？</div></pre></td></tr></table></figure>
<p>这必然会消耗大量的时间，同理</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r.a[i][j] += a[i][k] * x.a[k][j];</div><div class="line">r.a[i][j] = a[i][k] * x.a[k][j] + r.a[i][j];</div></pre></td></tr></table></figure>
<p>一样吗？实际上是不一样的，后者比前者快一点。</p>
<p>你可能觉得，这也太较真了吧？但是高效就是高效，效率提高才是硬道理。</p>
<blockquote>
<p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>
<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><ul>
<li><p>一杆内存在心中</p>
</li>
<li><p>多写一个不必要的循环递归，浑身难受</p>
</li>
<li><p>多写一个不必要的逻辑判断，浑身难受</p>
</li>
<li><p>多写一个无关变量，浑身难受</p>
</li>
<li><p>不找到最优解，浑身难受</p>
</li>
<li><p>始终自发的想着如何用栈、树去解决问题</p>
</li>
<li><p>代码效率哪怕提升的是一倍，花一天优化代码也是值得的</p>
</li>
<li><p>时刻遵循RP定律写代码，RP++</p>
</li>
</ul>
<p>我从我接触OI那一刻起，我觉得算法是美的，每一个人写出来的算法都体现了一种算法，永远对高效快速的低复杂度的精炼代码充满敬畏之心！❤️</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我想说的是，我谈及的“优秀程序代码”，不是指“优秀程序”，也不是更易阅读的“代码”，恰恰相反，我可能想写的是更不易阅读的代码，这里的“优秀”指的是高效、快速。&lt;/p&gt;
&lt;p&gt;在写之前，我想先用一个原则引入这个文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;stron
    
    </summary>
    
      <category term="CodeStyle" scheme="http://www.yfgeek.com/categories/CodeStyle/"/>
    
    
      <category term="CodeStyle" scheme="http://www.yfgeek.com/tags/CodeStyle/"/>
    
  </entry>
  
  <entry>
    <title>我眼中的React</title>
    <link href="http://www.yfgeek.com/2017/02/04/react/"/>
    <id>http://www.yfgeek.com/2017/02/04/react/</id>
    <published>2017-02-04T06:35:03.000Z</published>
    <updated>2017-10-26T12:59:55.525Z</updated>
    
    <content type="html"><![CDATA[<p>前两天，用React把 之前的 <a href="https://github.com/yfgeek/rpi-TempRuntime" target="_blank" rel="external">基于树莓派3B,DHT11/DHT22,LCD1602的一个实时温度湿度检测系统</a> 的Web部分重构了一下。</p>
<p>这个项目之前是用Semantic UI + eCharts + JQuery Datapicker写的，由于这个项目的实现过程比较经典，几乎把所有的感觉React的基础思想都实现了一遍。</p>
<p>无疑，React给前端带来了各种新的想法与思想，声明式、虚拟Dom、单向数据流、JSX、组件化、Flux、以JavaScript为中心、React Native。</p>
<p><img src="/content/images/react/0.png" alt=""></p>
<h1 id="虚拟Dom"><a href="#虚拟Dom" class="headerlink" title="虚拟Dom"></a>虚拟Dom</h1><p>React是以JS为中心的，而非HTML，虚拟Dom是一个至关重要的概念。</p>
<p>在jQuery出现之前，我们一般都是直接操作Dom，方法“暴力、简单”，也存在兼容性的问题。在jQuery出现之后，jQuery的选择器帮助我们简单、高效的操作Dom，也就是在jQuery出现之后，前端就开始大爆发了。</p>
<p>但是随着发展，这种简单暴力的操作Dom的方法对于很多大型系统性工程来说，从软件工程的角度上讲，是杂乱、无序的，一旦时间久远，项目越来越大，维护成本就变大。于是，我们有了各种前端MVC、MVVM框架，典型的有Angular、React、vue.js，MVVM给我们带来一种全新的思想，数据绑定。</p>
<p>不过，与此同时，React给我们带来了一种全新的思想，虚拟Dom，从此，我们再也不用直接操作Dom了，而是用虚拟Dom更新Dom。</p>
<p>你可能会问，这样做，效率岂不是更低了？</p>
<p>是的，也不是。其实没有那么明显，一般来讲，操作Dom树的Diff算法应该是O(n^3)，而React把效率降低到了O(n)。</p>
<p><img src="/content/images/react/1.png" alt=""></p>
<p>简单来讲，如图所示，React只会比较相同层级的Dom，从而简化了Dom Diff的复杂度，虽然有所舍弃，但是全局比较是没有必要的。</p>
<p>通过在JSX文件中写虚拟Dom，React在内存中会自动拿现在的虚拟Dom和旧的虚拟Dom进行Diff操作，如果发现有Diff的部分，就拿出来形成新的Patch部分，加入到现在的Dom树上。</p>
<p>也就是因为这个原因，虚拟Dom使得在操作Dom上更加高效，每次更新数据不会进行O(n^3)复杂的操作。</p>
<p>你可能会问，什么是JSX？</p>
<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>其实JSX只是一种未编译的JavaScript，可以方便的对HTML进行书写，先上代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'semantic-ui-react'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ButtonComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">'blue'</span> &gt;</span>分钟<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">'violet'</span>&gt;</span>小时<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ButtonComponent;</div></pre></td></tr></table></figure>
<p>代码部分用<code>ES6</code>书写，你可能会问什么是ES6？其实还有ES7(ECMAScript 2016)呢~</p>
<p>那么，你可能看到了很变态的写法，就是HTML和JS混写，没错，这就是EJS，但请注意，这不是HTML，写着写着很有可能会掉入<a href="http://www.css88.com/react/docs/jsx-gotchas.html" target="_blank" rel="external">JSX陷阱</a>。</p>
<p>经过<code>babel</code>等工具的编译后，JSX在运行的时候会被编译为真实的JavaScript语言，之所以这样写，只是为了方便程序员更方便的写代码。</p>
<p>比如上面的代码“HTML部分”会被编译为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">React.createElement(<span class="string">'button'</span>, &#123;<span class="attr">class</span>: <span class="string">'ui blue button'</span>&#125;, <span class="string">'分钟'</span>);</div><div class="line">React.createElement(<span class="string">'button'</span>, &#123;<span class="attr">class</span>: <span class="string">'ui violet button'</span>&#125;, <span class="string">'小时'</span>);</div></pre></td></tr></table></figure>
<p>当然，JSX也有很多坑，比如：</p>
<p><code>Module build failed: SyntaxError: Adjacent JSX elements must be wrapped in an enclosing tag</code></p>
<p>作为新手，这个问题，我经常遇到，因为你在写每一个JSX模块的时候，你需要用类似于<code>&lt;div&gt;&lt;/div&gt;</code>作为开始与结尾，不规范的代码不会被编译成功。</p>
<h1 id="ECMAScript-ES"><a href="#ECMAScript-ES" class="headerlink" title="ECMAScript(ES)"></a>ECMAScript(ES)</h1><p>ES无疑是这几年最火的前端语言，没错，他是JavaScript的改进版，我知道，其实还有很多其他类似的比如CoffeeScript，但是ES会被各大浏览器所兼容支持，但是你可能会问到兼容性问题，没事，我们有<code>babel</code>工具。</p>
<ul>
<li>ECMAScript：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>
<li>JavaScript：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>
<li>ECMAScript 5 (ES5)：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>
<li>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅这张兼容性表来查看不同浏览器和工具的实现情况。</li>
<li>ECMAScript Proposals：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>
<li>ECMAScript 2016：第七版 ECMAScript 修订，增加了两个新特性。</li>
</ul>
<p>以上，都是我们常说的ES，在网上看到的代码目前以ES5和ES6居多，写法各异，我建议用最新版的写法写代码。</p>
<p>说白了，就是Javascript并不是一个优秀的语言，但是经过不断的填补，修正，已经让Javascript支持了很多新特性，新的语法，更多的书写方式，以及拥有了更严谨的编程思想。比如<code>let</code>,arrow function(就是这个：<code>(i) =&gt; i + 1</code> )在ES中的运用等。</p>
<p>所以，在认识React之前，最好学习ES的新特性以及<a href="http://blog.csdn.net/zhangjjie0110/article/details/53782537" target="_blank" rel="external">常用的新特性</a>。</p>
<h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><p>我觉得这是React的重量级思想，组件化前端，从此，前端再也不是东拼西凑，而是像积木一样，拼起来。</p>
<p><img src="/content/images/react/2.png" alt=""></p>
<p>React把单一的用户界面，拆成了各种各样的组件，形成“组件树”，采用分而治之的思想，有一个好处，就是维护起来极其方便，对于组件的修改也显得很容易。</p>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>众所周知，Angular是双向数据绑定的，并且引以为豪，因为更容易维护与理解。</p>
<p>但是双向数据绑定也带来了许多问题，会在些其他功能的时候莫名其妙出现很多bug。</p>
<p>React是单向数据绑定的，是非常稳定的做法，但是也存在一些问题，就是在操作其他组件的时候，对于数据流的处理，显得异常困难。</p>
<p>在React中，数据绑定仅仅需要在<code>render</code>中写<code>{数据绑定}</code>，而非像Angular一样，两边都要设置，一定情况下讲，这是比较方便的。</p>
<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>话说回来，React的每一个组件的实质是什么？状态机（State Machines），在React的每一个组件里，通过更新<code>this.state</code>，再通过<code>render()</code>进行渲染，React会自动把最新的状态渲染到网页上。</p>
<p>举个栗子🌰<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateSelectorComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">let</span> todaydate = <span class="keyword">this</span>.showLocale(<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">     <span class="keyword">this</span>.state = &#123;</div><div class="line">         <span class="attr">timenow</span>: todaydate,</div><div class="line">         <span class="attr">showCalendar</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">            <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Input</span> <span class="attr">icon</span>=<span class="string">'calendar'</span> <span class="attr">iconPosition</span>=<span class="string">'left'</span> <span class="attr">readOnly</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showCalendar&#125;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.timenow&#125;</span> <span class="attr">ref</span>=<span class="string">"inputbox"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ButtonComponent</span> /&gt;</span></div><div class="line">            &#123;CalendarComponent&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过这样的方式，我就设置了state的默认初始值，默认日历选择器是不出现的，而今天的日期是今天日期，这很正常。然后在将所谓的值渲染到Dom上。</p>
<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>React的数据流是单向的，是自上向下的层级传递的，props可以对固定的数据进行传递。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render( </div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">    )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">render()&#123;</div><div class="line"> <span class="keyword">return</span>(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span></span></div><div class="line">  )</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，子组件会自动读取出父组件传递过来的<code>props</code>值John，并快速的渲染在页面上。</p>
<h2 id="到底谁是谁"><a href="#到底谁是谁" class="headerlink" title="到底谁是谁"></a>到底谁是谁</h2><p><code>state</code>和<code>props</code>看起来很相似，其实是完全不同的东西。</p>
<table>
<thead>
<tr>
<th>问题</th>
<th><em>props</em></th>
<th><em>state</em></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>可以从父组件得到初始值吗？</td>
<td>可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以被父组件改变值吗？</td>
<td>可以</td>
<td>不可以</td>
<td></td>
</tr>
<tr>
<td>可以设置组件内部的初始值吗？</td>
<td>可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以改变组件内部的初始值吗？</td>
<td>不可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以设置子组件的初始值吗？</td>
<td>可以</td>
<td>可以</td>
<td></td>
</tr>
<tr>
<td>可以改变子组件的初始值吗？</td>
<td>可以</td>
<td>不可以</td>
</tr>
</tbody>
</table>
<p>按照我的个人理解，<code>props</code>是静态的，存入不变量，比如 购物车里的 商品名称、价格；<code>state</code>是动态的，存入随时变化的量，比如 用户购买商品的总价，购买数目。</p>
<p>从操作的角度上讲，<code>props</code>是单向传递的，会一直被传递到子组件，而<code>state</code>更倾向于自身，只能改变自身的值。</p>
<h1 id="获取Dom"><a href="#获取Dom" class="headerlink" title="获取Dom"></a>获取Dom</h1><p><code>this.refs</code>是react的重要组成之一，通过该方法可以快速高效的获取Dom。</p>
<p>例如，在JSX代码中这样写道<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"myInput"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>便可以通过<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.refs.myInput.value</div></pre></td></tr></table></figure></p>
<p>命令获取该Input下的dom属性的value值，非常方便。</p>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>组件都是有生命周期的，生命周期内，<code>props</code>和<code>state</code>改变会导致React自动用Diff算法重新渲染页面。那么生命周期到底都有哪些呢？</p>
<p>大体上分为三类：</p>
<ul>
<li>挂载： 组件被插入到DOM中。</li>
<li>更新： 组件被重新渲染，查明DOM是否应该刷新。</li>
<li>移除： 组件从DOM中移除。</li>
</ul>
<p>从流程上讲，是这样的：</p>
<p><strong>挂载期：</strong></p>
<p>getInitialState() –&gt;&gt; componentWillMount() –&gt;&gt; render() –&gt;&gt; componentDidMount()</p>
<p><strong>更新期：</strong></p>
<p>componentWillReceiveProps() –&gt;&gt; shouldComponentUpdate() –&gt;&gt; componentWillUpdate render() –&gt;&gt; componentDidUpdate()</p>
<p><strong>移除期：</strong></p>
<p>componentWillUnmount()</p>
<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p><strong>componentWillMount()</strong>： 在初次渲染之前执行一次，最早的执行点</p>
<p><strong>componentDidMount()</strong>： 在初次渲染之后执行，比较常用，比如持续执行某事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidMount()&#123;</div><div class="line"> setInterval(<span class="keyword">this</span>.loadData(<span class="keyword">this</span>.state.date),<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><strong>componentWillReceiveProps()</strong>： 在组件接收到新的 <code>props</code> 的时候调用。在初始化渲染的时候，该方法不会调用。</p>
<p><strong>shouldComponentUpdate()</strong>： 在接收到新的 <code>props</code> 或者 <code>state</code>，将要渲染之前调用。</p>
<p><strong>componentWillUpdate()</strong>： 在接收到新的 props 或者 state 之前立刻调用。</p>
<p><strong>componentDidUpdate()</strong>： 在组件的更新已经同步到 DOM 中之后立刻被调用。</p>
<h2 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h2><p><strong>componentWillUnmount()</strong>： 在组件从 DOM 中移除的时候立刻被调用。</p>
<h1 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h1><p>React是MVC中V的一部分，而Flux则是M和C的部分，Flux是单向数据流，符合React的核心思想，不过，Flux并不完善，是一个很松散的架构。</p>
<ul>
<li>Dispatcher： 处理动作分发，维护 Store 之间的依赖关系</li>
<li>Store： 数据和逻辑部分</li>
<li>View： React 组件，这一层可以看作 controller-views，作为视图同时响应用户交互</li>
<li>Action： 提供给 Dispatcher 传递数据给 Store</li>
</ul>
<p><img src="/content/images/react/3.png" alt=""></p>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p><img src="/content/images/react/5.jpeg" alt=""></p>
<p>Flux把总架构都搭好了，可是实现起来并不容易，因为Flux并没有强大的API，只是一种纯粹的思想实现，而Redux是Flux的“升级版”，把各个部分更加方便的实现起来。</p>
<p>此部分未完待续</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我觉得React给前端开发带来了一种全新的思想，那就是以JS为中心，一种全新的世界。</p>
<p>网页不再是网页，而是像工程一样，一块块搭建起来的，拆下来，搬上去都很容易，似的前端再也不是那个凌乱拼凑的年代。</p>
<p>我想任何一种编程语言，无论是解释性、脚本、编译语言都逃离不了这个全新的年代，就是组件化，大家似乎都在不同方向发展，但实际上，确实一样的。</p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="external">深入浅出React（四）：虚拟DOM Diff算法解析</a></p>
<p><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></p>
<p><a href="https://www.cllgeek.com/archives/544" target="_blank" rel="external">React组件声明周期过程说明</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天，用React把 之前的 &lt;a href=&quot;https://github.com/yfgeek/rpi-TempRuntime&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于树莓派3B,DHT11/DHT22,LCD1602的一个实时温度湿度检测
    
    </summary>
    
      <category term="Web" scheme="http://www.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://www.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>用Raspberry Pi Zero打造“即插即用”的Web服务器</title>
    <link href="http://www.yfgeek.com/2017/01/12/network-zero-web/"/>
    <id>http://www.yfgeek.com/2017/01/12/network-zero-web/</id>
    <published>2017-01-11T18:04:44.000Z</published>
    <updated>2017-10-26T12:59:55.527Z</updated>
    
    <content type="html"><![CDATA[<p>虽然Raspberry Pi Zero只有4.5英镑，非常便宜，但确实具有局限性，由于缺少网口、WiFi，功能比较单一，可曾设想，用Raspberry Pi Zero打造一个完美的“即插即用”的Web服务器？</p>
<p><img src="/content/images/zeroweb/0.jpg" alt=""></p>
<p>何为即插即用？</p>
<p>类似于优盘一样，插上电脑，等待几秒，直接识别为网卡，直接输入树莓派的网址，连接就是自己的网站。</p>
<p>有什么用？</p>
<p>实现本地web本地化，随着前端、后端技术的发展，web应用越来越多，但是web应用受制于网络的限制，一旦没有网络，就没有用武之地。</p>
<p>那么为什么不把web本地化呢？以后拿着“即插即用”的服务器，到任何电脑上，都能随时办公。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>我们可以把树莓派虚拟为网卡，然后在内网连接它。</p>
<p>1.下载完整版 Raspbian Jessie 或 Raspbian Jessie Lite 系统，并且刷到你的SD Card里，Windows用Win32 Disk Imager， Mac/Linux 用命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">diskutil list</div><div class="line">diskutil unmountDisk /dev/SD卡的标号 <span class="comment">#如disk2</span></div><div class="line"><span class="built_in">cd</span> /Users/ivan/Downloads/2016-11-25-raspbian-jessie <span class="comment">#进入目录</span></div><div class="line">sudo dd bs=1m <span class="keyword">if</span>=2016-11-25-raspbian-jessie.img of=/dev/rdisk2</div></pre></td></tr></table></figure>
<p>2.刷好系统后编辑<code>config.txt</code>文件，在最后一行下，另起一行添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtoverlay=dwc2</div></pre></td></tr></table></figure></p>
<p>保存文件</p>
<p>3.最后，打开<code>cmdline.txt</code>文件。<br>找到单词<code>rootwait</code>，在其之后添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modules-load=dwc2,g_ether</div></pre></td></tr></table></figure>
<p>4.添加一个文件名为<code>ssh</code>到根目录下，内容为空</p>
<p>5.把SD Card放到树莓派Zero，用安卓数据线与电脑连接，USB口接OTG口，等待60-90s，电脑会发现网卡并且自动配置ip地址。</p>
<p><img src="/content/images/raspizero/1.png" alt=""></p>
<p>6.Ping 一下raspberrypi.local看是否能通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PING raspberrypi.local (169.254.70.245): 56 data bytes</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=0 ttl=64 time=0.570 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=1 ttl=64 time=0.338 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=2 ttl=64 time=0.316 ms</div><div class="line">64 bytes from 169.254.70.245: icmp_seq=3 ttl=64 time=0.344 ms</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>1.ssh连接raspberrypi.local，默认密码为raspberry<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi.local</div></pre></td></tr></table></figure></p>
<p>2.通过直接运行<code>raspi-config</code>命令</p>
<p>你需要做</p>
<ul>
<li>容量扩展</li>
<li>更改系统时区</li>
<li>更改系统密码</li>
</ul>
<p>3.同时你需要通过执行<code>sudo passwd root</code>更改root密码</p>
<p>4.在本机设置代理</p>
<p>首先，设置本机名为Mac，在本机搭建一个squid，为了使树莓派安装web server，以后日常使用不需要。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install squid</div></pre></td></tr></table></figure>
<p>5.然后下载<a href="http://squidman.net/squidman/" target="_blank" rel="external">SquidMan</a>，安装。<br>在本机开启端口为8080的HTTP代理服务，并把本机名称更为Mac。</p>
<p>6.进入树莓派的shell，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/apt/apt.conf.d</div><div class="line">sudo vi 50raspi</div></pre></td></tr></table></figure></p>
<p>最后一行加入一句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Acquire::http::Proxy &quot;http://Mac.local:8080&quot;;</div></pre></td></tr></table></figure></p>
<p>保存</p>
<p>7.继续输入<code>apt-get update</code>查看是否有网络。</p>
<p>8.安装<code>lighthttpd+mysql+php</code></p>
<p>输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install lighttpd mysql-server php5-cgi php5-mysql</div></pre></td></tr></table></figure>
<p>等待安装完毕后，修改<code>php.ini</code>设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/php5/cgi/php.ini</div></pre></td></tr></table></figure>
<p>去掉这一条注释的<code>;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;cgi.fix_pathinfo = 1</div></pre></td></tr></table></figure></p>
<p>随后修改<code>lighttpd.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/lighttpd/lighttpd.conf</div></pre></td></tr></table></figure></p>
<p>在<code>server.modules</code>中增加<code>fastcgi</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server.modules = (</div><div class="line">&quot;mod_access&quot;,</div><div class="line">&quot;mod_alias&quot;,</div><div class="line">&quot;mod_compress&quot;,</div><div class="line"># &quot;mod_redirect&quot;,</div><div class="line">&quot;mod_fastcgi&quot;,</div><div class="line"># &quot;mod_rewrite&quot;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>最后添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fastcgi.server = ( &quot;.php&quot; =&gt; ((</div><div class="line">    &quot;bin-path&quot; =&gt; &quot;/usr/bin/php5-cgi&quot;,</div><div class="line">    &quot;socket&quot; =&gt; &quot;/tmp/php.socket&quot;</div><div class="line">)))</div></pre></td></tr></table></figure></p>
<p>重启lighttpd服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/lighttpd restart</div></pre></td></tr></table></figure></p>
<p>通过scp协议，上传一个<code>index.php</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>删除默认的<code>index.htm</code>文件，打开网站<code>http://自己树莓派名字.local</code><br>查看是否成功。</p>
<p><img src="/content/images/zeroweb/1.png" alt=""></p>
<p>不错，接下来的事情，就是把自己的源代码传到树莓派上，不过多叙述。</p>
<h1 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h1><p>从此以后，你只需要带上你的树莓派Zero就可以随时随地的打开自己的私有web服务。但是，树莓派Zero的性能，确实不行，建议跑一跑小型的程序，不要跑太大的程序。</p>
<p><img src="/content/images/zeroweb/2.png" alt=""></p>
<p>至于应用嘛，其实做什么都可以的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然Raspberry Pi Zero只有4.5英镑，非常便宜，但确实具有局限性，由于缺少网口、WiFi，功能比较单一，可曾设想，用Raspberry Pi Zero打造一个完美的“即插即用”的Web服务器？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images
    
    </summary>
    
      <category term="Rasberry" scheme="http://www.yfgeek.com/categories/Rasberry/"/>
    
    
      <category term="Raspberry" scheme="http://www.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Git 文件、文件夹区分大小写</title>
    <link href="http://www.yfgeek.com/2017/01/07/gitcase/"/>
    <id>http://www.yfgeek.com/2017/01/07/gitcase/</id>
    <published>2017-01-06T18:25:32.000Z</published>
    <updated>2017-10-26T12:59:55.517Z</updated>
    
    <content type="html"><![CDATA[<p>其实非常简单，只是提醒一个小常识，Git默认是不区分文件，文件夹大小写的。</p>
<p>这会给很多人带来很多困扰，比如文件改了名，在严格区分大小写的系统下，实际上是两个不同名字的文件，但是Git不区分大小写机制导致无法正常的commit。</p>
<p>开启Git区分大小写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config core.ignorecase false</div></pre></td></tr></table></figure>
<p>最近爱上了给别人找bug，Pull Request，❤️Github。</p>
<p>任何细节，都很重要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实非常简单，只是提醒一个小常识，Git默认是不区分文件，文件夹大小写的。&lt;/p&gt;
&lt;p&gt;这会给很多人带来很多困扰，比如文件改了名，在严格区分大小写的系统下，实际上是两个不同名字的文件，但是Git不区分大小写机制导致无法正常的commit。&lt;/p&gt;
&lt;p&gt;开启Git区分大小
    
    </summary>
    
      <category term="Github" scheme="http://www.yfgeek.com/categories/Github/"/>
    
    
      <category term="Github" scheme="http://www.yfgeek.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>iOS 10 iMessage字符崩溃Bug又来了</title>
    <link href="http://www.yfgeek.com/2017/01/02/iOS-10-iMessage%E5%AD%97%E7%AC%A6%E5%B4%A9%E6%BA%83Bug%E5%8F%88%E6%9D%A5%E4%BA%86/"/>
    <id>http://www.yfgeek.com/2017/01/02/iOS-10-iMessage字符崩溃Bug又来了/</id>
    <published>2017-01-01T19:49:54.000Z</published>
    <updated>2017-10-26T12:59:55.522Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇本人发表到Freebuf的文章。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>近日，黑客@vincedes3发现了一个从iOS 8 到 iOS 10.2.1 b2通用的iMessage字符崩溃Bug，该Bug同样利用了和当年iOS 8的iMessage短信Bug的类似手法，将一段恶意代码发送给受害者，受害者在接收短信后，浏览短信即可中招，此后短信应用陷入死机状态，除非打开修复网页程序，否则再也无法打开短信应用。</p>
<p><img src="http://image.3001.net/images/20170102/14833282151664.png!small" alt="1.png"></p>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>1. 下载利用文件 <a href="http://vincedes3.com/vincedes3.vcf" target="_blank" rel="external">点击这里下载</a></p>
<p>2. 把它传到 iCloud Drive, 百度云, 或者任何你能够在iPhone上下载到的地方</p>
<p>3. 打开这个文件，点击分享，再点击 短信图标</p>
<p>4. 通过iMessage把这个文件传给你的受害者好友</p>
<p>5. 等待受害者点开短信，他会中招的</p>
<p>6. 可以通过这个链接来修复 <a href="http://vincedes3.com/save.html" target="_blank" rel="external">点我修复</a></p>
<embed src="http://player.youku.com/player.php/sid/XMTg5NTI3ODE2NA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">

<p><a href="http://v.youku.com/v_show/id_XMTg5NTI3ODE2NA==.html#paction" target="_blank" rel="external">demo视频</a></p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>在受害者打开短信的时候，触发了大量能够引起短信程序崩溃的字符，当用户浏览该短信的时候，cpu进行了大量的计算直到短信app点不动。当用户关掉短信程序后，再次打开短信程序，系统试图加载上一次内容，依然会触发该bug。</p>
<p><img src="http://image.3001.net/images/20170102/14833289116916.jpg!small" alt="2.jpg"></p>
<p>TXT版本的触发代码: <a href="http://www.example.com" target="_blank" rel="external">http://vincedes3.com/crashtext.txt</a></p>
<p>HTML版本的触发代码: <a href="http://vincedes3.com/crashtext.html" target="_blank" rel="external">http://vincedes3.com/crashtext.html</a></p>
<h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>1. 把这个链接发给受害者手机 <a href="http://vincedes3.com/save.html" target="_blank" rel="external">点我修复</a></p>
<p>2. 该链接会触发短信的快捷链接，点击打开</p>
<p>3. 进入发送短信页面</p>
<p>4. 点击取消</p>
<p>5. 删掉发送者的短信即可解决bug，请勿再次尝试点入</p>
<p>本文翻译自：<a href="https://vincedes3.com/crash-message-app-iphone/" target="_blank" rel="external">https://vincedes3.com/crash-message-app-iphone/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇本人发表到Freebuf的文章。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;近日，黑客@vincedes3发现了一个从iOS 8 到 iOS 10.2.1 b2
    
    </summary>
    
      <category term="Hack" scheme="http://www.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://www.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>2016，2017</title>
    <link href="http://www.yfgeek.com/2016/12/31/2017/"/>
    <id>http://www.yfgeek.com/2016/12/31/2017/</id>
    <published>2016-12-31T06:51:23.000Z</published>
    <updated>2017-10-26T12:59:55.514Z</updated>
    
    <content type="html"><![CDATA[<p>似乎每年写年终总结已经成为习惯，2007年开始写博客，2009年开始，每年都象征性的写一个年终报告，或许是元旦或许是新年。</p>
<p>每年这个时候，都会自觉地打开cnbeta.com看每一年的<a href="http://www.cnbeta.com/articles/572451.htm" target="_blank" rel="external">新年祝福</a>。今年，也不例外，这么一看，已经9年过去了。</p>
<h1 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h1><p>在2016年，这一年励志在Github上取得更大的成就，知乎上娱乐为主。</p>
<p>截止2016年12月31日，知乎累计收获了1388个赞，获得 252 次感谢，209 次收藏。</p>
<p>Github获得Star总数88个，607次代码贡献次数，702个粉丝。</p>
<p>同时，2016年是忙碌的一年，是纠结的一年，是辛苦的一年。在这一年里，顺利的通过了雅思考试，在这一年里顺利的本科毕业，在这一年里励志转行计算机。</p>
<p>在这一年里，好朋友各奔东西，都有了自己的发展方向与人生目标，而我却还在迷茫之中。</p>
<h1 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h1><p>2017年是关键的一年，决定着人生发展方向，人生充满机遇，未来的事情，谁说的好呢？</p>
<p>我不去想，</p>
<p>是否能够成功 ，</p>
<p>既然选择了远方 ，</p>
<p>便只顾风雨兼程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;似乎每年写年终总结已经成为习惯，2007年开始写博客，2009年开始，每年都象征性的写一个年终报告，或许是元旦或许是新年。&lt;/p&gt;
&lt;p&gt;每年这个时候，都会自觉地打开cnbeta.com看每一年的&lt;a href=&quot;http://www.cnbeta.com/articles
    
    </summary>
    
      <category term="心情" scheme="http://www.yfgeek.com/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="心情" scheme="http://www.yfgeek.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Emoji 表情域名 引领未来</title>
    <link href="http://www.yfgeek.com/2016/12/27/emoji/"/>
    <id>http://www.yfgeek.com/2016/12/27/emoji/</id>
    <published>2016-12-26T19:37:27.000Z</published>
    <updated>2017-10-26T12:59:55.517Z</updated>
    
    <content type="html"><![CDATA[<p>国外媒体报道，《牛津词典》(Oxford Dictionaries)今日公布了2015年年度词汇。今年的年度“词汇”很难发音，因为它并不是由字母组成，而是一个黄色的卡通笑脸，带着两滴眼泪。😂</p>
<p><img src="/content/images/emoji/1.jpg" alt=""></p>
<p>Emoji 等 Unicode 字符，浏览器Punycode的方式将 Unicode字符用ASCII进行编码。</p>
<p>我也顺势跟风，注册了一个坑爹的TK域名。</p>
<p><a href="http://💌.tk" target="_blank" rel="external">💌.tk</a></p>
<p><img src="/content/images/emoji/emoji.jpg" alt=""></p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>在chrome浏览器上直接输入[想要注册的表情].com</p>
<p>按下回车键，chrome浏览器会自动帮你转换为ASCII编码方式的格式。</p>
<p>💌.tk</p>
<p>转换为：</p>
<p><a href="http://xn--rr8h.tk/" target="_blank" rel="external">http://xn--rr8h.tk/</a></p>
<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>拿着自己的域名转换后的字符，比如xn–rr8h，去Godaddy或者别的域名网站直接搜就好啦。</p>
<p>注意：</p>
<p>.com域名目前无法注册任何包含emoji表情字符的域名，尚未开发，一旦开放，又是一笔巨大的商机。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://🌶️🐔.ws" target="_blank" rel="external">🐔.ws</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国外媒体报道，《牛津词典》(Oxford Dictionaries)今日公布了2015年年度词汇。今年的年度“词汇”很难发音，因为它并不是由字母组成，而是一个黄色的卡通笑脸，带着两滴眼泪。😂&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/emoji/1
    
    </summary>
    
      <category term="Web" scheme="http://www.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://www.yfgeek.com/tags/Web/"/>
    
  </entry>
  
</feed>
